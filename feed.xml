<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TBOOX Open Source Project</title>
    <description>Focus on cross-platform development using c language</description>
    <link>http://www.tboox.org/</link>
    <atom:link href="http://www.tboox.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 17 Apr 2020 11:20:30 +0800</pubDate>
    <lastBuildDate>Fri, 17 Apr 2020 11:20:30 +0800</lastBuildDate>
    <generator>Jekyll v3.1.0</generator>
    
      <item>
        <title>xmake-gradle v1.0.7 released, Integrate xmake to quickly build Android JNI program</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake-gradle&quot;&gt;xmake-gradle&lt;/a&gt; is a gradle plugin that integrates xmake seamlessly.&lt;/p&gt;

&lt;p&gt;At present, there are two ways to do integrated development of android jni in gradle. It is supported by ndkBuild or CMake. Gradle also has built-in integration of these two tools.&lt;/p&gt;

&lt;p&gt;However, maintaining Android.mk is still very tedious, especially for large projects, and the dsl syntax of cmake is not simple and intuitive, and I personally don’t like it very much. Therefore, I have used xmake to implement cross-platform development. It’s simple, fast, friendly to novices, and it’s also very powerful. You can go to the xmake project homepage to see the introduction.&lt;/p&gt;

&lt;p&gt;In the past, if you want to use xmake to compile the android so library, you can only use the command line, such as:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -p android --ndk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxxx
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Although it is very simple, but if you want to package and integrate with android apk/aar, still need a lot of extra work. In order to improve the efficiency of developers, I recently reorganized this gradle plugin to seamlessly integrate into the entire gradle build System.&lt;/p&gt;

&lt;p&gt;In this way, users can easily use xmake to compile the jni library in android studio, and automatic integration.&lt;/p&gt;

&lt;p&gt;In addition, the relevant gradle configuration is basically the same as cmake and ndkbuild, most of them are compatible, and the switching cost will also be reduced a lot.&lt;/p&gt;

&lt;p&gt;Everyone is welcome to try it, the newly released plugin, if you want to know more, please refer to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake-gradle&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/plugin/more_plugins?id=gradle%e6%8f%92%e4%bb%b6%ef%bc%88jni%ef%bc%89&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;XMake installed on the system. Available &lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;apply-the-plugin&quot;&gt;Apply the plugin&lt;/h2&gt;

&lt;h3 id=&quot;plugins-dsl&quot;&gt;plugins DSL&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;plugins {
  id &#39;org.tboox.gradle-xmake-plugin&#39; version &#39;1.0.7&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;legacy-plugin-application&quot;&gt;Legacy plugin application&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;buildscript {
  repositories {
    maven {
      url &quot;https://plugins.gradle.org/m2/&quot;
    }
  }
  dependencies {
    classpath &#39;org.tboox:gradle-xmake-plugin:1.0.7&#39;
  }
  repositories {
    mavenCentral()
  }
}

apply plugin: &quot;org.tboox.gradle-xmake-plugin&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;configuation&quot;&gt;Configuation&lt;/h2&gt;

&lt;h3 id=&quot;simplest-example&quot;&gt;Simplest Example&lt;/h3&gt;

&lt;p&gt;We add &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake.lua&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;projectdir/jni/xmake.lua&lt;/code&gt; and enable xmake in build.gradle.&lt;/p&gt;

&lt;h4 id=&quot;buildgradle&quot;&gt;build.gradle&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;android {
    externalNativeBuild {
        xmake {
            path &quot;jni/xmake.lua&quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;jni&quot;&gt;JNI&lt;/h4&gt;

&lt;p&gt;The JNI project structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;projectdir
  - src
    - main
      - java
  - jni
    - xmake.lua
    - *.cpp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;xmake.lua:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nativelib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nativelib.cc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;more-gradle-configuations&quot;&gt;More Gradle Configuations&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;android {
    defaultConfig {
        externalNativeBuild {
            xmake {
                // append the global cflags (optional)
                cFlags &quot;-DTEST&quot;

                // append the global cppflags (optional)
                cppFlags &quot;-DTEST&quot;, &quot;-DTEST2&quot;

                // switch the build mode to `debug` for `xmake f -m debug` (optional)
                buildMode &quot;debug&quot;

                // set abi filters (optional), e.g. armeabi, armeabi-v7a, arm64-v8a, x86, x86_64
                // we can also get abiFilters from defaultConfig.ndk.abiFilters
                abiFilters &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot;
            }
        }
    }

    externalNativeBuild {
        xmake {
            // enable xmake and set xmake.lua project file path
            path &quot;jni/xmake.lua&quot;

            // enable verbose output (optional), e.g. verbose, warning, normal
            logLevel &quot;verbose&quot;

            // set c++stl (optional), e.g. c++_static/c++_shared, gnustl_static/gnustl_shared, stlport_static/stlport_shared
            stl &quot;c++_shared&quot;

            // set the given xmake program path (optional)
            // program /usr/local/bin/xmake

            // disable stdc++ library (optional)
            // stdcxx false

            // set the given ndk directory path (optional)
            // ndk &quot;/Users/ruki/files/android-ndk-r20b/&quot;

            // set sdk version of ndk (optional)
            // sdkver 21
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;build&quot;&gt;Build&lt;/h2&gt;

&lt;h3 id=&quot;build-jni-and-generate-apk&quot;&gt;Build JNI and generate apk&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;xmakeBuild&lt;/code&gt; will be injected to &lt;code class=&quot;highlighter-rouge&quot;&gt;assemble&lt;/code&gt; task automatically if the gradle-xmake-plugin has been applied.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;./gradlew&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; app:assembleDebug
&lt;/span&gt;&amp;gt; Task :nativelib:xmakeConfigureForArm64
&amp;gt; Task :nativelib:xmakeBuildForArm64
&amp;gt;&amp;gt; xmake build
[ 50%]: ccache compiling.debug nativelib.cc
[ 75%]: linking.debug libnativelib.so
[100%]: build ok!
&amp;gt;&amp;gt; install artifacts to /Users/ruki/projects/personal/xmake-gradle/nativelib/libs/arm64-v8a
&amp;gt; Task :nativelib:xmakeConfigureForArmv7
&amp;gt; Task :nativelib:xmakeBuildForArmv7
&amp;gt;&amp;gt; xmake build
[ 50%]: ccache compiling.debug nativelib.cc
[ 75%]: linking.debug libnativelib.so
[100%]: build ok!
&amp;gt;&amp;gt; install artifacts to /Users/ruki/projects/personal/xmake-gradle/nativelib/libs/armeabi-v7a
&amp;gt; Task :nativelib:preBuild
&amp;gt; Task :nativelib:assemble
&amp;gt; Task :app:assembleDebug
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;force-to-rebuild-jni&quot;&gt;Force to rebuild JNI&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;./gradlew&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; nativelib:xmakeRebuild
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 17 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2020/04/17/xmake-gradle-v1.0.7/</link>
        <guid isPermaLink="true">http://www.tboox.org/2020/04/17/xmake-gradle-v1.0.7/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>android</category>
        
        <category>jni</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake-gradle v1.0.7 发布, 集成xmake快速构建Android JNI程序</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake-gradle&quot;&gt;xmake-gradle&lt;/a&gt;是一个无缝整合 xmake 的 gradle 插件。&lt;/p&gt;

&lt;p&gt;目前在 gradle 中做 android jni 相关集成开发，有两种方式，通过 ndkBuild 或者 CMake 来支持，gradle 也内置了这两工具的集成&lt;/p&gt;

&lt;p&gt;但是维护 Android.mk 还是非常繁琐的，尤其是对于大型项目会比较痛苦，而 cmake 的 dsl 语法不够简洁直观，我个人也不是很喜欢，因此我先前整了 xmake 来实现跨平台开发，优势就是: 简单，快速，对新手友好，另外功能也很强大，具体有那些功能，大家可以到 xmake 项目主页看下相关介绍。&lt;/p&gt;

&lt;p&gt;而之前想要用 xmake 编译 android so 库，只能通过命令行的方式比如:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -p android --ndk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxxx
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;虽然已经很简单了，但是如果要跟 android apk/aar 一起打包集成，还是需要很多额外的工作，为了提高开发者的效率，我最近新整了这个 grafle 插件，来无缝集成到 gradle 的整个构建体系中去。&lt;/p&gt;

&lt;p&gt;这样，用户就可以在 android studio 方便的用 xmake 来编译 jni 库，以及自动集成了。&lt;/p&gt;

&lt;p&gt;另外，相关 gradle 配置基本跟 cmake 和 ndkbuild 的保持一致，大部分都是兼容的，切换成本也会降低很多。&lt;/p&gt;

&lt;p&gt;欢迎大家来试试哦，新鲜出炉的插件，如果你想要了解更多，请参考：中&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake-gradle&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/plugin/more_plugins?id=gradle%e6%8f%92%e4%bb%b6%ef%bc%88jni%ef%bc%89&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;准备工作&quot;&gt;准备工作&lt;/h2&gt;

&lt;p&gt;我们需要先安装好对应的xmake命令行工具，关于安装说明见：&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;xmake&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;应用插件&quot;&gt;应用插件&lt;/h2&gt;

&lt;h3 id=&quot;通过插件dsl集成&quot;&gt;通过插件DSL集成&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;plugins {
  id &#39;org.tboox.gradle-xmake-plugin&#39; version &#39;1.0.7&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;被废弃的插件集成方式&quot;&gt;被废弃的插件集成方式&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;buildscript {
  repositories {
    maven {
      url &quot;https://plugins.gradle.org/m2/&quot;
    }
  }
  dependencies {
    classpath &#39;org.tboox:gradle-xmake-plugin:1.0.7&#39;
  }
  repositories {
    mavenCentral()
  }
}

apply plugin: &quot;org.tboox.gradle-xmake-plugin&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;配置&quot;&gt;配置&lt;/h2&gt;

&lt;h3 id=&quot;最简单的配置示例&quot;&gt;最简单的配置示例&lt;/h3&gt;

&lt;p&gt;如果我们添加&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake.lua&lt;/code&gt;文件到&lt;code class=&quot;highlighter-rouge&quot;&gt;projectdir/jni/xmake.lua&lt;/code&gt;，那么我们只需要在build.gradle中启用生效了xmake指定下对应的JNI工程路径即可。&lt;/p&gt;

&lt;h4 id=&quot;buildgradle&quot;&gt;build.gradle&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;android {
    externalNativeBuild {
        xmake {
            path &quot;jni/xmake.lua&quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;jni&quot;&gt;JNI&lt;/h4&gt;

&lt;p&gt;JNI工程结构&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;projectdir
  - src
    - main
      - java
  - jni
    - xmake.lua
    - *.cpp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;xmake.lua:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nativelib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nativelib.cc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;更多gradle配置说明&quot;&gt;更多Gradle配置说明&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;android {
    defaultConfig {
        externalNativeBuild {
            xmake {
                // 追加设置全局c编译flags
                cFlags &quot;-DTEST&quot;

                // 追加设置全局c++编译flags
                cppFlags &quot;-DTEST&quot;, &quot;-DTEST2&quot;

                // 设置切换编译模式，与`xmake f -m debug`的配置对应，具体模式值根据自己的xmake.lua设置而定
                buildMode &quot;debug&quot;

                // 设置需要编译的abi列表，支持：armeabi, armeabi-v7a, arm64-v8a, x86, x86_64
                // 如果没有设置的话，我们也支持从defaultConfig.ndk.abiFilters中获取abiFilters
                abiFilters &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot;
            }
        }
    }

    externalNativeBuild {
        xmake {
            // 设置jni工程中xmake.lua根文件路径，这是必须的，不设置就不会启用jni编译
            path &quot;jni/xmake.lua&quot;

            // 启用详细输出，会显示完整编译命令行参数，其他值：verbose, warning, normal
            logLevel &quot;verbose&quot;

            // 指定c++ stl库，默认不指定会使用c++_static，其他值：c++_static/c++_shared, gnustl_static/gnustl_shared, stlport_static/stlport_shared
            stl &quot;c++_shared&quot;

            // 设置xmake可执行程序路径（通常不用设置）
            // program /usr/local/bin/xmake

            // 禁用stdc++库，默认是启用的
            // stdcxx false

            // 设置其他指定的ndk目录路径 （这是可选的，默认xmake会自动从$ANDROID_NDK_HOME或者`~/Library/Android/sdk/ndk-bundle`中检测）
            // 当然如果用户通过`xmake g --ndk=xxx`配置了全局设置，也会自动从这个里面检测
            // ndk &quot;/Users/ruki/files/android-ndk-r20b/&quot;

            // 设置ndk中sdk版本
            // sdkver 21
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;编译jni&quot;&gt;编译JNI&lt;/h2&gt;

&lt;h3 id=&quot;编译jni并且生成apk&quot;&gt;编译JNI并且生成APK&lt;/h3&gt;

&lt;p&gt;当&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle-xmake-plugin&lt;/code&gt;插件被应用生效后，&lt;code class=&quot;highlighter-rouge&quot;&gt;xmakeBuild&lt;/code&gt;任务会自动注入到现有的&lt;code class=&quot;highlighter-rouge&quot;&gt;assemble&lt;/code&gt;任务中去，自动执行jni库编译和集成。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;./gradlew&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; app:assembleDebug
&lt;/span&gt;&amp;gt; Task :nativelib:xmakeConfigureForArm64
&amp;gt; Task :nativelib:xmakeBuildForArm64
&amp;gt;&amp;gt; xmake build
[ 50%]: ccache compiling.debug nativelib.cc
[ 75%]: linking.debug libnativelib.so
[100%]: build ok!
&amp;gt;&amp;gt; install artifacts to /Users/ruki/projects/personal/xmake-gradle/nativelib/libs/arm64-v8a
&amp;gt; Task :nativelib:xmakeConfigureForArmv7
&amp;gt; Task :nativelib:xmakeBuildForArmv7
&amp;gt;&amp;gt; xmake build
[ 50%]: ccache compiling.debug nativelib.cc
[ 75%]: linking.debug libnativelib.so
[100%]: build ok!
&amp;gt;&amp;gt; install artifacts to /Users/ruki/projects/personal/xmake-gradle/nativelib/libs/armeabi-v7a
&amp;gt; Task :nativelib:preBuild
&amp;gt; Task :nativelib:assemble
&amp;gt; Task :app:assembleDebug
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;强制重建jni&quot;&gt;强制重建JNI&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;./gradlew&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; nativelib:xmakeRebuild
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 17 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2020/04/17/xmake-gradle-v1.0.7/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2020/04/17/xmake-gradle-v1.0.7/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>android</category>
        
        <category>jni</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake从入门到精通11：如何组织构建大型工程</title>
        <description>&lt;p&gt;xmake是一个基于Lua的轻量级现代化c/c++的项目构建工具，主要特点是：语法简单易上手，提供更加可读的项目维护，实现跨平台行为一致的构建体验。&lt;/p&gt;

&lt;p&gt;本文主要详细讲解下，如何通过配置子工程模块，来组织构建一个大规模的工程项目。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;维护简单的项目结构&quot;&gt;维护简单的项目结构&lt;/h3&gt;

&lt;p&gt;对于一些轻量型的小工程，通常只需要单个xmake.lua文件就能搞定，大体结构如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;projectdir
  - xmake.lua
  - src
    - test
      - *.c
    - demo
      - *.c
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;源码下面层级简单，通常只需要在项目根目录维护一个xmake.lua来定义所有target就能完成构建，看上去并不是很复杂，也很清晰。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 在根域设置通用配置，当前所有targets都会生效&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;COMMON&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/test/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TEST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/demo/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DEMO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;维护复杂的项目结构&quot;&gt;维护复杂的项目结构&lt;/h3&gt;

&lt;p&gt;但是对于一些大型项目，通常的组织结构层次很多也很深，需要编译的target目标也可能有十几甚至上百个，这个时候如果还是都在根xmake.lua文件中维护，就有点吃不消了。&lt;/p&gt;

&lt;p&gt;这个时候，我们就需要通过在每个子工程模块里面，单独创建xmake.lua来维护他们，然后使用xmake提供的includes接口，将他们按层级关系包含进来，最终变成一个树状结构：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;projectdir
  - xmake.lua
  - src
    - test
      - xmake.lua
      - test1
        - xmake.lua
      - test2
        - xmake.lua
      - test3
        - xmake.lua
    - demo
      - xmake.lua
      - demo1
        - xmake.lua
      - demo2
        - xmake.lua
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后，根xmake.lua会将所有子工程的xmake.lua通过层级includes全部引用进来，那么所有定义在子工程的target配置也会完全引用进来，我们在编译的时候永远不需要单独去切到某个子工程目录下操作，只需要：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake build test1
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake run test3
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake install demo1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就可以编译，运行，打包以及安装指定的子工程target，所以除非特殊情况，平常不推荐来回切换目录到子工程下单独编译，非常的繁琐。&lt;/p&gt;

&lt;h3 id=&quot;根xmakelua文件配置&quot;&gt;根xmake.lua文件配置&lt;/h3&gt;

&lt;p&gt;通常推荐的做法就是在根xmake.lua中仅仅配置一些对所有target都通用的设置，以及includes对子工程的引用，不放置对targets的定义，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- define project&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tbox&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_xmakever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2.3.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.6.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%Y%m%d%H%M&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- set common flags&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;all&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_languages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c99&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_cxflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-Wno-error=deprecated-declarations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-fno-strict-aliasing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-Wno-error=expansion-to-defined&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_mxflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-Wno-error=deprecated-declarations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-fno-strict-aliasing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-Wno-error=expansion-to-defined&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- add build modes&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- includes sub-projects&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;xmake里面所有的设置都是按tree状继承的，根xmake.lua中的root域设置会对所有includes的子xmake.lua里面的targets生效，
但反过来不会，子xmake.lua里面的root域设置仅对它下面的子xmake.lua生效，不会影响到父xmake.lua中定义的targets。&lt;/p&gt;

&lt;h3 id=&quot;子xmakelua文件配置&quot;&gt;子xmake.lua文件配置&lt;/h3&gt;

&lt;p&gt;所以，我们可以在每个子工程目录中，单独配置xmake.lua，里面的所有配置不会干扰父xmake.lua，只对它下面的更细粒度的子工程生效，就这样一层层按tree状生效下去。&lt;/p&gt;

&lt;p&gt;由于，已经在根xmake.lua配置了大部分通用配置，那么我们可以在test子工程下，专心配置只对test有用的设置，例如对于&lt;code class=&quot;highlighter-rouge&quot;&gt;projectdir/test/xmake.lua&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TEST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TEST1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test2/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TEST2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们可以在这里定义test的所有target，当然也可以继续分层，在每个test1, test2目录下单独维护xmake.lua，这个看自己项目的规模来决定。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TEST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;test1/xmake.lua&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TEST1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;test2/xmake.lua&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test2/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TEST2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;而这里面的&lt;code class=&quot;highlighter-rouge&quot;&gt;add_defines(&quot;TEST&quot;)&lt;/code&gt;在root域，会对test1/test2两个target都生效，但是对于demo目录的target不生效，因为它们是平级的，没有tree状继承关系。&lt;/p&gt;

&lt;h3 id=&quot;跨xmakelua间目标依赖&quot;&gt;跨xmake.lua间目标依赖&lt;/h3&gt;

&lt;p&gt;虽然，&lt;code class=&quot;highlighter-rouge&quot;&gt;projectdir/test/xmake.lua&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;projectdir/demo/xmake.lua&lt;/code&gt;两个子工程目录是平级关系，配置无法相互干扰，但是targets是可以跨xmake.lua访问的，来实现目标间的依赖。&lt;/p&gt;

&lt;p&gt;比如demo需要依赖test静态库，进行链接使用，那么demo下xmake.lua可以这么写：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;demo1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;demo1/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;只要通过&lt;code class=&quot;highlighter-rouge&quot;&gt;add_deps(&quot;test1&quot;)&lt;/code&gt;关联上对应其他子工程目标作为依赖即可，test1静态库会优先编译，并且demo可执行程序会自动link上它生成的libtest1.a库。&lt;/p&gt;

&lt;h3 id=&quot;文件路径的层级关系&quot;&gt;文件路径的层级关系&lt;/h3&gt;

&lt;p&gt;我们需要记住，所有跟路径相关的配置接口，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;add_includedirs&lt;/code&gt;等都是相对于当前子工程xmake.lua所在的目录的，所以只要添加的文件不跨模块，那么设置起来只需要考虑当前的相对路径就行了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;projectdir
  - test
    - xmake.lua
    - test1/*.c
    - test2/*.c
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;比如，这里添加的源文件路径，都是相对于test子工程目录的，我们不需要去设置绝对路径，这样会简化很多。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test2/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当然，如果我们有特殊需求，非要设置工程其他子模块下的文件路径呢？两种办法，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;../../&lt;/code&gt;的方式一层层绕出去，另外一种就是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;$(projectdir)&lt;/code&gt;内置变量，它表示项目全局根目录。&lt;/p&gt;

&lt;p&gt;比如在demo子工程下：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;demo1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;demo1/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;../../test/test1/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;或者：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;demo1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;demo1/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$(projectdir)/test/test1/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;includes接口使用进阶&quot;&gt;includes接口使用进阶&lt;/h3&gt;

&lt;h4 id=&quot;错误的使用方式&quot;&gt;错误的使用方式&lt;/h4&gt;

&lt;p&gt;includes这个接口属于全局接口，不隶属于任何target，所以请不要在target内部调用，下面是错误的用法：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;正确的用法是：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;或者：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 在下面调用，需要先显式退出target作用域&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;引用目录或文件&quot;&gt;引用目录或文件&lt;/h4&gt;

&lt;p&gt;另外，includes既可以引用目录，也可以直接引用文件，如果test1目录下存在xmake.lua，那么可以直接&lt;code class=&quot;highlighter-rouge&quot;&gt;includes(&quot;test1&quot;)&lt;/code&gt;来引用目录。&lt;/p&gt;

&lt;p&gt;如果test1目录下是其他xxxx.lua命令的项目文件，可以通过指定文件来引用：&lt;code class=&quot;highlighter-rouge&quot;&gt;includes(&quot;test1/xxxx.lua&quot;)&lt;/code&gt;，效果一样的。&lt;/p&gt;

&lt;h4 id=&quot;模式匹配进行批量导入&quot;&gt;模式匹配进行批量导入&lt;/h4&gt;

&lt;p&gt;includes还支持通过模式匹配的方式来批量导入多个子工程，比如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test/*/xmake.lua&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以导入test目录下，所有test1, test2等子工程目录下的配置，如果是&lt;code class=&quot;highlighter-rouge&quot;&gt;**&lt;/code&gt;还支持递归多级匹配&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test/**/xmake.lua&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过模式匹配，我们只需要在test/xmake.lua一处地方进行includes，以后用户在新增其他子工程xmake.lua，就会自动导入进来，非常方便。&lt;/p&gt;

&lt;h4 id=&quot;注意事项&quot;&gt;注意事项&lt;/h4&gt;

&lt;p&gt;另外，在使用includes的过程中，需要注意的一点是，它不是c语言的&lt;code class=&quot;highlighter-rouge&quot;&gt;#include&lt;/code&gt;，因此在当前配置中includes子配置，当前配置是不会有任何影响的，比如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面includes了一些子工程，但是这些子工程的配置是不会干扰当前test目标程序的。&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2020/04/11/quickstart-11-subprojects/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2020/04/11/quickstart-11-subprojects/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>子工程</category>
        
        <category>子模块</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.3.2, Build as fast as ninja</title>
        <description>&lt;p&gt;This version focuses on refactoring and optimization of the internal parallel build mechanism, enabling parallel compilation of source files between multiple targets, and support for parallel links. It also optimizes some internal losses of xmake and fixes some bugs that affect compilation speed.
Through testing and comparison, the current overall build speed is basically the same as ninja. Compared to cmake/make, meson/ninja is much faster, because they have an extra step to generate makefile / build.ninja.&lt;/p&gt;

&lt;p&gt;In addition, xmake also adds support for the sdcc compilation toolchain for compiling embedded programs such as 51/stm8.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/home&quot;&gt;Documents&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;some-optimizations&quot;&gt;Some optimizations&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;All source files between multiple targets are built in parallel at the same time (previously, they cannot cross targets, and will be blocked by links in the middle of serialization)&lt;/li&gt;
  &lt;li&gt;Multiple independent target links can be executed in parallel (previously only one link could be executed)&lt;/li&gt;
  &lt;li&gt;Fix previous task scheduling bug, more fine-grained scheduling, make full use of CPU core resources&lt;/li&gt;
  &lt;li&gt;Optimize some losses on xmake’s internal api, this effect is also obvious&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more optimization details, please see: &lt;a href=&quot;https://github.com/xmake-io/xmake/issues/589&quot;&gt;issue #589&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;build-speed-comparison&quot;&gt;Build speed comparison&lt;/h2&gt;

&lt;p&gt;We did some comparison tests on termux and macOS. The test project is at: &lt;a href=&quot;https://github.com/xmake-io/xmake/tree/master/core&quot;&gt;xmake-core&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For a relatively large number of target projects, the new version of xmake improves its build speed even more.&lt;/p&gt;

&lt;h3 id=&quot;multi-task-parallel-compilation&quot;&gt;Multi-task parallel compilation&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;buildsystem&lt;/th&gt;
      &lt;th&gt;Termux (8core/-j12)&lt;/th&gt;
      &lt;th&gt;buildsystem&lt;/th&gt;
      &lt;th&gt;MacOS (8core/-j12)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;xmake&lt;/td&gt;
      &lt;td&gt;24.890s&lt;/td&gt;
      &lt;td&gt;xmake&lt;/td&gt;
      &lt;td&gt;12.264s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ninja&lt;/td&gt;
      &lt;td&gt;25.682s&lt;/td&gt;
      &lt;td&gt;ninja&lt;/td&gt;
      &lt;td&gt;11.327s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cmake(gen+make)&lt;/td&gt;
      &lt;td&gt;5.416s+28.473s&lt;/td&gt;
      &lt;td&gt;cmake(gen+make)&lt;/td&gt;
      &lt;td&gt;1.203s+14.030s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cmake(gen+ninja)&lt;/td&gt;
      &lt;td&gt;4.458s+24.842s&lt;/td&gt;
      &lt;td&gt;cmake(gen+ninja)&lt;/td&gt;
      &lt;td&gt;0.988s+11.644s&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;single-task-compilation&quot;&gt;Single task compilation&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;buildsystem&lt;/th&gt;
      &lt;th&gt;Termux (-j1)&lt;/th&gt;
      &lt;th&gt;buildsystem&lt;/th&gt;
      &lt;th&gt;MacOS (-j1)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;xmake&lt;/td&gt;
      &lt;td&gt;1m57.707s&lt;/td&gt;
      &lt;td&gt;xmake&lt;/td&gt;
      &lt;td&gt;39.937s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ninja&lt;/td&gt;
      &lt;td&gt;1m52.845s&lt;/td&gt;
      &lt;td&gt;ninja&lt;/td&gt;
      &lt;td&gt;38.995s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cmake(gen+make)&lt;/td&gt;
      &lt;td&gt;5.416s+2m10.539s&lt;/td&gt;
      &lt;td&gt;cmake(gen+make)&lt;/td&gt;
      &lt;td&gt;1.203s+41.737s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cmake(gen+ninja)&lt;/td&gt;
      &lt;td&gt;4.458s+1m54.868s&lt;/td&gt;
      &lt;td&gt;cmake(gen+ninja)&lt;/td&gt;
      &lt;td&gt;0.988s+38.022s&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Add powershell theme for powershell terminal&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake --dry-run -v&lt;/code&gt; to dry run building target and only show verbose build command.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/712&quot;&gt;#712&lt;/a&gt;: Add sdcc platform and support sdcc compiler&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;change&quot;&gt;Change&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/589&quot;&gt;#589&lt;/a&gt;: Improve and optimize build speed, supports parallel compilation and linking across targets&lt;/li&gt;
  &lt;li&gt;Improve the ninja/cmake generator&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/728&quot;&gt;#728&lt;/a&gt;: Improve os.cp to support reserve source directory structure&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/732&quot;&gt;#732&lt;/a&gt;: Improve find_package to support &lt;code class=&quot;highlighter-rouge&quot;&gt;homebrew/cmake&lt;/code&gt; pacakges&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/695&quot;&gt;#695&lt;/a&gt;: Improve android abi&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Fix the link errors output issues for msvc&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/718&quot;&gt;#718&lt;/a&gt;: Fix download cache bug for package&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/722&quot;&gt;#722&lt;/a&gt;: Fix invalid package deps&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/719&quot;&gt;#719&lt;/a&gt;: Fix process exit bug&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/720&quot;&gt;#720&lt;/a&gt;: Fix compile_commands generator&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 28 Mar 2020 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2020/03/28/xmake-update-v2.3.2/</link>
        <guid isPermaLink="true">http://www.tboox.org/2020/03/28/xmake-update-v2.3.2/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>ninja</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.3.2 发布, 带来和ninja一样快的构建速度</title>
        <description>&lt;p&gt;这个版本重点重构优化了下内部并行构建机制，实现多个target间源文件的并行编译，以及并行link的支持，同时优化了xmake的一些内部损耗，修复影响编译速度的一些bug。
通过测试对比，目前的整体构建速度基本跟ninja持平，相比cmake/make, meson/ninja都快了不少，因为它们还额外多了一步生成makefile/build.ninja的过程。&lt;/p&gt;

&lt;p&gt;另外，xmake还增加了对sdcc编译工具链的支持，用于编译51/stm8等嵌入式程序。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;一些优化点&quot;&gt;一些优化点&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;多个target间所有源文件同时并行构建（之前不能跨target，中途会被link给堵住串行化）&lt;/li&gt;
  &lt;li&gt;多个无依赖的target的link可以并行执行（之前只能挨个执行link）&lt;/li&gt;
  &lt;li&gt;修复之前的任务调度bug，更加细粒度化调度，充分利用cpu core资源&lt;/li&gt;
  &lt;li&gt;优化xmake内部api上的一些损耗，这块效果也很明显&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;更多优化细节可以看下：&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/589&quot;&gt;issue #589&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;构建速度对比&quot;&gt;构建速度对比&lt;/h2&gt;

&lt;p&gt;我们在termux和macOS上做了一些对比测试，测试工程在: &lt;a href=&quot;https://github.com/xmake-io/xmake/tree/master/core&quot;&gt;xmake-core&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;对于相对比较多的target的项目，新版xmake对其构建速度的提升更加明显。&lt;/p&gt;

&lt;h3 id=&quot;多任务并行编译测试&quot;&gt;多任务并行编译测试&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;构建系统&lt;/th&gt;
      &lt;th&gt;Termux (8core/-j12)&lt;/th&gt;
      &lt;th&gt;构建系统&lt;/th&gt;
      &lt;th&gt;MacOS (8core/-j12)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;xmake&lt;/td&gt;
      &lt;td&gt;24.890s&lt;/td&gt;
      &lt;td&gt;xmake&lt;/td&gt;
      &lt;td&gt;12.264s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ninja&lt;/td&gt;
      &lt;td&gt;25.682s&lt;/td&gt;
      &lt;td&gt;ninja&lt;/td&gt;
      &lt;td&gt;11.327s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cmake(gen+make)&lt;/td&gt;
      &lt;td&gt;5.416s+28.473s&lt;/td&gt;
      &lt;td&gt;cmake(gen+make)&lt;/td&gt;
      &lt;td&gt;1.203s+14.030s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cmake(gen+ninja)&lt;/td&gt;
      &lt;td&gt;4.458s+24.842s&lt;/td&gt;
      &lt;td&gt;cmake(gen+ninja)&lt;/td&gt;
      &lt;td&gt;0.988s+11.644s&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;单任务编译测试&quot;&gt;单任务编译测试&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;构建系统&lt;/th&gt;
      &lt;th&gt;Termux (-j1)&lt;/th&gt;
      &lt;th&gt;构建系统&lt;/th&gt;
      &lt;th&gt;MacOS (-j1)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;xmake&lt;/td&gt;
      &lt;td&gt;1m57.707s&lt;/td&gt;
      &lt;td&gt;xmake&lt;/td&gt;
      &lt;td&gt;39.937s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ninja&lt;/td&gt;
      &lt;td&gt;1m52.845s&lt;/td&gt;
      &lt;td&gt;ninja&lt;/td&gt;
      &lt;td&gt;38.995s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cmake(gen+make)&lt;/td&gt;
      &lt;td&gt;5.416s+2m10.539s&lt;/td&gt;
      &lt;td&gt;cmake(gen+make)&lt;/td&gt;
      &lt;td&gt;1.203s+41.737s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cmake(gen+ninja)&lt;/td&gt;
      &lt;td&gt;4.458s+1m54.868s&lt;/td&gt;
      &lt;td&gt;cmake(gen+ninja)&lt;/td&gt;
      &lt;td&gt;0.988s+38.022s&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;更新内容&quot;&gt;更新内容&lt;/h2&gt;

&lt;h3 id=&quot;新特性&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;添加powershell色彩主题用于powershell终端下背景色显示&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake --dry-run -v&lt;/code&gt;命令去空运行构建，仅仅为了查看详细的构建命令&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/712&quot;&gt;#712&lt;/a&gt;: 添加sdcc平台，并且支持sdcc编译器&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;改进&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/589&quot;&gt;#589&lt;/a&gt;: 改进优化构建速度，支持跨目标间并行编译和link，编译速度和ninja基本持平&lt;/li&gt;
  &lt;li&gt;改进ninja/cmake工程文件生成器插件&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/728&quot;&gt;#728&lt;/a&gt;: 改进os.cp支持保留源目录结构层级的递归复制&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/732&quot;&gt;#732&lt;/a&gt;: 改进find_package支持查找homebrew/cmake安装的包&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/695&quot;&gt;#695&lt;/a&gt;: 改进采用android ndk最新的abi命名&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs修复&quot;&gt;Bugs修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;修复windows下link error显示问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/718&quot;&gt;#718&lt;/a&gt;: 修复依赖包下载在多镜像时一定概率缓存失效问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/722&quot;&gt;#722&lt;/a&gt;: 修复无效的包依赖导致安装死循环问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/719&quot;&gt;#719&lt;/a&gt;: 修复windows下主进程收到ctrlc后，.bat子进程没能立即退出的问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/720&quot;&gt;#720&lt;/a&gt;: 修复compile_commands生成器的路径转义问题&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 28 Mar 2020 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2020/03/28/xmake-update-v2.3.2/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2020/03/28/xmake-update-v2.3.2/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>ninja</category>
        
        <category>并行构建</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>tbox v1.6.5 released, Improve coroutine scheduling support</title>
        <description>&lt;p&gt;There are not many changes in functions and features in this version. The main improvement is the scheduling module of the coroutine, which enables unified scheduling support for the three objects: process, socket, and pipe. We can operate processes in the coroutine at the same time. There are pipes.&lt;/p&gt;

&lt;p&gt;This relies on the poller module provided by tbox, which uniformly encapsulates interfaces such as epoll/kqueue/select/poll/iocp to achieve cross-platform wait for socket/pipe object events. By providing consistent reactors, unified dispatching in coroutines is achieved. .&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/tbox&quot;&gt;Github Repo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tboox.io/&quot;&gt;Online documents&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, poller also adds support for waiting for process events. You can also wait for the exit event of the process at the same time through the same wait interface. Actually, there are still a lot of things about this.&lt;/p&gt;

&lt;p&gt;E.g:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On windows, thread + WaitForMultipleObjects is used to connect to poller&lt;/li&gt;
  &lt;li&gt;On unix, thread/waitpid to docker to poller&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The relevant poller interfaces mainly include the following four, where object can be a process/pipe/socket object, and then set the corresponding event to wait at the same time.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tb_bool_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_poller_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_object_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_cpointer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tb_bool_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_poller_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_object_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tb_bool_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_modify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_poller_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_object_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_cpointer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tb_long_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_poller_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;tb_poller_event_func_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_long_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/tbox/issues/112&quot;&gt;#112&lt;/a&gt;: Support unix socket，thanks &lt;a href=&quot;https://github.com/codehz&quot;&gt;@Codehz&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Support to wait pipe, socket and process in coroutine and poller at same time&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;improve uuid and improve uuid v4&lt;/li&gt;
  &lt;li&gt;support msys/mingw and cygwin/gcc toolchains&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 29 Feb 2020 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2020/02/29/update-v1.6.5/</link>
        <guid isPermaLink="true">http://www.tboox.org/2020/02/29/update-v1.6.5/</guid>
        
        <category>tbox</category>
        
        <category>coroutine</category>
        
        
        <category>tbox</category>
        
      </item>
    
      <item>
        <title>tbox v1.6.5 发布，改进协程调度支持</title>
        <description>&lt;p&gt;这个版本功能和特性改动并不多，主要是改进了下协程的调度模块，实现对process, socket，pipe这三种对象间的统一调度支持，我们可以在协程中同时操作进程，socket还有管道。&lt;/p&gt;

&lt;p&gt;这有赖于tbox提供的poller模块，统一封装了对epoll/kqueue/select/poll/iocp等接口，实现跨平台的等待socket/pipe对象事件，通过提供一致的reactor，实现了在协程中统一调度。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/tbox&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tboox.io/#/zh-cn/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外，poller还对进程事件的等待也加上了支持，可以通过相同的wait接口同时对process的退出事件进行等待，关于这块内部其实还是做了很多事的。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;win上通过thread+WaitForMultipleObjects的方式来对接到poller&lt;/li&gt;
  &lt;li&gt;unix上通过thread/waitpid的方式来对接到poller&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;相关poller接口主要有下面四个，其中object可以是process/pipe/socket对象，然后设置上对应的事件就可以去同时wait了。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tb_bool_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_poller_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_object_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_cpointer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tb_bool_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_poller_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_object_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tb_bool_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_modify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_poller_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_object_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_cpointer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tb_long_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_poller_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;tb_poller_event_func_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_long_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;新特性&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/tbox/issues/112&quot;&gt;#112&lt;/a&gt;: 新增unix socket支持，感谢&lt;a href=&quot;https://github.com/codehz&quot;&gt;@Codehz&lt;/a&gt;的贡献&lt;/li&gt;
  &lt;li&gt;在协程和poller中支持同时等待和调度socket，pipe io和process&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;改进&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;改进uuid生成，实现uuid v4&lt;/li&gt;
  &lt;li&gt;支持msys/mingw和cygwin/gcc上编译&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 29 Feb 2020 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2020/02/29/update-v1.6.5/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2020/02/29/update-v1.6.5/</guid>
        
        <category>tbox</category>
        
        <category>协程</category>
        
        
        <category>tbox</category>
        
      </item>
    
      <item>
        <title>xmake v2.3.1 released, Seamless integration with other build systems</title>
        <description>&lt;p&gt;In the past two months, I have made a lot of refactorings to improve xmake and added a lot of useful new features. Welcome to try it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Project Source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/&quot;&gt;Official Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some new features:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Compile other projects maintained by the build system with one click to achieve seamless docking and support cross compilation (such as fast cross compilation of autotools, see details below)&lt;/li&gt;
  &lt;li&gt;Added &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake project -k ninja&lt;/code&gt; project generation plugin to support generation of build.ninja build system files&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some improvements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Improve command line parameter input, support *nix style parameter input, thanks &lt;a href=&quot;https://github.com/OpportunityLiu&quot;&gt;@OpportunityLiu&lt;/a&gt; for contribution&lt;/li&gt;
  &lt;li&gt;Improve tab command completion, add command completion support for parameter values&lt;/li&gt;
  &lt;li&gt;Optimize get.sh installation and xmake update update scripts, add domestic mirror source, speed up download and install updates&lt;/li&gt;
  &lt;li&gt;gcc/clang compilation error output support native color highlighting support&lt;/li&gt;
  &lt;li&gt;Added msys/cygwin platform, and xmake source code also supports msys/mingw platform compilation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some invisible improvements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add socket and pipe modules and improve the process module&lt;/li&gt;
  &lt;li&gt;Refactor the whole process scheduler, better scheduling and parallel construction&lt;/li&gt;
  &lt;li&gt;Refactoring and improving the entire coroutine coroutine module, supporting simultaneous scheduling support for socket/pipe/process (preparing for subsequent remote compilation and distributed compilation)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are also some scattered bug fixes, see updates below.&lt;/p&gt;

&lt;h2 id=&quot;introduction-of-new-features&quot;&gt;Introduction of new features&lt;/h2&gt;

&lt;h3 id=&quot;generate-buildninja-build-file&quot;&gt;Generate build.ninja build file&lt;/h3&gt;

&lt;p&gt;xmake now supports the generation of ninja build files, allowing users to use ninja to quickly build projects maintained by xmake. I have to admit that in terms of build speed, ninja is indeed much faster than xmake. I will try to optimize the build speed of xmake in subsequent versions.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake project -k ninja
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then call ninja to build:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ninja
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or use the xmake command directly to call the ninja build, see below.&lt;/p&gt;

&lt;h3 id=&quot;try-building-with-another-build-system&quot;&gt;Try building with another build system&lt;/h3&gt;

&lt;p&gt;xmake v2.3.1 and above directly interface with other third-party build systems. Even if other projects do not use xmake.lua for maintenance, xmake can directly call other build tools to complete the compilation.&lt;/p&gt;

&lt;p&gt;Then the user can directly use a third-party build tool to compile, so why use xmake to call it? The main benefits are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Completely consistent behavior, simplifying the compilation process. No matter which other build system is used, you only need to execute the xmake command to compile. Users no longer need to study the different compilation processes of other tools&lt;/li&gt;
  &lt;li&gt;Docking the configuration environment of &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake config&lt;/code&gt;, reuse the platform detection and SDK environment detection of xmake, simplify the platform configuration&lt;/li&gt;
  &lt;li&gt;Docking cross-compilation environment, even for projects maintained with autotools, you can quickly cross-compile through xmake&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Build systems currently supported:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;autotools (cross-compiling environment for xmake)&lt;/li&gt;
  &lt;li&gt;xcodebuild&lt;/li&gt;
  &lt;li&gt;cmake&lt;/li&gt;
  &lt;li&gt;make&lt;/li&gt;
  &lt;li&gt;msbuild&lt;/li&gt;
  &lt;li&gt;scons&lt;/li&gt;
  &lt;li&gt;meson&lt;/li&gt;
  &lt;li&gt;bazel&lt;/li&gt;
  &lt;li&gt;ndkbuild&lt;/li&gt;
  &lt;li&gt;ninja&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;automatically-detect-build-system-and-compile&quot;&gt;Automatically detect build system and compile&lt;/h4&gt;

&lt;p&gt;For example, for a project maintained using cmake, executing xmake directly in the project root directory will automatically trigger a detection mechanism, detect CMakeLists.txt, and then prompt the user if cmake is needed to continue compiling.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake 
note: CMakeLists.txt found, try building it &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass -y or --confirm&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;y/n/d to skip confirm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;?
please input: y &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- Symbol prefix:
-- Configuring &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
-- Generating &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
-- Build files have been written to:/Users/ruki/Downloads/libpng-1.6.35/build
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  7%] Built target png-fix-itxt
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 21%] Built target genfiles
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 81%] Built target png
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 83%] Built target png_static
...
output to/Users/ruki/Downloads/libpng-1.6.35/build/artifacts
build ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;seamless-using-xmake-command&quot;&gt;Seamless using xmake command&lt;/h4&gt;

&lt;p&gt;Currently supports common commands such as &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake clean&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt; xmake --rebuild&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake config&lt;/code&gt; to seamlessly interface with third-party systems.&lt;/p&gt;

&lt;p&gt;We can directly clean the compiled output files of the cmake maintenance project&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake clean
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake clean --all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you bring &lt;code class=&quot;highlighter-rouge&quot;&gt;--all&lt;/code&gt; to perform the cleanup, all files generated by autotools/cmake will be cleared, not only the object files.&lt;/p&gt;

&lt;p&gt;The default &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake&lt;/code&gt; is docked with incremental build behavior, but we can also force a quick rebuild:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake --rebuild
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;manually-switch-the-specified-build-system&quot;&gt;Manually switch the specified build system&lt;/h4&gt;

&lt;p&gt;If there are multiple build systems under maintenance in a project, such as the libpng project, which comes with autotools/cmake/makefile and other build system maintenance, xmake defaults to using autotools by default. If you want to force switch to other build systems, you can execute:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=[&lt;/span&gt;autotools|cmake|make|msbuild|..]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In addition, the &lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=&lt;/code&gt; parameter is configured to manually specify the default build system, and the subsequent build process will not prompt the user for selection.&lt;/p&gt;

&lt;h4 id=&quot;fastly-cross-compile&quot;&gt;Fastly cross compile&lt;/h4&gt;

&lt;p&gt;As we all know, although many projects maintained by autotools support cross-compilation, the configuration process of cross-compilation is very complicated. There are still many differences in different toolchain processing methods, and many pits will be stepped in the middle.&lt;/p&gt;

&lt;p&gt;Even if you run through a toolchain’s cross-compilation, if you switch to another toolchain environment, it may take a long time, and if you use xmake, you usually only need two simple commands:&lt;/p&gt;

&lt;p&gt;!&amp;gt; At present autotools supports cross-compilation of xmake, and other build systems such as cmake will be added later.&lt;/p&gt;

&lt;h5 id=&quot;cross-compile-android-platform&quot;&gt;Cross compile android platform&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p android --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--ndk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;!&amp;gt; Among them, the –ndk parameter configuration is optional. If the user sets the ANDROID_NDK_HOME environment variable, or if the ndk is placed in ~/Library/Android/sdk/ndk-bundle, xmake can automatically detect it.&lt;/p&gt;

&lt;p&gt;Is not it simple? If you think this is not much, then you can directly operate &lt;code class=&quot;highlighter-rouge&quot;&gt;./configure&lt;/code&gt; to configure cross-compilation. You can see this document for comparison: [Using NDK with other compilation systems] (https://developer.android .com/ndk/guides/other_build_systems # autoconf)&lt;/p&gt;

&lt;p&gt;To put it bluntly, you probably have to do this, you may not be able to do it once:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TOOLCHAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NDK&lt;/span&gt;/toolchains/llvm/prebuilt/&lt;span class=&quot;nv&quot;&gt;$HOST_TAG&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-ar
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-as
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android21-clang
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CXX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android21-clang++
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-ld
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RANLIB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-ranlib
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;STRIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-strip
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./configure --host aarch64-linux-android
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;cross-compile-iphoneos-platform&quot;&gt;Cross compile iphoneos platform&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p iphoneos --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;cross-compile-mingw-platform&quot;&gt;Cross-compile mingw platform&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p mingw --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--mingw&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;using-other-cross-compilation-toolchains&quot;&gt;Using other cross-compilation toolchains&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p cross --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools --sdk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/xxxx
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For more cross compilation configuration details, please refer to the document: &lt;a href=&quot;https://xmake.io/#/guide/configuration?id=cross-compilation&quot;&gt;Cross Compilation&lt;/a&gt;, except for an additional &lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=&lt;/code&gt; parameter, all other cross-compilation configuration parameters are completely universal.&lt;/p&gt;

&lt;h4 id=&quot;passing-user-configuration-parameters&quot;&gt;Passing user configuration parameters&lt;/h4&gt;

&lt;p&gt;We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;--tryconfigs=&lt;/code&gt; to pass additional configuration parameters of the user to the corresponding third-party build system. For example: autotools will be passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;. / Configure&lt;/code&gt;, cmake will be passed to the&lt;code class=&quot;highlighter-rouge&quot;&gt; cmake&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools --tryconfigs&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-enable-shared=no&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For example, the above command, pass &lt;code class=&quot;highlighter-rouge&quot;&gt;--enable-shared=no&lt;/code&gt; to&lt;code class=&quot;highlighter-rouge&quot;&gt;./configure&lt;/code&gt; to disable dynamic library compilation.&lt;/p&gt;

&lt;p&gt;In addition, for &lt;code class=&quot;highlighter-rouge&quot;&gt;--cflags&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt; --includedirs&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;--ldflags&lt;/code&gt;, you don’t need to pass&lt;code class=&quot;highlighter-rouge&quot;&gt; --tryconfigs&lt;/code&gt;, you can pass the built-in parameters like &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake config --cflags=&lt;/code&gt; to pass through.&lt;/p&gt;

&lt;h4 id=&quot;examples-of-compiling-other-build-system&quot;&gt;Examples of compiling other build system&lt;/h4&gt;

&lt;h5 id=&quot;general-compilation&quot;&gt;General Compilation&lt;/h5&gt;

&lt;p&gt;In most cases, the compilation method after each docking system is consistent, except for the &lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=&lt;/code&gt; configuration parameter.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=[&lt;/span&gt;autotools|cmake|meson|ninja|bazel|make|msbuild|xcodebuild]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;!&amp;gt; We also need to make sure that the build tool specified by –trybuild is installed and working properly.&lt;/p&gt;

&lt;h5 id=&quot;building-android-jni-programs&quot;&gt;Building Android jni programs&lt;/h5&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;jni/Android.mk&lt;/code&gt; exists in the current project, then xmake can directly call ndk-build to build the jni library.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p android --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ndkbuild &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--ndk &lt;span class=&quot;o&quot;&gt;=]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;nix-style-command-parameter-input&quot;&gt;*nix style command parameter input&lt;/h3&gt;

&lt;p&gt;The current input specification is referenced from: &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html&quot;&gt;https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you very much &lt;a href=&quot;https://github.com/OpportunityLiu&quot;&gt;@OpportunityLiu&lt;/a&gt; for your contribution. The current input method can support the following writing:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake -j8 -rvD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Before, I could only write:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake -j 8 -r -v -D
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tab-command-completion&quot;&gt;Tab command completion&lt;/h3&gt;

&lt;p&gt;In previous versions, only parameter names could be completed. You can now complete the parameter values and prompt the value list. For example, after typing the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --plat &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; and
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Press the tab key to complete the platform parameters and become&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --plat &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; android
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;force-c-code-to-be-compiled-as-c-&quot;&gt;Force C code to be compiled as C ++&lt;/h3&gt;

&lt;p&gt;xmake adds a configuration parameter that specifies the type of source file and forces it to compile as a corresponding source file, such as compiling c code as c ++.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcekind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/675&quot;&gt;#675&lt;/a&gt;: Support to compile &lt;code class=&quot;highlighter-rouge&quot;&gt;*.c&lt;/code&gt; as c++, &lt;code class=&quot;highlighter-rouge&quot;&gt;add_files(&quot;*.c&quot;, {sourcekind = &quot;cxx&quot;})&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/681&quot;&gt;#681&lt;/a&gt;: Support compile xmake on msys/cygwin and add msys/cygwin platform&lt;/li&gt;
  &lt;li&gt;Add socket/pipe io modules and support to schedule socket/process/pipe in coroutine&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/192&quot;&gt;#192&lt;/a&gt;: Try building project with the third-party buildsystem&lt;/li&gt;
  &lt;li&gt;Enable color diagnostics output for gcc/clang&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/588&quot;&gt;#588&lt;/a&gt;: Improve project generator, &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake project -k ninja&lt;/code&gt;, support for build.ninja&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;change&quot;&gt;Change&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/665&quot;&gt;#665&lt;/a&gt;: Support to parse *nix style command options, thanks &lt;a href=&quot;https://github.com/OpportunityLiu&quot;&gt;@OpportunityLiu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/673&quot;&gt;#673&lt;/a&gt;: Improve tab complete to support argument values&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/680&quot;&gt;#680&lt;/a&gt;: Improve get.sh scripts and add download mirrors&lt;/li&gt;
  &lt;li&gt;Improve process scheduler&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/651&quot;&gt;#651&lt;/a&gt;: Improve os/io module syserrors tips&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Fix incremental compilation for checking the dependent file&lt;/li&gt;
  &lt;li&gt;Fix log output for parsing xmake-vscode/problem info&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/684&quot;&gt;#684&lt;/a&gt;: Fix linker errors for android ndk on windows&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 23 Feb 2020 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2020/02/23/xmake-update-v2.3.1/</link>
        <guid isPermaLink="true">http://www.tboox.org/2020/02/23/xmake-update-v2.3.1/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>autotools</category>
        
        <category>cmake</category>
        
        <category>ninja</category>
        
        <category>mingw</category>
        
        <category>msys</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.3.1 发布, 无缝对接其他构建系统</title>
        <description>&lt;p&gt;最近对xmake内部做了不少的重构来改进，并且新增了不少实用的新特性，欢迎来体验。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一些新特性：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;一键编译其他构建系统维护的项目，实现无缝对接，并且支持交叉编译（比如autotools的快速交叉编译，见下文详述）&lt;/li&gt;
  &lt;li&gt;新增&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake project -k ninja&lt;/code&gt;工程生成插件，支持对build.ninja构建系统文件的生成&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一些改进点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;改进命令行参数输入，支持*nix style的参数输入，感谢&lt;a href=&quot;https://github.com/OpportunityLiu&quot;&gt;@OpportunityLiu&lt;/a&gt;的贡献&lt;/li&gt;
  &lt;li&gt;改进tab命令补全，增加对参数values的命令补全支持&lt;/li&gt;
  &lt;li&gt;优化get.sh安装和xmake update更新脚本，添加国内镜像源，加速下载和安装更新&lt;/li&gt;
  &lt;li&gt;gcc/clang编译错误输出支持原生色彩高亮支持&lt;/li&gt;
  &lt;li&gt;新增msys/cygwin平台，并且xmake源码也支持msys/mingw平台编译&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一些看不见的改进点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;添加socket, pipe模块，改进process模块&lt;/li&gt;
  &lt;li&gt;重构整个进程调度器，更好的调度并行构建&lt;/li&gt;
  &lt;li&gt;重构改进整个coroutine协程模块，支持对socket/pipe/process三者的同时调度支持（为后续远程编译和分布式编译做准备）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;还有一些零散的bug修复，见下文更新内容。&lt;/p&gt;

&lt;h2 id=&quot;新特性介绍&quot;&gt;新特性介绍&lt;/h2&gt;

&lt;h3 id=&quot;生成buildninja构建文件&quot;&gt;生成build.ninja构建文件&lt;/h3&gt;

&lt;p&gt;xmake现已支持对ninja构建文件的生成，让用户可以使用ninja来快速构建xmake维护的项目。不得不承认，目前就构建速度来讲，ninja确实比xmake快不少，后续版本我会尝试优化下xmake的构建速度。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake project -k ninja
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后调用ninja来构建：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ninja
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;或者直接使用xmake命令来调用ninja构建，见下文。&lt;/p&gt;

&lt;h3 id=&quot;尝试使用其他构建系统构建&quot;&gt;尝试使用其他构建系统构建&lt;/h3&gt;

&lt;p&gt;xmake v2.3.1以上版本直接对接了其他第三方构建系统，即使其他项目中没有使用xmake.lua来维护，xmake也可以直接调用其他构建工具来完成编译。&lt;/p&gt;

&lt;p&gt;那用户直接调用使用第三方构建工具来编译不就行了，为啥还要用xmake去调用呢？主要有以下好处：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;完全的行为一致，简化编译流程，不管用了哪个其他构建系统，都只需要执行xmake这个命令就可以编译，用户不再需要去研究其他工具的不同的编译流程&lt;/li&gt;
  &lt;li&gt;完全对接&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake config&lt;/code&gt;的配置环境，复用xmake的平台探测和sdk环境检测，简化平台配置&lt;/li&gt;
  &lt;li&gt;对接交叉编译环境，即使是用autotools维护的项目，也能通过xmake快速实现交叉编译&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;目前已支持的构建系统：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;autotools（已完全对接xmake的交叉编译环境）&lt;/li&gt;
  &lt;li&gt;xcodebuild&lt;/li&gt;
  &lt;li&gt;cmake&lt;/li&gt;
  &lt;li&gt;make&lt;/li&gt;
  &lt;li&gt;msbuild&lt;/li&gt;
  &lt;li&gt;scons&lt;/li&gt;
  &lt;li&gt;meson&lt;/li&gt;
  &lt;li&gt;bazel&lt;/li&gt;
  &lt;li&gt;ndkbuild&lt;/li&gt;
  &lt;li&gt;ninja&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;自动探测构建系统并编译&quot;&gt;自动探测构建系统并编译&lt;/h4&gt;

&lt;p&gt;例如，对于一个使用cmake维护的项目，直接在项目根目录执行xmake，就会自动触发探测机制，检测到CMakeLists.txt，然后提示用户是否需要使用cmake来继续完成编译。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake 
note: CMakeLists.txt found, try building it &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass -y or --confirm&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;y/n/d to skip confirm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;?
please input: y &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- Symbol prefix:
-- Configuring &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
-- Generating &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
-- Build files have been written to: /Users/ruki/Downloads/libpng-1.6.35/build
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  7%] Built target png-fix-itxt
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 21%] Built target genfiles
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 81%] Built target png
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 83%] Built target png_static
...
output to /Users/ruki/Downloads/libpng-1.6.35/build/artifacts
build ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;无缝对接xmake命令&quot;&gt;无缝对接xmake命令&lt;/h4&gt;

&lt;p&gt;目前支持&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake clean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake --rebuild&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake config&lt;/code&gt;等常用命令与第三方系统的无缝对接。&lt;/p&gt;

&lt;p&gt;我们可以直接清理cmake维护项目的编译输出文件&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake clean
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake clean --all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果带上&lt;code class=&quot;highlighter-rouge&quot;&gt;--all&lt;/code&gt;执行清理，会清除autotools/cmake生成的所有文件，不仅仅只清理对象文件。&lt;/p&gt;

&lt;p&gt;默认&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake&lt;/code&gt;对接的是增量构建行为，不过我们也可以强制快速重建：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake --rebuild
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;手动切换指定构建系统&quot;&gt;手动切换指定构建系统&lt;/h4&gt;

&lt;p&gt;如果一个项目下有多个构建系统同时在维护，比如libpng项目，自带autotools/cmake/makefile等构建系统维护，xmake默认优先探测使用了autotools，如果想要强制切换其他构建系统，可以执行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=[&lt;/span&gt;autotools|cmake|make|msbuild| ..]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;另外，配置了&lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=&lt;/code&gt;参数手动指定了默认的构建系统，后续的build过程就不会额外提示用户选择了。&lt;/p&gt;

&lt;h4 id=&quot;实现快速交叉编译&quot;&gt;实现快速交叉编译&lt;/h4&gt;

&lt;p&gt;众所周知，autotools维护的项目虽然很多都支持交叉编译，但是交叉编译的配置过程很复杂，不同的工具链处理方式还有很多的差异，中途会踩到很多的坑。&lt;/p&gt;

&lt;p&gt;即使跑通了一个工具链的交叉编译，如果切到另外一个工具链环境，可能又要折腾好久，而如果使用xmake，通常只需要两条简单的命令即可：&lt;/p&gt;

&lt;p&gt;!&amp;gt; 目前就autotools对接支持了xmake的交叉编译，后期还会对cmake等其他构建系统加上支持。&lt;/p&gt;

&lt;h5 id=&quot;交叉编译android平台&quot;&gt;交叉编译android平台&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p android --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--ndk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;!&amp;gt; 其中，–ndk参数配置是可选的，如果用户设置了ANDROID_NDK_HOME环境变量，或者ndk放置在~/Library/Android/sdk/ndk-bundle，xmake都能自动检测到。&lt;/p&gt;

&lt;p&gt;是不是很简单？如果你觉得这没啥，那么可以对比下直接操作&lt;code class=&quot;highlighter-rouge&quot;&gt;./configure&lt;/code&gt;去配置交叉编译，可以看下这篇文档对比下：&lt;a href=&quot;https://developer.android.com/ndk/guides/other_build_systems#autoconf&quot;&gt;将NDK 与其他编译系统配合使用&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;说白了，你大概得这样，还不一定一次就能搞定：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TOOLCHAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NDK&lt;/span&gt;/toolchains/llvm/prebuilt/&lt;span class=&quot;nv&quot;&gt;$HOST_TAG&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-ar
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-as
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android21-clang
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CXX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android21-clang++
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-ld
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RANLIB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-ranlib
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;STRIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-strip
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./configure --host aarch64-linux-android
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;交叉编译iphoneos平台&quot;&gt;交叉编译iphoneos平台&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p iphoneos --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;交叉编译mingw平台&quot;&gt;交叉编译mingw平台&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p mingw --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--mingw&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;使用其他交叉编译工具链&quot;&gt;使用其他交叉编译工具链&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p cross --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools --sdk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/xxxx
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;关于更多交叉编译的配置细节，请参考文档：&lt;a href=&quot;https://xmake.io/#/zh-cn/guide/configuration?id=%e4%ba%a4%e5%8f%89%e7%bc%96%e8%af%91&quot;&gt;交叉编译&lt;/a&gt;，除了多了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=&lt;/code&gt;参数，其他交叉编译配置参数都是完全通用的。&lt;/p&gt;

&lt;h4 id=&quot;传递用户配置参数&quot;&gt;传递用户配置参数&lt;/h4&gt;

&lt;p&gt;我们可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;--tryconfigs=&lt;/code&gt;来传递用户额外的配置参数到对应的第三方构建系统，比如：autotools会传递给&lt;code class=&quot;highlighter-rouge&quot;&gt;./configure&lt;/code&gt;，cmake会传递给&lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt;命令。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools --tryconfigs&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--enable-shared=no&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;比如上述命令，传递&lt;code class=&quot;highlighter-rouge&quot;&gt;--enable-shared=no&lt;/code&gt;给&lt;code class=&quot;highlighter-rouge&quot;&gt;./configure&lt;/code&gt;，来禁用动态库编译。&lt;/p&gt;

&lt;p&gt;另外，对于&lt;code class=&quot;highlighter-rouge&quot;&gt;--cflags&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--includedirs&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;--ldflags&lt;/code&gt;等参数，不需要通过&lt;code class=&quot;highlighter-rouge&quot;&gt;--tryconfigs&lt;/code&gt;，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake config --cflags=&lt;/code&gt;等内置参数就可透传过去。&lt;/p&gt;

&lt;h4 id=&quot;编译其他构建系统过程示例&quot;&gt;编译其他构建系统过程示例&lt;/h4&gt;

&lt;h5 id=&quot;通用编译方式&quot;&gt;通用编译方式&lt;/h5&gt;

&lt;p&gt;大多数情况下，每个构建系统对接后的编译方式都是一致的，除了&lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=&lt;/code&gt;配置参数除外。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=[&lt;/span&gt;autotools|cmake|meson|ninja|bazel|make|msbuild|xcodebuild]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;!&amp;gt; 我们还需要确保–trybuild指定的构建工具已经安装能够正常使用。&lt;/p&gt;

&lt;h5 id=&quot;构建android-jni程序&quot;&gt;构建Android jni程序&lt;/h5&gt;

&lt;p&gt;如果当前项目下存在&lt;code class=&quot;highlighter-rouge&quot;&gt;jni/Android.mk&lt;/code&gt;，那么xmake可以直接调用ndk-build来构建jni库。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p android --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ndkbuild &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--ndk&lt;span class=&quot;o&quot;&gt;=]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;nix-style命令参数输入&quot;&gt;*nix style命令参数输入&lt;/h3&gt;

&lt;p&gt;目前的输入规范参考自：&lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html&quot;&gt;https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;也非常感谢&lt;a href=&quot;https://github.com/OpportunityLiu&quot;&gt;@OpportunityLiu&lt;/a&gt;的贡献，现在的输入方式，可以支持采用如下写法：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake -j8 -rvD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;之前只能这么写：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake -j 8 -r -v -D
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tab命令自动补全&quot;&gt;tab命令自动补全&lt;/h3&gt;

&lt;p&gt;之前的版本，只能对参数名进行补全，现在可以对参数值进行补全和值列表提示，比如敲如下命令后：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --plat&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;and
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;按tab键就可以补全platform参数，变成&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --plat&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;android
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;强制将c代码作为c编译&quot;&gt;强制将c代码作为c++编译&lt;/h3&gt;

&lt;p&gt;xmake新增一个配置参数，可以指定源文件的类型，强制作为对应的源文件来编译，比如将c代码作为c++来编译。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcekind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;更新内容&quot;&gt;更新内容&lt;/h2&gt;

&lt;h3 id=&quot;新特性&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/675&quot;&gt;#675&lt;/a&gt;: 支持通过设置强制将&lt;code class=&quot;highlighter-rouge&quot;&gt;*.c&lt;/code&gt;作为c++代码编译, &lt;code class=&quot;highlighter-rouge&quot;&gt;add_files(&quot;*.c&quot;, {sourcekind = &quot;cxx&quot;})&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/681&quot;&gt;#681&lt;/a&gt;: 支持在msys/cygwin上编译xmake，以及添加msys/cygwin编译平台&lt;/li&gt;
  &lt;li&gt;添加socket/pipe模块，并且支持在协程中同时调度process/socket/pipe&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/192&quot;&gt;#192&lt;/a&gt;: 尝试构建带有第三方构建系统的项目，还支持autotools项目的交叉编译&lt;/li&gt;
  &lt;li&gt;启用gcc/clang的编译错误色彩高亮输出&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/588&quot;&gt;#588&lt;/a&gt;: 改进工程生成插件&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake project -k ninja&lt;/code&gt;，增加对build.ninja生成支持&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;改进&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/665&quot;&gt;#665&lt;/a&gt;: 支持 *nix style 的参数输入，感谢&lt;a href=&quot;https://github.com/OpportunityLiu&quot;&gt;@OpportunityLiu&lt;/a&gt;的贡献&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/673&quot;&gt;#673&lt;/a&gt;: 改进tab命令补全，增加对参数values的补全支持&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/680&quot;&gt;#680&lt;/a&gt;: 优化get.sh安装脚本，添加国内镜像源，加速下载&lt;/li&gt;
  &lt;li&gt;改进process调度器&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/651&quot;&gt;#651&lt;/a&gt;: 改进os/io模块系统操作错误提示&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs修复&quot;&gt;Bugs修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;修复增量编译检测依赖文件的一些问题&lt;/li&gt;
  &lt;li&gt;修复log输出导致xmake-vscode插件解析编译错误信息失败问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/684&quot;&gt;#684&lt;/a&gt;: 修复windows下android ndk的一些linker错误&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 23 Feb 2020 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2020/02/23/xmake-update-v2.3.1/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2020/02/23/xmake-update-v2.3.1/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>autotools</category>
        
        <category>cmake</category>
        
        <category>ninja</category>
        
        <category>mingw</category>
        
        <category>msys</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>TBOOX开源工程2019总结和明年规划</title>
        <description>&lt;p&gt;今年一年总体还是有不少收获的，尤其是&lt;a href=&quot;https://xmake.io&quot;&gt;xmake&lt;/a&gt;，今年大部分时间都花在这个项目上面，总共发了5个大版本，大小特性改动不下百处，新增1000多次commit，处理issues超过300个。&lt;/p&gt;

&lt;p&gt;不过&lt;a href=&quot;https://github.com/tboox/tbox&quot;&gt;tbox&lt;/a&gt;也陆陆续续做了一些更新，还是有不少改进的地方。&lt;/p&gt;

&lt;p&gt;关于今年整体的项目进展，这边也做个简单的总结吧，这里主要总结一些比较大的特性改进，一些零散的小模块改动就不一一列举了。&lt;/p&gt;

&lt;h3 id=&quot;完成了远程包依赖管理&quot;&gt;完成了远程包依赖管理&lt;/h3&gt;

&lt;p&gt;这也是是今年最大的收获了，毕竟陆陆续续耗时了将近一年时间，虽然还有不少需要改进的地方，自建的包仓库也还不是很丰富，明年我会继续去完善它。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;libuv master&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ffmpeg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;zlib 1.20.*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tbox &amp;gt;1.6.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;libuv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ffmpeg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tbox&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;zlib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://xmake.io/assets/img/index/package_arch.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;新增vsxmake生成插件&quot;&gt;新增vsxmake生成插件&lt;/h3&gt;

&lt;p&gt;新版本xmake重新实现了一个vs工程的生成插件（非常感谢@OpportunityLiu的贡献），跟之前的生成vs的插件处理模式上有很大的不同，原先生成的vs工程是把所有源文件展开后，转交给vs来处理编译。&lt;/p&gt;

&lt;p&gt;但是像rules和自定义脚本这种是没法支持的，因为xmake的rules里面用了很多的on_build此类自定义脚本，无法展开，所以像qt， wdk此类的项目就没法支持导出到vs里面进行编译了。&lt;/p&gt;

&lt;p&gt;因此，为了解决这个问题，新版本的vs生成插件通过在vs下直接调用xmake命令，去执行编译操作，并且对intellsence和定义跳转，还有断点调试也做了支持。&lt;/p&gt;

&lt;p&gt;具体使用方式跟老版本类似：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake project -k &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vsxmake2010|vsxmake2013|vsxmake2015|..] -m &lt;span class=&quot;s2&quot;&gt;&quot;debug;release&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://xmake.io/assets/img/manual/qt_vs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;上线了新版的文档站点&quot;&gt;上线了新版的文档站点&lt;/h3&gt;

&lt;p&gt;由于之前的docute文档站仅支持单页markdown，随着文档的不断增多，维护起来越来越臃肿，因此今年我整体切到了docsify来管理。&lt;/p&gt;

&lt;p&gt;文档站点：&lt;a href=&quot;https://xmake.io/#/zh-cn/&quot;&gt;https://xmake.io/#/zh-cn/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-docs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;xmake日活用户翻了10倍&quot;&gt;xmake日活用户翻了10倍&lt;/h3&gt;

&lt;p&gt;其实也就只有50多个日活用户（比较惨 = =），不过相比去年每天仅仅只有5个独立用户在使用xmake来构建，今年算是有了不少起色，借助github traffics的粗略统计，每天有超过50个用户在使用xmake来构建自己的项目，每天构建的项目数超过100个。&lt;/p&gt;

&lt;p&gt;明年继续，哈哈~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-stats-2019.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;github-star数也增长了不少&quot;&gt;github star数也增长了不少&lt;/h3&gt;

&lt;p&gt;毕竟是冷门项目，受众很小，今年tbox和xmake都涨了1k多我已经知足了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/star-history-2019.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;一些使用了xmake的开源项目&quot;&gt;一些使用了xmake的开源项目&lt;/h3&gt;

&lt;p&gt;今年也有了一些知名的第三方开源项目使用了xmake来维护构建，主要有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/acl-dev/acl&quot;&gt;libacl&lt;/a&gt;: An advanced C/C++ Network library&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/acl-dev/libfiber&quot;&gt;libfiber&lt;/a&gt;: The high performance coroutine library for Linux/FreeBSD/Windows, supporting select/poll/epoll/kqueue/iocp/windows GUI&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/idealvin/co&quot;&gt;co&lt;/a&gt;: An elegant and efficient C++ basic library for Linux, Windows and Mac.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fasiondog/hikyuu&quot;&gt;hikyuu&lt;/a&gt;: Hikyuu Quant Framework 基于C++/Python的开源量化交易研究框架&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lc-ui/lcui.css&quot;&gt;LCUI.css&lt;/a&gt;: A UI component framework for building LCUI application.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lc-soft/LC-Finder&quot;&gt;LC-Finder&lt;/a&gt;: A simple pciture resource manager, support tag search and thumbnail preview.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里有个项目列表，里面是我收集到一些使用了xmake的项目：&lt;a href=&quot;https://github.com/xmake-io/awesome-xmake#projects&quot;&gt;https://github.com/xmake-io/awesome-xmake#projects&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;明年xmake相关的一些计划&quot;&gt;明年xmake相关的一些计划&lt;/h3&gt;

&lt;p&gt;明年的重点主要是在远程编译和分布式编译上，为此最近我正在改进tbox的协程支持，并且正在对xmake的lua协程做进一步封装，实现对pipe，socket和process的统一调度支持，为后续的远程编译做准备。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;实现跨平台的远程编译&lt;/li&gt;
  &lt;li&gt;实现跨平台的分布式编译&lt;/li&gt;
  &lt;li&gt;继续完善xmake与编辑器/IDE的集成&lt;/li&gt;
  &lt;li&gt;完善远程依赖包管理，自建仓库增加更多常用依赖包&lt;/li&gt;
  &lt;li&gt;继续封装lua的io协程调度模块，实现对pipe，socket和process的统一调度支持&lt;/li&gt;
  &lt;li&gt;提供对xcode工程的生成插件&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;tbox的一些特性改进&quot;&gt;tbox的一些特性改进&lt;/h3&gt;

&lt;p&gt;今年没花太多时间在tbox上面，总共也就发了一个版本，大部分特性改动主要还是服务于xmake，例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;添加stdfile接口去读写stdin, stdout和stderr。&lt;/li&gt;
  &lt;li&gt;添加对进程和线程的cpu亲缘性设置和获取&lt;/li&gt;
  &lt;li&gt;添加filelock文件锁跨平台api接口&lt;/li&gt;
  &lt;li&gt;添加匿名管道，命名管道支持&lt;/li&gt;
  &lt;li&gt;改进字符集编码转换，以及增加对ANSI编码的支持&lt;/li&gt;
  &lt;li&gt;改进原子操作，并增加c11风格原子接口&lt;/li&gt;
  &lt;li&gt;新增进程输出重定向到管道&lt;/li&gt;
  &lt;li&gt;针对协程栈使用虚拟内存&lt;/li&gt;
  &lt;li&gt;改进基于openssl/mbedtls的https访问&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不过明年我会进一步改进和实现协程、网络相关的模块，提供更多实用的基础功能。&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Dec 2019 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2019/12/31/tboox-now-and-future/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2019/12/31/tboox-now-and-future/</guid>
        
        <category>tboox</category>
        
        <category>tbox</category>
        
        <category>xmake</category>
        
        
        <category>tboox</category>
        
      </item>
    
  </channel>
</rss>
