<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TBOOX Open Source Project</title>
    <description>Focus on cross-platform development using c language</description>
    <link>https://tboox.org/</link>
    <atom:link href="https://tboox.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 19 Nov 2020 23:38:44 +0800</pubDate>
    <lastBuildDate>Thu, 19 Nov 2020 23:38:44 +0800</lastBuildDate>
    <generator>Jekyll v3.1.0</generator>
    
      <item>
        <title>Xrepo: A modern cross-platform C/C++ package manager</title>
        <description>&lt;p&gt;xrepo is a cross-platform C/C++ package manager based on &lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Xmake&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xrepo&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xrepo.xmake.io/#/&quot;&gt;Official Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is based on the runtime provided by xmake, but it is a complete and independent package management program. Compared with package managers such as vcpkg/homebrew, xrepo can provide C/C++ packages for more platforms and architectures at the same time.&lt;/p&gt;

&lt;p&gt;And it also supports multi-version semantic selection. In addition, it is also a decentralized distributed repository. It not only provides the official &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt; repository, It also supports users to build multiple private repositorys.&lt;/p&gt;

&lt;p&gt;At the same time, xrepo also supports installing packages from third-party package managers such as vcpkg/homebrew/conan, and provides unified and consistent library link information to facilitate integration and docking with third-party projects.&lt;/p&gt;

&lt;p&gt;If you want to know more, please refer to: &lt;a href=&quot;https://xrepo.xmake.io/#/getting_started&quot;&gt;Documents&lt;/a&gt;, &lt;a href=&quot;https://github.com/xmake-io/xrepo&quot;&gt;Github&lt;/a&gt; and &lt;a href=&quot;https://gitee.com/tboox/xrepo&quot;&gt;Gitee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xrepo.xmake.io/assets/img/xrepo.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;We only need install xmake to use the xrepo command. About the installation of xmake, we can see: &lt;a href=&quot;https://xmake.io/#/guide/installation&quot;&gt;Xmake Installation Document&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;supported-platforms&quot;&gt;Supported platforms&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Windows (x86, x64)&lt;/li&gt;
  &lt;li&gt;macOS (i386, x86_64, arm64)&lt;/li&gt;
  &lt;li&gt;Linux (i386, x86_64, cross-toolchains ..)&lt;/li&gt;
  &lt;li&gt;*BSD (i386, x86_64)&lt;/li&gt;
  &lt;li&gt;Android (x86, x86_64, armeabi, armeabi-v7a, arm64-v8a)&lt;/li&gt;
  &lt;li&gt;iOS (armv7, armv7s, arm64, i386, x86_64)&lt;/li&gt;
  &lt;li&gt;MSYS (i386, x86_64)&lt;/li&gt;
  &lt;li&gt;MinGW (i386, x86_64, arm, arm64)&lt;/li&gt;
  &lt;li&gt;Cross Toolchains&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;supported-package-repositories&quot;&gt;Supported package repositories&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Official package repository &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt; (tbox &amp;gt;1.6.1)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/package/remote_package?id=using-self-built-private-package-repository&quot;&gt;User-built repositories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Conan (conan::openssl/1.1.1g)&lt;/li&gt;
  &lt;li&gt;Vcpkg (vcpkg:ffmpeg)&lt;/li&gt;
  &lt;li&gt;Homebrew/Linuxbrew (brew::pcre2/libpcre2-8)&lt;/li&gt;
  &lt;li&gt;Pacman on archlinux/msys2 (pacman::libcurl)&lt;/li&gt;
  &lt;li&gt;Clib (clib::clibs/bytes@0.0.4)&lt;/li&gt;
  &lt;li&gt;Dub (dub::log 0.4.3)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;suppory-distributed-repository&quot;&gt;Suppory distributed repository&lt;/h2&gt;

&lt;p&gt;In addition to directly retrieving the installation package from the official repository: &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We can also add any number of self-built repositories, and even completely isolate the external network, and only maintain the installation and integration of private packages on the company’s internal network.&lt;/p&gt;

&lt;p&gt;Just use the following command to add your own repository address:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; add-repo myrepo https://github.com/mygroup/myrepo
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;seamless-integration-with-xmake-project&quot;&gt;Seamless integration with xmake project&lt;/h2&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tbox &amp;gt;1.6.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;libuv master&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vcpkg::ffmpeg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;brew::pcre2/libpcre2-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;conan::openssl/1.1.1g&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;openssl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tbox&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;libuv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vcpkg::ffmpeg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;brew::pcre2/libpcre2-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;openssl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The following is the overall architecture and compilation process integrated with xmake.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xmake.io/assets/img/index/package_arch.png&quot; width=&quot;650px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;get-started&quot;&gt;Get started&lt;/h2&gt;

&lt;h3 id=&quot;installation-package&quot;&gt;Installation package&lt;/h3&gt;

&lt;h4 id=&quot;basic-usage&quot;&gt;Basic usage&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install zlib tbox
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;install-the-specified-version-package&quot;&gt;Install the specified version package&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install &quot;zlib 1.2.x&quot;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install &quot;zlib &amp;gt;=1.2.0&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;install-the-specified-platform-package&quot;&gt;Install the specified platform package&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install -p iphoneos -a arm64 zlib
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install -p android [--ndk=/xxx] zlib
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install -p mingw [--mingw=/xxx] zlib
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install -p cross --sdk=/xxx/arm-linux-musleabi-cross zlib
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;install-the-debug-package&quot;&gt;Install the debug package&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install -m debug zlib
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;install-the-package-with-dynamic-library&quot;&gt;Install the package with dynamic library&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install -k shared zlib
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;install-the-specified-configuration-package&quot;&gt;Install the specified configuration package&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install -f &quot;vs_runtime=MD&quot; zlib
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install -f &quot;regex=true,thread=true&quot; boost
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;install-packages-from-third-party-package-manager&quot;&gt;Install packages from third-party package manager&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install brew::zlib
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install vcpkg::zlib
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install conan::zlib/1.2.11
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install pacman:libpng
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install dub:log
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;find-the-library-information-of-the-package&quot;&gt;Find the library information of the package&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; fetch pcre2
&lt;/span&gt;{
  {
    linkdirs = {
      &quot;/usr/local/Cellar/pcre2/10.33/lib&quot;
    },
    links = {
      &quot;pcre2-8&quot;
    },
    defines = {
      &quot;PCRE2_CODE_UNIT_WIDTH=8&quot;
    },
    includedirs = &quot;/usr/local/Cellar/pcre2/10.33/include&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; fetch --ldflags openssl
&lt;/span&gt;-L/Users/ruki/.xmake/packages/o/openssl/1.1.1/d639b7d6e3244216b403b39df5101abf/lib -lcrypto -lssl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; fetch --cflags openssl
&lt;/span&gt;-I/Users/ruki/.xmake/packages/o/openssl/1.1.1/d639b7d6e3244216b403b39df5101abf/include
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; fetch -p [iphoneos|android] --cflags &quot;zlib 1.2.x&quot;
&lt;/span&gt;-I/Users/ruki/.xmake/packages/z/zlib/1.2.11/df72d410e7e14391b1a4375d868a240c/include
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; fetch --cflags --ldflags conan::zlib/1.2.11
&lt;/span&gt;-I/Users/ruki/.conan/data/zlib/1.2.11/_/_/package/f74366f76f700cc6e991285892ad7a23c30e6d47/include -L/Users/ruki/.conan/data/zlib/1.2.11/_/_/package/f74366f76f700cc6e991285892ad7a23c30e6d47/lib -lz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;export-the-installed-packages&quot;&gt;Export the installed packages&lt;/h3&gt;

&lt;p&gt;xrepo can quickly export installed packages, including corresponding library files, header files, etc.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; export -o /tmp/output zlib
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;search-supported-packages&quot;&gt;Search supported packages&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; search zlib &quot;pcr*&quot;
&lt;/span&gt;    zlib:
      -&amp;gt; zlib: A Massively Spiffy Yet Delicately Unobtrusive Compression Library (in xmake-repo)
    pcr*:
      -&amp;gt; pcre2: A Perl Compatible Regular Expressions Library (in xmake-repo)
      -&amp;gt; pcre: A Perl Compatible Regular Expressions Library (in xmake-repo)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;show-package-environment-information&quot;&gt;Show package environment information&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; env --show luajit
&lt;/span&gt;{
   OLDPWD = &quot;/mnt/tbox&quot;,
   HOME = &quot;/home/ruki&quot;,
   PATH = &quot;/home/ruki/.xmake/packages/l/luajit/2.1.0-beta3/fbac76d823b844f0b91abf3df0a3bc61/bin:/tmp:/tmp/arm-linux-musleabi-cross/bin:~/.local/bin: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,
   TERM = &quot;xterm&quot;,
   PWD = &quot;/mnt/xmake&quot;,
   XMAKE_PROGRAM_DIR = &quot;/mnt/xmake/xmake&quot;,
   HOSTNAME = &quot;e6edd61ff1ab&quot;,
   LD_LIBRARY_PATH = &quot;/home/ruki/.xmake/packages/l/luajit/2.1.0-beta3/fbac76d823b844f0b91abf3df0a3bc61/lib&quot;,
   SHLVL = &quot;1&quot;,
   _ = &quot;/mnt/xmake/scripts/xrepo.sh&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;load-package-environment-and-run-commands&quot;&gt;Load package environment and run commands&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; env luajit
&lt;/span&gt;LuaJIT 2.1.0-beta3 -- Copyright (C) 2005-2017 Mike Pall. http://luajit.org/
JIT: ON SSE2 SSE3 SSE4.1 BMI2 fold cse dce fwd dse narrow loop abc sink fuse
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; env -b &quot;luajit 2.x&quot; luajit
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; env -p iphoneos -b &quot;zlib,libpng,luajit 2.x&quot; cmake ..
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;show-the-given-package-information&quot;&gt;Show the given package information&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; info zlib
&lt;/span&gt;The package info of project:
    require(zlib):
      -&amp;gt; description: A Massively Spiffy Yet Delicately Unobtrusive Compression Library
      -&amp;gt; version: 1.2.11
      -&amp;gt; urls:
         -&amp;gt; http://zlib.net/zlib-1.2.11.tar.gz
            -&amp;gt; c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1
         -&amp;gt; https://downloads.sourceforge.net/project/libpng/zlib/1.2.11/zlib-1.2.11.tar.gz
            -&amp;gt; c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1
      -&amp;gt; repo: xmake-repo https://gitee.com/tboox/xmake-repo.git master
      -&amp;gt; cachedir: /Users/ruki/.xmake/cache/packages/2010/z/zlib/1.2.11
      -&amp;gt; installdir: /Users/ruki/.xmake/packages/z/zlib/1.2.11/d639b7d6e3244216b403b39df5101abf
      -&amp;gt; searchdirs:
      -&amp;gt; searchnames: zlib-1.2.11.tar.gz
      -&amp;gt; fetchinfo: 1.2.11, system
          -&amp;gt; version: 1.2.11
          -&amp;gt; links: z
          -&amp;gt; linkdirs: /usr/local/Cellar/zlib/1.2.11/lib
          -&amp;gt; includedirs: /usr/local/Cellar/zlib/1.2.11/include
      -&amp;gt; platforms: iphoneos, mingw@windows, macosx, mingw@linux,macosx, android@linux,macosx, windows, linux
      -&amp;gt; requires:
         -&amp;gt; plat: macosx
         -&amp;gt; arch: x86_64
         -&amp;gt; configs:
            -&amp;gt; debug: false
            -&amp;gt; vs_runtime: MT
            -&amp;gt; shared: false
      -&amp;gt; configs:
      -&amp;gt; configs (builtin):
         -&amp;gt; debug: Enable debug symbols. (default: false)
         -&amp;gt; shared: Enable shared library. (default: false)
         -&amp;gt; cflags: Set the C compiler flags.
         -&amp;gt; cxflags: Set the C/C++ compiler flags.
         -&amp;gt; cxxflags: Set the C++ compiler flags.
         -&amp;gt; asflags: Set the assembler flags.
         -&amp;gt; vs_runtime: Set vs compiler runtime. (default: MT)
            -&amp;gt; values: {&quot;MT&quot;,&quot;MD&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 15 Nov 2020 00:00:00 +0800</pubDate>
        <link>https://tboox.org/2020/11/15/xrepo-new-command/</link>
        <guid isPermaLink="true">https://tboox.org/2020/11/15/xrepo-new-command/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>xrepo</category>
        
        <category>package</category>
        
        <category>manager</category>
        
        <category>vcpkg</category>
        
        <category>conan</category>
        
        <category>dub</category>
        
        <category>pacman</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>Xrepo：一个现代化的跨平台 C/C++ 包管理器</title>
        <description>&lt;p&gt;xrepo 是一个基于 &lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Xmake&lt;/a&gt; 的跨平台 C/C++ 包管理器。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xrepo&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xrepo.xmake.io/#/zh-cn/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;它基于 xmake 提供的运行时，但却是一个完整独立的包管理程序，相比 vcpkg/homebrew 此类包管理器，xrepo 能够同时提供更多平台和架构的 C/C++ 包。&lt;/p&gt;

&lt;p&gt;并且还支持多版本语义选择，另外它还是一个去中心化的分布式仓库，不仅仅提供了官方的 &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt; 仓库，还支持用户自建多个私有仓库。&lt;/p&gt;

&lt;p&gt;同时，xrepo 也支持从 vcpkg/homebrew/conan 等第三方包管理器中安装包，并提供统一一致的库链接信息，方便与第三方项目的集成对接。&lt;/p&gt;

&lt;p&gt;如果你想要了解更多，请参考：&lt;a href=&quot;https://xrepo.xmake.io/#/zh-cn/getting_started&quot;&gt;在线文档&lt;/a&gt;, &lt;a href=&quot;https://github.com/xmake-io/xrepo&quot;&gt;Github&lt;/a&gt; 以及 &lt;a href=&quot;https://gitee.com/tboox/xrepo&quot;&gt;Gitee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xrepo.xmake.io/assets/img/xrepo.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;p&gt;我们只需要安装上 xmake 就可以使用 xrepo 命令，关于 xmake 的安装，我们可以看下：&lt;a href=&quot;https://xmake.io/#/zh-cn/guide/installation&quot;&gt;xmake 安装文档&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;支持平台&quot;&gt;支持平台&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Windows (x86, x64)&lt;/li&gt;
  &lt;li&gt;macOS (i386, x86_64, arm64)&lt;/li&gt;
  &lt;li&gt;Linux (i386, x86_64, cross-toolchains ..)&lt;/li&gt;
  &lt;li&gt;*BSD (i386, x86_64)&lt;/li&gt;
  &lt;li&gt;Android (x86, x86_64, armeabi, armeabi-v7a, arm64-v8a)&lt;/li&gt;
  &lt;li&gt;iOS (armv7, armv7s, arm64, i386, x86_64)&lt;/li&gt;
  &lt;li&gt;MSYS (i386, x86_64)&lt;/li&gt;
  &lt;li&gt;MinGW (i386, x86_64, arm, arm64)&lt;/li&gt;
  &lt;li&gt;Cross Toolchains&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;支持的包管理仓库&quot;&gt;支持的包管理仓库&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;官方自建仓库 &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt; (tbox &amp;gt;1.6.1)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/package/remote_package?id=%e4%bd%bf%e7%94%a8%e8%87%aa%e5%bb%ba%e7%a7%81%e6%9c%89%e5%8c%85%e4%bb%93%e5%ba%93&quot;&gt;用户自建仓库&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Conan (conan::openssl/1.1.1g)&lt;/li&gt;
  &lt;li&gt;Vcpkg (vcpkg:ffmpeg)&lt;/li&gt;
  &lt;li&gt;Homebrew/Linuxbrew (brew::pcre2/libpcre2-8)&lt;/li&gt;
  &lt;li&gt;Pacman on archlinux/msys2 (pacman::libcurl)&lt;/li&gt;
  &lt;li&gt;Clib (clib::clibs/bytes@0.0.4)&lt;/li&gt;
  &lt;li&gt;Dub (dub::log 0.4.3)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;分布式仓库支持&quot;&gt;分布式仓库支持&lt;/h2&gt;

&lt;p&gt;除了可以直接从官方仓库：&lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt; 检索安装包之外，
我们还可以添加任意多个自建的仓库，甚至可以完全隔离外网，仅仅在公司内部网络维护私有包的安装集成。&lt;/p&gt;

&lt;p&gt;只需要通过下面的命令，添加上自己的仓库地址：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; add-repo myrepo https://github.com/mygroup/myrepo
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;与-xmake-的工程无缝集成&quot;&gt;与 xmake 的工程无缝集成&lt;/h2&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tbox &amp;gt;1.6.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;libuv master&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vcpkg::ffmpeg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;brew::pcre2/libpcre2-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;conan::openssl/1.1.1g&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;openssl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tbox&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;libuv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vcpkg::ffmpeg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;brew::pcre2/libpcre2-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;openssl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面是与 xmake 集成的整体架构和编译流程。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xmake.io/assets/img/index/package_arch.png&quot; width=&quot;650px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;快速上手&quot;&gt;快速上手&lt;/h2&gt;

&lt;h3 id=&quot;安装包&quot;&gt;安装包&lt;/h3&gt;

&lt;h4 id=&quot;基本使用&quot;&gt;基本使用&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install zlib tbox
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;安装指定版本包&quot;&gt;安装指定版本包&lt;/h4&gt;

&lt;p&gt;完整支持 Semantic Versioning (语义版本)。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install &quot;zlib 1.2.x&quot;
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install &quot;zlib &amp;gt;=1.2.0&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;安装指定平台包&quot;&gt;安装指定平台包&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install -p iphoneos -a arm64 zlib
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install -p android [--ndk=/xxx] zlib
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install -p mingw [--mingw=/xxx] zlib
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install -p cross --sdk=/xxx/arm-linux-musleabi-cross zlib
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;安装调试版本包&quot;&gt;安装调试版本包&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install -m debug zlib
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;安装动态库版本包&quot;&gt;安装动态库版本包&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install -k shared zlib
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;安装指定配置包&quot;&gt;安装指定配置包&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install -f &quot;vs_runtime=MD&quot; zlib
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install -f &quot;regex=true,thread=true&quot; boost
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;安装第三方包管理器的包&quot;&gt;安装第三方包管理器的包&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install brew::zlib
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install vcpkg::zlib
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install conan::zlib/1.2.11
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install pacman:libpng
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install dub:log
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;查找包的库使用信息&quot;&gt;查找包的库使用信息&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; fetch pcre2
&lt;/span&gt;{
  {
    linkdirs = {
      &quot;/usr/local/Cellar/pcre2/10.33/lib&quot;
    },
    links = {
      &quot;pcre2-8&quot;
    },
    defines = {
      &quot;PCRE2_CODE_UNIT_WIDTH=8&quot;
    },
    includedirs = &quot;/usr/local/Cellar/pcre2/10.33/include&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; fetch --ldflags openssl
&lt;/span&gt;-L/Users/ruki/.xmake/packages/o/openssl/1.1.1/d639b7d6e3244216b403b39df5101abf/lib -lcrypto -lssl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; fetch --cflags openssl
&lt;/span&gt;-I/Users/ruki/.xmake/packages/o/openssl/1.1.1/d639b7d6e3244216b403b39df5101abf/include
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; fetch -p [iphoneos|android] --cflags &quot;zlib 1.2.x&quot;
&lt;/span&gt;-I/Users/ruki/.xmake/packages/z/zlib/1.2.11/df72d410e7e14391b1a4375d868a240c/include
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; fetch --cflags --ldflags conan::zlib/1.2.11
&lt;/span&gt;-I/Users/ruki/.conan/data/zlib/1.2.11/_/_/package/f74366f76f700cc6e991285892ad7a23c30e6d47/include -L/Users/ruki/.conan/data/zlib/1.2.11/_/_/package/f74366f76f700cc6e991285892ad7a23c30e6d47/lib -lz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;导出安装后的包&quot;&gt;导出安装后的包&lt;/h3&gt;

&lt;p&gt;xrepo 可以快速导出已经安装后的包，包括对应的库文件，头文件等等。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; export -o /tmp/output zlib
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;搜索支持的包&quot;&gt;搜索支持的包&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; search zlib &quot;pcr*&quot;
&lt;/span&gt;    zlib:
      -&amp;gt; zlib: A Massively Spiffy Yet Delicately Unobtrusive Compression Library (in xmake-repo)
    pcr*:
      -&amp;gt; pcre2: A Perl Compatible Regular Expressions Library (in xmake-repo)
      -&amp;gt; pcre: A Perl Compatible Regular Expressions Library (in xmake-repo)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;查看包环境信息&quot;&gt;查看包环境信息&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; env --show luajit
&lt;/span&gt;{
  OLDPWD = &quot;/mnt/tbox&quot;,
  HOME = &quot;/home/ruki&quot;,
  PATH = &quot;/home/ruki/.xmake/packages/l/luajit/2.1.0-beta3/fbac76d823b844f0b91abf3df0a3bc61/bin:/tmp:/tmp/arm-linux-musleabi-cross/bin:~/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,
  TERM = &quot;xterm&quot;,
  PWD = &quot;/mnt/xmake&quot;,
  XMAKE_PROGRAM_DIR = &quot;/mnt/xmake/xmake&quot;,
  HOSTNAME = &quot;e6edd61ff1ab&quot;,
  LD_LIBRARY_PATH = &quot;/home/ruki/.xmake/packages/l/luajit/2.1.0-beta3/fbac76d823b844f0b91abf3df0a3bc61/lib&quot;,
  SHLVL = &quot;1&quot;,
  _ = &quot;/mnt/xmake/scripts/xrepo.sh&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;加载执行包环境并运行命令&quot;&gt;加载执行包环境并运行命令&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; env luajit
&lt;/span&gt;LuaJIT 2.1.0-beta3 -- Copyright (C) 2005-2017 Mike Pall. http://luajit.org/
JIT: ON SSE2 SSE3 SSE4.1 BMI2 fold cse dce fwd dse narrow loop abc sink fuse
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; env -b &quot;luajit 2.x&quot; luajit
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; env -p iphoneos -b &quot;zlib,libpng,luajit 2.x&quot; cmake ..
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;查看包信息&quot;&gt;查看包信息&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xrepo&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; info zlib
&lt;/span&gt;The package info of project:
    require(zlib):
      -&amp;gt; description: A Massively Spiffy Yet Delicately Unobtrusive Compression Library
      -&amp;gt; version: 1.2.11
      -&amp;gt; urls:
         -&amp;gt; http://zlib.net/zlib-1.2.11.tar.gz
            -&amp;gt; c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1
         -&amp;gt; https://downloads.sourceforge.net/project/libpng/zlib/1.2.11/zlib-1.2.11.tar.gz
            -&amp;gt; c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1
      -&amp;gt; repo: xmake-repo https://gitee.com/tboox/xmake-repo.git master
      -&amp;gt; cachedir: /Users/ruki/.xmake/cache/packages/2010/z/zlib/1.2.11
      -&amp;gt; installdir: /Users/ruki/.xmake/packages/z/zlib/1.2.11/d639b7d6e3244216b403b39df5101abf
      -&amp;gt; searchdirs:
      -&amp;gt; searchnames: zlib-1.2.11.tar.gz
      -&amp;gt; fetchinfo: 1.2.11, system
          -&amp;gt; version: 1.2.11
          -&amp;gt; links: z
          -&amp;gt; linkdirs: /usr/local/Cellar/zlib/1.2.11/lib
          -&amp;gt; includedirs: /usr/local/Cellar/zlib/1.2.11/include
      -&amp;gt; platforms: iphoneos, mingw@windows, macosx, mingw@linux,macosx, android@linux,macosx, windows, linux
      -&amp;gt; requires:
         -&amp;gt; plat: macosx
         -&amp;gt; arch: x86_64
         -&amp;gt; configs:
            -&amp;gt; debug: false
            -&amp;gt; vs_runtime: MT
            -&amp;gt; shared: false
      -&amp;gt; configs:
      -&amp;gt; configs (builtin):
         -&amp;gt; debug: Enable debug symbols. (default: false)
         -&amp;gt; shared: Enable shared library. (default: false)
         -&amp;gt; cflags: Set the C compiler flags.
         -&amp;gt; cxflags: Set the C/C++ compiler flags.
         -&amp;gt; cxxflags: Set the C++ compiler flags.
         -&amp;gt; asflags: Set the assembler flags.
         -&amp;gt; vs_runtime: Set vs compiler runtime. (default: MT)
            -&amp;gt; values: {&quot;MT&quot;,&quot;MD&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 15 Nov 2020 00:00:00 +0800</pubDate>
        <link>https://tboox.org/cn/2020/11/15/xrepo-new-command/</link>
        <guid isPermaLink="true">https://tboox.org/cn/2020/11/15/xrepo-new-command/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>xrepo</category>
        
        <category>package</category>
        
        <category>manager</category>
        
        <category>vcpkg</category>
        
        <category>conan</category>
        
        <category>dub</category>
        
        <category>pacman</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>LTUI v2.2 released, A cross-platform terminal ui library based on Lua</title>
        <description>&lt;p&gt;LTUI is a lua-based cross-platform character terminal UI interface library.&lt;/p&gt;

&lt;p&gt;This framework is derived from the requirement of graphical menu configuration in &lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;xmake&lt;/a&gt;, similar to the menuconf of linux kernel to configure compilation parameters, so based on curses and lua, a complete set of cross- The character terminal ui library of the platform.
And the style style basically refers to kconfig-frontends, of course, users can also customize different ui styles.&lt;/p&gt;

&lt;p&gt;In addition, LTUI is completely cross-platform, and the terminal terminal on windows is also fully supported. On windows, ltui will use pdcurses to draw windows.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/ltui&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;changelog&quot;&gt;Changelog&lt;/h3&gt;

&lt;p&gt;In the new version, we mainly added support for mouse events. In addition to curses/ncurses, we also support pdcurses on windows. Here we are very grateful for the contribution of &lt;a href=&quot;https://github.com/laelnasan&quot;&gt;@laelnasan&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;In addition, we have added a test case of &lt;code class=&quot;highlighter-rouge&quot;&gt;tests/events.lua&lt;/code&gt; to test various input events.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; run test events
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can get and display all mouse input events of the user through this test example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tboox.org/static/img/ltui/mouses.png&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can override ʻon_event` on a custom view to get all event input, including all mouse input events:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;background_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;black&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;btn_code&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;installation-and-usage&quot;&gt;Installation and usage&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;`console
$ luarocks install ltui
&lt;/code&gt; `&lt;/p&gt;

&lt;p&gt;If you want to run the built-in test, you need to install &lt;a href=&quot;https://www.lua.org/&quot;&gt;lua&lt;/a&gt; or &lt;a href=&quot;http://luajit.org/&quot;&gt;luajit&lt;/a&gt; program to load and run the ltui source repository test program:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;lua&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/dialog.lua
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;lua&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/window.lua
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;lua&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/desktop.lua
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;lua&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/inputdialog.lua
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;lua&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/mconfdialog.lua
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;luajit&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/dialog.lua
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;luajit&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/window.lua
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;luajit&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/desktop.lua
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;luajit&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/inputdialog.lua
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;luajit&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/mconfdialog.lua
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;source-compilation&quot;&gt;Source compilation&lt;/h3&gt;

&lt;p&gt;Usually as long as luarocks is installed, it can be used. If you want to debug locally, you can also run the test directly after the source code is compiled. First, we need to install the cross-platform build tool: &lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;xmake&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;xmake will automatically download lua, ncurses and other related dependencies, then we can directly load related test programs through &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake run&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; run test dialog
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; run test window
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; run test desktop
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; run test inputdialog
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; run test mconfdialog
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;application&quot;&gt;Application&lt;/h3&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltui&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ltui&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demo&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;background_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;window.main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;main window&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;label&quot;&gt;Label&lt;/h3&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lab&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello ltui!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textattr_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;white&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;button&quot;&gt;Button&lt;/h3&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt; Yes &amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textattr_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;white&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;input&quot;&gt;Input&lt;/h3&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialog_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputdialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dialog.input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dialog_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;please input text:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dialog_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;no&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt; No &amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialog_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dialog_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt; Yes &amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialog_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dialog_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;centerx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;centery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;widgets&quot;&gt;Widgets&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Views&lt;/th&gt;
      &lt;th&gt;Dialogs&lt;/th&gt;
      &lt;th&gt;Other&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;view&lt;/td&gt;
      &lt;td&gt;dialog&lt;/td&gt;
      &lt;td&gt;event&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;panel&lt;/td&gt;
      &lt;td&gt;boxdialog&lt;/td&gt;
      &lt;td&gt;action&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;label&lt;/td&gt;
      &lt;td&gt;textdialog&lt;/td&gt;
      &lt;td&gt;canvas&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;button&lt;/td&gt;
      &lt;td&gt;inputdialog&lt;/td&gt;
      &lt;td&gt;curses&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;border&lt;/td&gt;
      &lt;td&gt;mconfdialog&lt;/td&gt;
      &lt;td&gt;program&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;window&lt;/td&gt;
      &lt;td&gt;choicedialog&lt;/td&gt;
      &lt;td&gt;application&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;menubar&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;point&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;menuconf&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;rect&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;textedit&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;textarea&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;statusbar&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;choicebox&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;desktop&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;menu-configuration&quot;&gt;Menu configuration&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tboox.org/static/img/ltui/menuconf.png&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;input-1&quot;&gt;Input&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tboox.org/static/img/ltui/inputdialog.png&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;textarea&quot;&gt;Textarea&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tboox.org/static/img/ltui/textarea.png&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;windows&quot;&gt;Windows&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tboox.org/static/img/ltui/windows.png&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;termux&quot;&gt;Termux&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tboox.org/static/img/ltui/termux.jpeg&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Oct 2020 00:00:00 +0800</pubDate>
        <link>https://tboox.org/2020/10/19/ltui-v2.2/</link>
        <guid isPermaLink="true">https://tboox.org/2020/10/19/ltui-v2.2/</guid>
        
        <category>ltui</category>
        
        <category>curses</category>
        
        <category>lua</category>
        
        <category>xmake</category>
        
        <category>ui</category>
        
        
        <category>ltui</category>
        
      </item>
    
      <item>
        <title>LTUI v2.2 发布, 一个基于lua的跨平台字符终端UI界面库</title>
        <description>&lt;p&gt;LTUI是一个基于lua的跨平台字符终端UI界面库。&lt;/p&gt;

&lt;p&gt;此框架源于&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;xmake&lt;/a&gt;中图形化菜单配置的需求，类似linux kernel的menuconf去配置编译参数，因此基于curses和lua实现了一整套跨平台的字符终端ui库。
而样式风格基本上完全参照的kconfig-frontends，当然用户也可以自己定制不同的ui风格。&lt;/p&gt;

&lt;p&gt;另外，LTUI是完全跨平台的，windows上的terminal终端也是完全支持的，在windows上ltui会采用pdcurses来进行窗口绘制。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/ltui&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;更新内容&quot;&gt;更新内容&lt;/h3&gt;

&lt;p&gt;新版本中，我们主要增加了对鼠标事件的支持，除了 curses/ncurses，我们还对 windows 上 pdcurses 也做了支持，这里我们非常感谢 &lt;a href=&quot;https://github.com/laelnasan&quot;&gt;@laelnasan&lt;/a&gt; 贡献。&lt;/p&gt;

&lt;p&gt;另外我们新增一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;tests/events.lua&lt;/code&gt; 测试用例，专门用来测试各种输入事件。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; run test events
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们可以通过这个测试例子，获取并显示用户的所有鼠标输入事件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tboox.org/static/img/ltui/mouses.png&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们可以在自定义的view上，重写&lt;code class=&quot;highlighter-rouge&quot;&gt;on_event&lt;/code&gt;来获取所有事件输入，包括所有的鼠标输入事件：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;background_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;black&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;btn_code&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;安装使用&quot;&gt;安装使用&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;luarocks&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; install ltui
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果要运行自带的测试，你需要先安装&lt;a href=&quot;https://www.lua.org/&quot;&gt;lua&lt;/a&gt;或者&lt;a href=&quot;http://luajit.org/&quot;&gt;luajit&lt;/a&gt;程序去加载运行ltui源码仓库中的测试程序：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;lua&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/dialog.lua
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;lua&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/window.lua
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;lua&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/desktop.lua
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;lua&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/inputdialog.lua
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;lua&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/mconfdialog.lua
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;luajit&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/dialog.lua
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;luajit&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/window.lua
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;luajit&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/desktop.lua
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;luajit&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/inputdialog.lua
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;luajit&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; tests/mconfdialog.lua
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;源码编译&quot;&gt;源码编译&lt;/h3&gt;

&lt;p&gt;通常只要luarocks安装好后就可以使用，如果想要本地调试，也可以源码编译后直接运行测试，首先我们需要先安装跨平台构建工具：&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;xmake&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;xmake会自动下载lua, ncurses等相关依赖，然后我们直接通过&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake run&lt;/code&gt;加载相关测试程序即可：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; run test dialog
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; run test window
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; run test desktop
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; run test inputdialog
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; run test mconfdialog
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;应用程序&quot;&gt;应用程序&lt;/h3&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltui&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ltui&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ltui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demo&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;background_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;window.main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;main window&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;标签&quot;&gt;标签&lt;/h3&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lab&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello ltui!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textattr_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;white&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;按钮&quot;&gt;按钮&lt;/h3&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt; Yes &amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textattr_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;white&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;输入框&quot;&gt;输入框&lt;/h3&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialog_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputdialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dialog.input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dialog_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;please input text:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dialog_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;no&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt; No &amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialog_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dialog_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt; Yes &amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialog_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dialog_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;centerx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;centery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;组件&quot;&gt;组件&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;视图&lt;/th&gt;
      &lt;th&gt;对话框&lt;/th&gt;
      &lt;th&gt;其他&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;view&lt;/td&gt;
      &lt;td&gt;dialog&lt;/td&gt;
      &lt;td&gt;event&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;panel&lt;/td&gt;
      &lt;td&gt;boxdialog&lt;/td&gt;
      &lt;td&gt;action&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;label&lt;/td&gt;
      &lt;td&gt;textdialog&lt;/td&gt;
      &lt;td&gt;canvas&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;button&lt;/td&gt;
      &lt;td&gt;inputdialog&lt;/td&gt;
      &lt;td&gt;curses&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;border&lt;/td&gt;
      &lt;td&gt;mconfdialog&lt;/td&gt;
      &lt;td&gt;program&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;window&lt;/td&gt;
      &lt;td&gt;choicedialog&lt;/td&gt;
      &lt;td&gt;application&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;menubar&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;point&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;menuconf&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;rect&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;textedit&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;object&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;textarea&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;statusbar&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;choicebox&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;desktop&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;菜单配置&quot;&gt;菜单配置&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tboox.org/static/img/ltui/menuconf.png&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;输入框-1&quot;&gt;输入框&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tboox.org/static/img/ltui/inputdialog.png&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;文本区域&quot;&gt;文本区域&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tboox.org/static/img/ltui/textarea.png&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;windows&quot;&gt;Windows&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tboox.org/static/img/ltui/windows.png&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;termux&quot;&gt;Termux&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tboox.org/static/img/ltui/termux.jpeg&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Oct 2020 00:00:00 +0800</pubDate>
        <link>https://tboox.org/cn/2020/10/19/ltui-v2.2/</link>
        <guid isPermaLink="true">https://tboox.org/cn/2020/10/19/ltui-v2.2/</guid>
        
        <category>ltui</category>
        
        <category>curses</category>
        
        <category>lua</category>
        
        <category>xmake</category>
        
        <category>ui</category>
        
        
        <category>ltui</category>
        
      </item>
    
      <item>
        <title>xmake v2.3.8 released, Add Intel C++/Fortran Compiler Support</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;xmake&lt;/a&gt; is a lightweight cross-platform build tool based on Lua. It uses xmake.lua to maintain project builds. Compared with makefile/CMakeLists.txt, the configuration syntax is more Concise and intuitive, very friendly to novices, can get started quickly in a short time, allowing users to focus more on the actual project development.&lt;/p&gt;

&lt;p&gt;In this new version, we have made full platform support for the Intel series of C++ and Fortran compilers, and improved the Wasm tool chain support added in the previous version, and also supported the Qt SDK for Wasm.&lt;/p&gt;

&lt;p&gt;In addition, we have also upgraded luajit to the latest v2.1 version. In terms of cross-platform, xmake has also made great improvements and added support for mips64 architecture.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Project source code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/&quot;&gt;Official Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;new-feature-introduction&quot;&gt;New feature introduction&lt;/h2&gt;

&lt;h3 id=&quot;add-intel-c-compiler-support&quot;&gt;Add Intel C++ Compiler support&lt;/h3&gt;

&lt;p&gt;On this version, we have made full platform support for the Intel series of C++ compilers, including icl on windows and icc/icpc under linux/macOS.&lt;/p&gt;

&lt;p&gt;To enable the Intel C++ compiler, we only need to switch to the corresponding toolchain through the &lt;code class=&quot;highlighter-rouge&quot;&gt;--toolchain=icc&lt;/code&gt; parameter on the system where the Intel compiler is installed.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --toolchain&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;icc
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;add-intel-fortran-compiler-support&quot;&gt;Add Intel Fortran Compiler support&lt;/h3&gt;

&lt;p&gt;In the previous version, xmake only supported the gfortran compiler. In this version, we also support the Intel Fortran compiler, which is ifort. We only need to switch to the corresponding ifort tool chain to use it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --toolchain&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ifort
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;add-wasm-platform-and-qtwasm-support&quot;&gt;Add Wasm platform and Qt/Wasm support&lt;/h3&gt;

&lt;p&gt;In the last version, we added the &lt;code class=&quot;highlighter-rouge&quot;&gt;--toolchain=emcc&lt;/code&gt; toolchain to support the compilation of wasm programs, but just specifying the toolchain does not adjust the extension of the target program well, for example, for &lt;code class=&quot;highlighter-rouge&quot;&gt;*.js&lt;/code&gt; and The file of &lt;code class=&quot;highlighter-rouge&quot;&gt;*.wasm&lt;/code&gt; is generated.&lt;/p&gt;

&lt;p&gt;In the new version, we continue to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f -p wasm&lt;/code&gt; platform, the built-in emcc tool chain is enabled, and the surrounding configuration has been improved again based on it.&lt;/p&gt;

&lt;p&gt;As long as you switch to the wasm platform, xmake will generate &lt;code class=&quot;highlighter-rouge&quot;&gt;*.js&lt;/code&gt; and corresponding &lt;code class=&quot;highlighter-rouge&quot;&gt;*.wasm&lt;/code&gt; and other target files by default, and additionally generate &lt;code class=&quot;highlighter-rouge&quot;&gt;*.html&lt;/code&gt; pages that can load js to run the wasm program.&lt;/p&gt;

&lt;p&gt;In addition, we also support Qt SDK for Wasm, for example, we create a Qt QuickApp project.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake create -t qt.quickapp_static quickapp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here, we noticed that what we created is a Qt project that requires a static link. Because of the wasm version of the Qt library, we need to force a static link to the program to use it normally.&lt;/p&gt;

&lt;p&gt;The content of the generated project file xmake.lua is roughly as follows:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qt_add_static_plugins.lua&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qt.quickapp_static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_headerfiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/qml.qrc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_frameworks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QtQuickControls2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;QtQuickTemplates2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qt_add_static_plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QtQuick2Plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linkdirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;qml/QtQuick.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;qtquick2plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qt_add_static_plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QtQuick2WindowPlugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linkdirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;qml/QtQuick/Window.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;windowplugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qt_add_static_plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QtQuickControls2Plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linkdirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;qml/QtQuick/Controls.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;qtquickcontrols2plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qt_add_static_plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QtQuickTemplates2Plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linkdirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;qml/QtQuick/Templates.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;qtquicktemplates2plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the above configuration, in addition to enabling the &lt;code class=&quot;highlighter-rouge&quot;&gt;qt.quickapp_static&lt;/code&gt; compilation rules, we also configure some necessary Qt plugins through &lt;code class=&quot;highlighter-rouge&quot;&gt;qt_add_static_plugins&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we only need to switch to the wasm platform and make sure that the Qt SDK is set to complete the compilation.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p wasm &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--qt&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/Qt]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After the compilation is completed, xmake will generate demo.html and the corresponding demo.js/demo.wasm program in the build directory. We can open the demo.html page to run the Qt program we compiled. The display effect is as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-qt-wasm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For a more detailed description of Qt/Wasm, see: &lt;a href=&quot;https://github.com/xmake-io/xmake/issues/956&quot;&gt;Issue #956&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;add-mathfloat-point-compilation-optimization-settings&quot;&gt;Add Math/Float-point compilation optimization settings&lt;/h3&gt;

&lt;p&gt;We have added a new &lt;code class=&quot;highlighter-rouge&quot;&gt;set_fpmodels()&lt;/code&gt; setting interface, which is used to set the floating-point compilation mode and the compilation abstraction settings for the optimization of mathematical calculations. It provides several commonly used levels such as fast, strict, except, precise, and some Set at the same time, some conflicts, the last setting takes effect.&lt;/p&gt;

&lt;p&gt;For the description of these levels, you can refer to the Microsoft document: &lt;a href=&quot;https://docs.microsoft.com/en-us/cpp/build/reference/fp-specify-floating-point-behavior ?view=vs-2019&quot;&gt;Specify floating-point behavior&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, for other compilers such as gcc/icc, xmake will map to different compilation flags.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_fpmodels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fast&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_fpmodels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;strict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_fpmodels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fast&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;except&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_fpmodels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;precise&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For details on this, see: &lt;a href=&quot;https://github.com/xmake-io/xmake/issues/981&quot;&gt;Issue #981&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;add-openmp-support&quot;&gt;Add OpenMP Support&lt;/h3&gt;

&lt;p&gt;In order to enable the openmp feature more abstractly and simply, we can set it through the newly added &lt;code class=&quot;highlighter-rouge&quot;&gt;c.openmp&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;c++.openmp&lt;/code&gt; rules. In addition, we need additional libomp libraries on linux and macOS, so we can pass ʻAdd_requires(“libomp”)` for quick reference and integration.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;libomp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;loop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c++.openmp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;libomp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If it is c code, you need to enable ʻadd_rules(“c.openmp”)`. If it is c/c++ mixed compilation, then these two rules must be set.&lt;/p&gt;

&lt;h3 id=&quot;add-c11c17-support&quot;&gt;Add c11/c17 support&lt;/h3&gt;

&lt;p&gt;In the new version, xmake has also made improvements to &lt;code class=&quot;highlighter-rouge&quot;&gt;set_languages&lt;/code&gt;, adding new c11/c17 settings, and at the same time adapting and adapting &lt;code class=&quot;highlighter-rouge&quot;&gt;/std:c11&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/std:c17&lt;/code&gt; provided by the latest version of msvc. stand by.&lt;/p&gt;

&lt;p&gt;We only need simple settings:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_languages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can enable the c17 standard to compile, even if the lower version of msvc and other compilers do not support it, xmake will automatically ignore the settings.&lt;/p&gt;

&lt;h3 id=&quot;better-mingw-support&quot;&gt;Better Mingw support&lt;/h3&gt;

&lt;p&gt;Regarding this improvement, several aspects are involved. The first is the improvement of the automatic detection of the Mingw SDK root directory under Windows. In most cases, we do not need to configure the &lt;code class=&quot;highlighter-rouge&quot;&gt;--mingw=&lt;/code&gt; parameter to specify the path explicitly, and it can also It was automatically detected.&lt;/p&gt;

&lt;p&gt;For details on this, see: &lt;a href=&quot;https://github.com/xmake-io/xmake/issues/977&quot;&gt;Issue #977&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, in addition to Msys2/Mingw as well as macOS, linux/Mingw, we additionally support &lt;a href=&quot;https://github.com/mstorsjo/llvm-mingw&quot;&gt;llvm-mingw&lt;/a&gt; this SDK in the new version, so that we can use mingw to compile the program of arm/arm64 architecture.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p mingw -a arm64
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In addition, in the automatic compilation and integration of remote dependency packages, there are now third-party libraries with cmakelists. Even on the mingw platform, xmake can be automatically compiled and integrated for direct use, which is very fast and convenient.&lt;/p&gt;

&lt;p&gt;Recently, in the &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt; official C/C++ package repository, we have also added a lot of new libraries that support the mingw platform, which can be used directly .&lt;/p&gt;

&lt;h3 id=&quot;better-cross-platform-operation&quot;&gt;Better cross-platform operation&lt;/h3&gt;

&lt;p&gt;We have added support for mips64-based Linux system operation, and improved the stability of xmake under arm/arm64. By incorporating the latest luajit v2.1, we have solved many problems left by luajit, such as the bad of lightuserdata under arm64. Pointer and other issues.&lt;/p&gt;

&lt;h3 id=&quot;add-macos-sierra-for-arm64-support&quot;&gt;Add macOS Sierra for arm64 support&lt;/h3&gt;

&lt;p&gt;xmake has also adapted the latest Xcode-beta, and added macOs for arm64 target program compilation support, just switch to the arm64 architecture compilation.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -a arm64 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--xcode&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Applications/Xcode-beta.app/]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course, the premise is to run under macOS and use the latest Xcode-beta version that supports the Developer Transition Kit (DTK).&lt;/p&gt;

&lt;h3 id=&quot;add-more-cc-libraries-for-the-official-repository&quot;&gt;Add more C/C++ libraries for the official repository&lt;/h3&gt;

&lt;p&gt;In the official C/C++ repository of xmake &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt;, we have recently added dozens of commonly used C/C++ libraries, and also The libraries of the libx11 series are all included.&lt;/p&gt;

&lt;p&gt;Although the warehouse package maintenance workload is huge, the current development trend is also becoming more and more active. We have received more and more users’ contributions and improved maintenance to the warehouse package.&lt;/p&gt;

&lt;p&gt;And, now our official warehouse can be quickly integrated: linux, macOS, windows, mingw, bsd, msys, iphoneos, android and other eight common platform libraries, to achieve true cross-platform C/C++ remote dependency library integration and use support.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-packages.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Currently we have included a list of some packages and supporting platforms, you can view from here: &lt;a href=&quot;https://github.com/xmake-io/xmake-repo/blob/master/PKGLIST.md&quot;&gt;PKGLIST.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have been working hard to solve the problems of messy C/C++ library ecology and cumbersome integration and use, and provide quick and consistent automatic integration and compilation solutions. xmake not only supports the integration of third-party official warehouse packages such as vcpkg/conan/clib/homebrew, but also We are working hard to improve our self-built official warehouse to achieve a better integrated experience.&lt;/p&gt;

&lt;p&gt;for example:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tbox &amp;gt;1.6.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;libuv master&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vcpkg::ffmpeg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;brew::pcre2/libpcre2-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;conan::openssl/1.1.1g&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;openssl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tbox&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;libuv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vcpkg::ffmpeg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;brew::pcre2/libpcre2-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;openssl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Packages with namespaces such as &lt;code class=&quot;highlighter-rouge&quot;&gt;vcpkg::&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;brew::&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;conan::&lt;/code&gt; will automatically switch to the corresponding third-party package warehouse to download and integrate, and the default &lt;code class=&quot;highlighter-rouge&quot;&gt;tbox &amp;gt;1.6.1&lt;/code&gt; etc. Library, the package provided in the official xmake-repo repository will be used by default.&lt;/p&gt;

&lt;p&gt;The usage and integration methods are exactly the same, xmake will automatically download, compile, integrate and link.&lt;/p&gt;

&lt;p&gt;For more detailed instructions on the dependency integration of remote packages, we can look at the relevant documentation: &lt;a href=&quot;https://xmake.io/#/package/remote_package&quot;&gt;Remote dependency library integration and use&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the same time, we also welcome more people to participate to help improve the construction of the C/C++ library ecology, and provide a concise and consistent library experience. I believe that C/C++ package management and library ecology are not worse than Rust/Go.&lt;/p&gt;

&lt;h3 id=&quot;more-release-version-installation-support&quot;&gt;More release version installation support&lt;/h3&gt;

&lt;p&gt;In the new version, we submitted xmake to the Ubuntu PPA source, so in addition to the existing script installation method, we can also quickly install xmake through apt.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo add-apt-repository ppa:xmake-io/xmake
sudo apt update
sudo apt install xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At the same time, we also submitted the package to the Copr package management repository, so that we can also quickly install xmake through dnf in Fedora, RHEL, OpenSUSE, CentOS and other distributions.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo dnf copr &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;waruqi/xmake
sudo dnf install xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/955&quot;&gt;#955&lt;/a&gt;: Add zig project templates&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/956&quot;&gt;#956&lt;/a&gt;: Add wasm platform and support Qt/Wasm SDK&lt;/li&gt;
  &lt;li&gt;Upgrade luajit vm and support for runing on mips64 device&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/972&quot;&gt;#972&lt;/a&gt;: Add &lt;code class=&quot;highlighter-rouge&quot;&gt;depend.on_changed()&lt;/code&gt; api to simplify adding dependent files&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/981&quot;&gt;#981&lt;/a&gt;: Add &lt;code class=&quot;highlighter-rouge&quot;&gt;set_fpmodels()&lt;/code&gt; for math optimization mode&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/980&quot;&gt;#980&lt;/a&gt;: Support Intel C/C++ and Fortran Compiler&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/986&quot;&gt;#986&lt;/a&gt;: Support for &lt;code class=&quot;highlighter-rouge&quot;&gt;c11&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;c17&lt;/code&gt; for MSVC Version 16.8 and Above&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/979&quot;&gt;#979&lt;/a&gt;: Add Abstraction for OpenMP. &lt;code class=&quot;highlighter-rouge&quot;&gt;add_rules(&quot;c++.openmp&quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;change&quot;&gt;Change&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/958&quot;&gt;#958&lt;/a&gt;: Improve mingw platform to support llvm-mingw toolchain&lt;/li&gt;
  &lt;li&gt;Improve &lt;code class=&quot;highlighter-rouge&quot;&gt;add_requires(&quot;zlib~xxx&quot;)&lt;/code&gt; to support for installing multi-packages at same time&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/977&quot;&gt;#977&lt;/a&gt;: Improve find_mingw for windows&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/978&quot;&gt;#978&lt;/a&gt;: Improve toolchain flags order&lt;/li&gt;
  &lt;li&gt;Improve Xcode toolchain to support for macOS/arm64&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/951&quot;&gt;#951&lt;/a&gt;: Fix emcc support for windows&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/992&quot;&gt;#992&lt;/a&gt;: Fix filelock bug&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 17 Oct 2020 00:00:00 +0800</pubDate>
        <link>https://tboox.org/2020/10/17/xmake-update-v2.3.8/</link>
        <guid isPermaLink="true">https://tboox.org/2020/10/17/xmake-update-v2.3.8/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>toolchains</category>
        
        <category>wasm</category>
        
        <category>emscripten</category>
        
        <category>qt</category>
        
        <category>intel</category>
        
        <category>icc</category>
        
        <category>fortran</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.3.8 发布, 新增 Intel C++/Fortran 编译器支持</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;xmake&lt;/a&gt; 是一个基于 Lua 的轻量级跨平台构建工具，使用 xmake.lua 维护项目构建，相比 makefile/CMakeLists.txt，配置语法更加简洁直观，对新手非常友好，短时间内就能快速入门，能够让用户把更多的精力集中在实际的项目开发上。&lt;/p&gt;

&lt;p&gt;在这个新版本中，我们对 Intel 系列的 C++ 和 Fortran 编译器做了全平台支持，并且改进了上个版本新加的 Wasm 工具链支持，同时对 Qt SDK for Wasm 也进行了支持。&lt;/p&gt;

&lt;p&gt;另外，我们还将 luajit 升级到最新的 v2.1 版本，在跨平台方面，xmake 也做了很大的完善，增加了 mips64 架构的运行支持。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/about/course&quot;&gt;入门课程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;入门课程&quot;&gt;入门课程&lt;/h2&gt;

&lt;p&gt;近期，我们也上线了官方的 xmake 入门课程，&lt;a href=&quot;ttps://xmake.io/#/zh-cn/about/course&quot;&gt;Xmake 带你轻松构建 C/C++ 项目&lt;/a&gt; 以边学边做实验的方式快速学习 xmake 的使用。&lt;/p&gt;

&lt;h2 id=&quot;新特性介绍&quot;&gt;新特性介绍&lt;/h2&gt;

&lt;h3 id=&quot;intel-c-编译器支持&quot;&gt;Intel C++ 编译器支持&lt;/h3&gt;

&lt;p&gt;这个版本上，我们对 Intel 系列的 C++ 编译器做了全平台支持，包括 windows上的 icl 以及 linux/macOS 下的 icc/icpc。&lt;/p&gt;

&lt;p&gt;要想启用 Intel C++ 编译器，我们只需要在安装了的 Intel 编译器的系统上，通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;--toolchain=icc&lt;/code&gt; 参数切换到对应的工具链即可。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --toolchain&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;icc
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;intel-fortran-编译器支持&quot;&gt;Intel Fortran 编译器支持&lt;/h3&gt;

&lt;p&gt;之前的版本，xmake 仅仅支持 gfortran 编译器，而这个版本，我们也支持了 Intel Fortran 编译器，也就是 ifort，我们也只需要切换到对应的 ifort 工具链即可使用。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --toolchain&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ifort
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;wasm-平台和-qtwasm-支持&quot;&gt;Wasm 平台和 Qt/Wasm 支持&lt;/h3&gt;

&lt;p&gt;上个版本，我们新增了 &lt;code class=&quot;highlighter-rouge&quot;&gt;--toolchain=emcc&lt;/code&gt; 工具链来支持 wasm 程序的编译，但是仅仅指定工具链，并不能很好的调整目标程序的扩展名，例如对 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.js&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.wasm&lt;/code&gt; 的文件生成。&lt;/p&gt;

&lt;p&gt;而新版本，我们继续新增了 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f -p wasm&lt;/code&gt; 平台，内置启用 emcc 工具链，并且再次基础上对周边的配置做了更好的完善。&lt;/p&gt;

&lt;p&gt;只要切换到 wasm 平台，xmake 会默认生成 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.js&lt;/code&gt; 以及对应 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.wasm&lt;/code&gt; 等目标文件，还会额外生成可以加载 js 来运行 wasm 程序的 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.html&lt;/code&gt; 页面。&lt;/p&gt;

&lt;p&gt;另外，我们还对 Qt SDK for Wasm 也做了支持，比如我们创建一个 Qt QuickApp 工程。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake create -t qt.quickapp_static quickapp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里，我们注意到，我们创建的是需要静态link的Qt工程，因为 wasm 版本的 Qt 库，我们需要强制静态链接到程序才能正常使用。&lt;/p&gt;

&lt;p&gt;生成的工程文件 xmake.lua 内容大概如下：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qt_add_static_plugins.lua&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qt.quickapp_static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_headerfiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/qml.qrc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_frameworks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QtQuickControls2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;QtQuickTemplates2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qt_add_static_plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QtQuick2Plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linkdirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;qml/QtQuick.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;qtquick2plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qt_add_static_plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QtQuick2WindowPlugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linkdirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;qml/QtQuick/Window.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;windowplugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qt_add_static_plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QtQuickControls2Plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linkdirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;qml/QtQuick/Controls.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;qtquickcontrols2plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qt_add_static_plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QtQuickTemplates2Plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linkdirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;qml/QtQuick/Templates.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;qtquicktemplates2plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的配置中，我们除了启用 &lt;code class=&quot;highlighter-rouge&quot;&gt;qt.quickapp_static&lt;/code&gt; 编译规则，还通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;qt_add_static_plugins&lt;/code&gt; 配置了一些必须的 Qt 插件。&lt;/p&gt;

&lt;p&gt;接下来，我们只需要切换到 wasm 平台，并确保 Qt SDK 已设置，即可完成编译。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p wasm &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--qt&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/Qt]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;完成编译后，xmake 会在 build 目录下生成 demo.html 以及对应的 demo.js/demo.wasm 程序，我们打开 demo.html 页面即可运行我们编译的 Qt 程序，显示效果如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-qt-wasm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关于 Qt/Wasm 更加详细的说明，见：&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/956&quot;&gt;Issue #956&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;新增-mathfloat-point-编译优化设置&quot;&gt;新增 Math/Float-point 编译优化设置&lt;/h3&gt;

&lt;p&gt;我们新增了一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;set_fpmodels()&lt;/code&gt; 设置接口，用于设置浮点的编译模式，对数学计算相关优化的编译抽象设置，提供：fast, strict, except, precise 等几种常用的级别，有些可同时设置，有些是有冲突的，最后设置的生效。&lt;/p&gt;

&lt;p&gt;关于这些级别的说明，可以参考下微软的文档：&lt;a href=&quot;https://docs.microsoft.com/en-us/cpp/build/reference/fp-specify-floating-point-behavior?view=vs-2019&quot;&gt;Specify floating-point behavior&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当然，对应gcc/icc等其他编译器，xmake 会映射到不同的编译flags。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_fpmodels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fast&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_fpmodels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;strict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_fpmodels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fast&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;except&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_fpmodels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;precise&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- default&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;关于这块详情见：&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/981&quot;&gt;Issue #981&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;openmp-支持&quot;&gt;OpenMP 支持&lt;/h3&gt;

&lt;p&gt;为了更加抽象简单的启用 openmp 特性，我们可以通过新增的 &lt;code class=&quot;highlighter-rouge&quot;&gt;c.openmp&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;c++.openmp&lt;/code&gt; 这两个规则来设置，另外 linux、macOS 上我们需要额外的 libomp 库才行，因此可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;add_requires(&quot;libomp&quot;)&lt;/code&gt; 来快速引用和集成。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;libomp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;loop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c++.openmp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;libomp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果是c代码，需要启用 &lt;code class=&quot;highlighter-rouge&quot;&gt;add_rules(&quot;c.openmp&quot;)&lt;/code&gt;，如果是 c/c++ 混合编译，那么这两个规则都要设置。&lt;/p&gt;

&lt;h3 id=&quot;c11c17-的支持&quot;&gt;c11/c17 的支持&lt;/h3&gt;

&lt;p&gt;新版本中，xmake 对 &lt;code class=&quot;highlighter-rouge&quot;&gt;set_languages&lt;/code&gt; 也做了改进，增加了新的 c11/c17 设置项，同时对最新版本 msvc 提供的 &lt;code class=&quot;highlighter-rouge&quot;&gt;/std:c11&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;/std:c17&lt;/code&gt; 也做了适配和支持。&lt;/p&gt;

&lt;p&gt;我们只需要简单的设置：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_languages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;即可启用 c17 标准来编译，即使低版本 msvc 等编译器不支持，xmake 也会自动忽略设置。&lt;/p&gt;

&lt;h3 id=&quot;更好的-mingw-支持&quot;&gt;更好的 Mingw 支持&lt;/h3&gt;

&lt;p&gt;关于这块的改进，涉及几个方面，首先是 Windows 下 Mingw SDK 根目录的自动探测的改进，大部分情况下，我们都不需要额外配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;--mingw=&lt;/code&gt; 参数显式指定路径，也能够自动检测到了。&lt;/p&gt;

&lt;p&gt;关于这块详情，见：&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/977&quot;&gt;Issue #977&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另外，除了 Msys2/Mingw 还有 macOS,linux/Mingw，我们在新版本中还额外支持了 &lt;a href=&quot;https://github.com/mstorsjo/llvm-mingw&quot;&gt;llvm-mingw&lt;/a&gt; 这个 SDK，使得我们可以使用 mingw 来编译 arm/arm64 架构的程序。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p mingw -a arm64
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;另外，在远程依赖包的自动编译集成上，现在带有 cmakelists 的第三方库，即使是 mingw 平台，xmake 也能自动编译集成进来直接使用，非常的快速方便。&lt;/p&gt;

&lt;p&gt;而最近 &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt; 官方 C/C++ 包仓库中，我们也新增收入了不少支持 mingw 平台的新库，可直接使用。&lt;/p&gt;

&lt;h3 id=&quot;更好的跨平台运行&quot;&gt;更好的跨平台运行&lt;/h3&gt;

&lt;p&gt;我们新增了对 mips64 架构的 linux 系统运行支持，另外改进了 arm/arm64 下 xmake 的运行稳定性，通过合入最新的 luajit v2.1 ，解决了很多 luajit 遗留的问题，比如 arm64 下 lightuserdata 的 bad pointer 等问题。&lt;/p&gt;

&lt;h3 id=&quot;新增-macos-sierra-for-arm64-支持&quot;&gt;新增 macOS Sierra for arm64 支持&lt;/h3&gt;

&lt;p&gt;xmake 还对最新的 Xcode-beta 进行了适配，新增了 macOs for arm64 的目标程序编译支持，只需要切到 arm64 架构编译即可。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -a arm64 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--xcode&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Applications/Xcode-beta.app/]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当然，前提是在 macOS 下运行，并且使用最新支持 Developer Transition Kit (DTK) 的 Xcode-beta 版本才行。&lt;/p&gt;

&lt;h3 id=&quot;官方仓库收录更多的-cc-库&quot;&gt;官方仓库收录更多的 C/C++ 库&lt;/h3&gt;

&lt;p&gt;在 xmake 的官方 C/C++ 仓库 &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt; 中，我们最近新增了几十个常用的 C/C++ 库，并且还对 libx11 系列的库都全部进行了收录。&lt;/p&gt;

&lt;p&gt;虽然，仓库的包维护工作量巨大，但是目前的发展趋势也日趋活跃，我们收到了越来越多的用户对仓库包的贡献和改进维护。&lt;/p&gt;

&lt;p&gt;并且，现在我们的官方仓库已经可以快速集成：linux, macOS, windows, mingw, bsd, msys, iphoneos, android 等八大常用平台的库，实现真正的跨平台 C/C++ 远程依赖库集成和使用支持。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-packages.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;目前我们收录的一些包列表和支持平台，可以从这里查看：&lt;a href=&quot;https://github.com/xmake-io/xmake-repo/blob/master/PKGLIST.md&quot;&gt;PKGLIST.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我们一直在努力解决 C/C++ 库生态的杂乱、集成使用繁琐等问题，提供快速一致的自动集成和编译方案，xmake 不仅支持 vcpkg/conan/clib/homebrew 等第三方官方仓库包的集成，并且也在努力完善自建的官方仓库，实现更好的集成体验。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tbox &amp;gt;1.6.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;libuv master&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vcpkg::ffmpeg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;brew::pcre2/libpcre2-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;conan::openssl/1.1.1g&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;openssl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tbox&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;libuv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vcpkg::ffmpeg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;brew::pcre2/libpcre2-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;openssl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;带有 &lt;code class=&quot;highlighter-rouge&quot;&gt;vcpkg::&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;brew::&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;conan::&lt;/code&gt; 等命名空间的包，会自动切换到对应的第三方包仓库去下载集成，而默认的 &lt;code class=&quot;highlighter-rouge&quot;&gt;tbox &amp;gt;1.6.1&lt;/code&gt; 等库，则会默认使用 xmake-repo 官方仓库中提供的包。&lt;/p&gt;

&lt;p&gt;使用和集成方式完全一致，xmake 会自动下载、编译、集成和链接。&lt;/p&gt;

&lt;p&gt;关于远程包的依赖集成的更多详细说明，我们可以看下相关的文档说明：&lt;a href=&quot;https://xmake.io/#/zh-cn/package/remote_package&quot;&gt;远程依赖库集成和使用&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;同时，我们也欢迎更多的人参与进来，帮忙一起改善 C/C++ 的库生态的建设，提供简洁一致的库使用体验，我相信 C/C++ 包管理和库生态并不比 Rust/Go 差。&lt;/p&gt;

&lt;h3 id=&quot;更多的发行版安装支持&quot;&gt;更多的发行版安装支持&lt;/h3&gt;

&lt;p&gt;在新版本中，我们将 xmake 提交了 Ubuntu PPA 源，因此除了现有的脚本安装方式外，我们也可以通过 apt 去快速安装 xmake。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo add-apt-repository ppa:xmake-io/xmake
sudo apt update
sudo apt install xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;同时，我们也将包提交到了 Copr 包管理仓库，使得我们也可以在 Fedora, RHEL，OpenSUSE，CentOS 等发行版中，通过 dnf 来快速安装 xmake。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo dnf copr &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;waruqi/xmake
sudo dnf install xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;更新内容&quot;&gt;更新内容&lt;/h2&gt;

&lt;h3 id=&quot;新特性&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/955&quot;&gt;#955&lt;/a&gt;: 添加 Zig 空工程模板&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/956&quot;&gt;#956&lt;/a&gt;: 添加 Wasm 编译平台，并且支持 Qt/Wasm SDK&lt;/li&gt;
  &lt;li&gt;升级luajit到v2.1最新分支版本，并且支持mips64上运行xmake&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/972&quot;&gt;#972&lt;/a&gt;: 添加&lt;code class=&quot;highlighter-rouge&quot;&gt;depend.on_changed()&lt;/code&gt;去简化依赖文件的处理&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/981&quot;&gt;#981&lt;/a&gt;: 添加&lt;code class=&quot;highlighter-rouge&quot;&gt;set_fpmodels()&lt;/code&gt;去抽象化设置math/float-point编译优化模式&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/980&quot;&gt;#980&lt;/a&gt;: 添加对 Intel C/C++ 和 Fortran 编译器的全平台支持&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/986&quot;&gt;#986&lt;/a&gt;: 对16.8以上msvc编译器增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;c11&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;c17&lt;/code&gt; 支持&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/979&quot;&gt;#979&lt;/a&gt;: 添加对OpenMP的跨平台抽象配置。&lt;code class=&quot;highlighter-rouge&quot;&gt;add_rules(&quot;c++.openmp&quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;改进&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/958&quot;&gt;#958&lt;/a&gt;: 改进mingw平台，增加对 llvm-mingw 工具链的支持，以及 arm64/arm 架构的支持&lt;/li&gt;
  &lt;li&gt;增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;add_requires(&quot;zlib~xxx&quot;)&lt;/code&gt; 模式使得能够支持同时安装带有多种配置的同一个包，作为独立包存在&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/977&quot;&gt;#977&lt;/a&gt;: 改进 find_mingw 在 windows 上的探测&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/978&quot;&gt;#978&lt;/a&gt;: 改进工具链的flags顺序&lt;/li&gt;
  &lt;li&gt;改进XCode工具链，支持macOS/arm64&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs修复&quot;&gt;Bugs修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/951&quot;&gt;#951&lt;/a&gt;: 修复 emcc (WebAssembly) 工具链在windows上的支持&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/992&quot;&gt;#992&lt;/a&gt;: 修复文件锁偶尔打开失败问题&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 17 Oct 2020 00:00:00 +0800</pubDate>
        <link>https://tboox.org/cn/2020/10/17/xmake-update-v2.3.8/</link>
        <guid isPermaLink="true">https://tboox.org/cn/2020/10/17/xmake-update-v2.3.8/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>toolchains</category>
        
        <category>wasm</category>
        
        <category>emscripten</category>
        
        <category>qt</category>
        
        <category>intel</category>
        
        <category>icc</category>
        
        <category>fortran</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake 官方入门课程上线: Xmake 带你轻松构建 C/C++ 项目</title>
        <description>&lt;h2 id=&quot;实验楼课程&quot;&gt;实验楼课程&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.lanqiao.cn/courses/2764&quot;&gt;Xmake 带你轻松构建 C/C++ 项目&lt;/a&gt; 是我们在实验楼上推出的一门 xmake 入门和进阶课程（收费），以边学边做实验的方式快速学习 xmake 的使用。&lt;/p&gt;

&lt;p&gt;通过此处优惠码购买可享 9 折优惠：&lt;code class=&quot;highlighter-rouge&quot;&gt;NYFbmf3X&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;xmake-介绍&quot;&gt;xmake 介绍&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://xmake.io&quot;&gt;Xmake&lt;/a&gt; 是一个基于 Lua 的轻量级跨平台 C/C++ 构建工具，使用 xmake.lua 维护项目构建，相比 makefile/CMakeLists.txt 而言，配置语法更加简洁直观，对新手非常友好，短时间内就能快速入门 C/C++ 项目的编译开发，提供一站式跨平台编译、运行、调试、打包、安装等操作，能够让大家把更多的精力集中在实际的项目开发上。&lt;/p&gt;

&lt;p&gt;虽然，简单易用是 xmake 的一大特色，但 xmake 的功能也是非常强大的，既能够像 make/ninja 那样直接编译项目，也可以像 cmake/meson 那样生成工程文件，还有内置的包管理系统来帮助大家解决 C/C++ 依赖库的集成使用问题。&lt;/p&gt;

&lt;h3 id=&quot;课程介绍&quot;&gt;课程介绍&lt;/h3&gt;

&lt;p&gt;本课程以循序渐进的方式，带你入门和进阶 xmake，从最基础的编译配置，到复杂项目的定制化组织和维护，在课程最后几节，我们还通过实战的方式，一步步带你体验第三方 C/C++ 项目的移植编译，以及 vscode/xmake 集成环境的可视化编译操作流程。最后一节实验中，我们还会讲解如何使用 xmake 和 vscode 去编译开发基于 Qt 的应用程序。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.lanqiao.cn/courses/2764&quot; target=&quot;_blank&quot;&gt;
&lt;img src=&quot;https://dn-simplecloud.shiyanlou.com/courses/uid214893-20200916-1600218561642&quot; alt=&quot;afdian&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;你将学到&quot;&gt;你将学到&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;C/C++ 程序的编译运行和调试&lt;/td&gt;
      &lt;td&gt;xmake 基础命令使用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C/C++ 依赖库集成和使用&lt;/td&gt;
      &lt;td&gt;大型工程结构的维护&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;xmake 复杂脚本和规则的编写&lt;/td&gt;
      &lt;td&gt;如何实现跨平台编译&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;xmake 插件开发&lt;/td&gt;
      &lt;td&gt;VS Code/xmake 集成环境的使用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;xmake 的基础语法&lt;/td&gt;
      &lt;td&gt;C/C++ 项目基础编译配置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;多个目标程序的依赖编译&lt;/td&gt;
      &lt;td&gt;预编译头文件的设置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cmake/makefile 工程文件的生成&lt;/td&gt;
      &lt;td&gt;xmake 脚本运行插件的使用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C/C++ 代码的移植编译&lt;/td&gt;
      &lt;td&gt;Qt 项目程序的编译开发&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;课程链接&quot;&gt;课程链接&lt;/h3&gt;

&lt;p&gt;链接地址：&lt;a href=&quot;https://www.lanqiao.cn/courses/2764&quot;&gt;https://www.lanqiao.cn/courses/2764&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我们也可以通过扫描下方二维码进入课程：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xmake.io/assets/img/xmake_course.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Oct 2020 00:00:00 +0800</pubDate>
        <link>https://tboox.org/cn/2020/10/09/xmake-course-build-c-projects/</link>
        <guid isPermaLink="true">https://tboox.org/cn/2020/10/09/xmake-course-build-c-projects/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>course</category>
        
        <category>qt</category>
        
        <category>实验楼</category>
        
        <category>入门课程</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.3.7 released, Add tinyc and emscripten toolchains</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;xmake&lt;/a&gt; is a lightweight cross-platform build tool based on Lua. It uses xmake.lua to maintain project builds. Compared with makefile/CMakeLists.txt, the configuration syntax is more Concise and intuitive, very friendly to novices, can get started quickly in a short time, allowing users to focus more on the actual project development.&lt;/p&gt;

&lt;p&gt;With the continuous iterative development of xmake in recent years, xmake has harvested 2.9K stars, 300+ forks, 30+ contributors on Github, and handled 900+ issues, 5400+ Commits, and active users are also growing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tboox.org/static/img/xmake/star-history.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, the xmake v2.3.7 version is released. In the new version, we mainly improved the stability and compatibility of xmake itself. Through two months of continuous iteration, we have fixed various user feedback problems, user experience and The stability has been greatly improved.&lt;/p&gt;

&lt;p&gt;In addition, we also added support for TinyC and Emscripten (WebAssembly) compilation tool chains in this version.&lt;/p&gt;

&lt;p&gt;Especially for the windows platform, we provide an additional xmake-tinyc installation package, which has a built-in tinyc compiler, so that users can completely escape the bloated vs environment, one-click installation, out of the box, only 5M installation package is needed Simple C programs can be developed, and a complete set of winapi header files are also included.&lt;/p&gt;

&lt;p&gt;Finally, we also improved the trybuild mode compilation. Through xmake, third-party projects maintained by autotools/cmake can be quickly compiled, and cross-compilation environments such as android/ios/mingw can be quickly connected to achieve rapid migration and compilation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Project source code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/&quot;&gt;Official Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;new-feature-introduction&quot;&gt;New feature introduction&lt;/h2&gt;

&lt;h3 id=&quot;more-diverse-installation-methods&quot;&gt;More diverse installation methods&lt;/h3&gt;

&lt;p&gt;In the new version, we submitted the xmake installation package to windows winget and ubuntu ppa repositories, we can install xmake more conveniently and quickly.&lt;/p&gt;

&lt;h4 id=&quot;winget-installation&quot;&gt;Winget installation&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;winget install xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;ubuntu-ppa-installation&quot;&gt;Ubuntu PPA installation&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo add-apt-repository ppa:xmake-io/xmake
sudo apt update
sudo apt install xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course, we also support many other installation methods. For detailed installation methods for other platforms, see: &lt;a href=&quot;https://xmake.io/#/guide/installation&quot;&gt;Installation Document&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;richer-toolchain-support&quot;&gt;Richer toolchain support&lt;/h3&gt;

&lt;p&gt;Currently we have supported a lot of toolchain environments, and in this version, we have added support for TinyC and Emscripten (WebAssembly) compilation toolchains. We can quickly switch to the corresponding toolchain to compile with the following command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f --toolchain&lt;span class=&quot;o&quot;&gt;=[&lt;/span&gt;tinyc|emscripten]
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the new version, we also provide two additional installation packages, built-in and integrated TinyC compilation environment, the entire installation package only needs 5M, and also contains winsdk api.&lt;/p&gt;

&lt;p&gt;The installation package can be found in the github/releases directory of xmake.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/releases/download/v2.3.7/xmake-tinyc-v2.3.7.win64.exe&quot;&gt;xmake-tinyc-v2.3.7.win64.exe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/releases/download/v2.3.7/xmake-tinyc-v2.3.7.win32.exe&quot;&gt;xmake-tinyc-v2.3.7.win32.exe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Through this installation package, we can completely get rid of the bloated vs development environment (several G) by compiling and developing C programs, realize one-click installation, and use it out of the box. It is very useful for us to brush leetcode and write some C test code. Yes, there is no need to install the entire vs for this particular installation.&lt;/p&gt;

&lt;p&gt;In addition, if we want to view all toolchains supported by xmake, we can execute the following command, and the compilation configuration of &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f -p cross --sdk=/xxx&lt;/code&gt; can support more general cross toolchains.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake show -l toolchains
xcode         Xcode IDE
vs            VisualStudio IDE
yasm          The Yasm Modular Assembler
clang         A C language family frontend &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;LLVM
go            Go Programming Language Compiler
dlang         D Programming Language Compiler
gfortran      GNU Fortran Programming Language Compiler
zig           Zig Programming Language Compiler
sdcc          Small Device C Compiler
cuda          CUDA Toolkit
ndk           Android NDK
rust          Rust Programming Language Compiler
llvm          A collection of modular and reusable compiler and toolchain technologies
cross         Common cross compilation toolchain
nasm          NASM Assembler
gcc           GNU Compiler Collection
mingw         Minimalist GNU &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Windows
gnu-rm        GNU Arm Embedded Toolchain
envs          Environment variables toolchain
fasm          Flat Assembler
tinyc         Tiny C Compiler
emcc          A toolchain &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;compiling to asm.js and WebAssembly
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;trybuild-compilation-mode-improvement&quot;&gt;TryBuild compilation mode improvement&lt;/h3&gt;

&lt;p&gt;The so-called trybuild mode is a feature introduced by xmake that adapts to existing third-party build systems, because most existing third-party projects are maintained by third-party build systems such as autotools/cmake. If they are migrated to xmake The cost of migration is relatively high for configuration.&lt;/p&gt;

&lt;p&gt;Although the configuration of xmake is very easy to use, there is no need to change the build system for projects that have been stably maintained. xmake is mainly used for the construction and maintenance of some new projects.&lt;/p&gt;

&lt;p&gt;Based on this background, xmake adopts the trybuild compilation mode, which is the so-called trial compilation mode, which automatically detects the build system of third-party projects. If it detects that the project is maintained by autotools, it will automatically call &lt;code class=&quot;highlighter-rouge&quot;&gt;./configure; make&lt;/code&gt; to compile.&lt;/p&gt;

&lt;p&gt;If a project maintained by cmake is detected, cmake is automatically called to generate makefile/build.ninja to compile. For users who use xmake, the compilation can always be completed by just executing the command xmake, for example:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
note: configure found, try building it or you can run &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; to &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;buildsystem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass -y or --confirm&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;y/n/d to skip confirm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;?
please input: y &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
y
  ...
  CC src/pcre2grep-pcre2grep.o
  CC src/libpcre2_8_la-pcre2_auto_possess.lo
  CC src/libpcre2_8_la-pcre2_config.lo
  ...
build ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After xmake detects the autotools build system, it will prompt the user if you need to try to call autotools to compile. After typing y to confirm, you can directly complete the compilation. For cmake projects, you only need to execute the same &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;You don’t need to care about how autotools/cmake needs to be configured, used and compiled. After all, cmake needs to generate different build files for windows and linux platforms. The compilation methods are also different. One will call make and the other will call msbuild. Big.&lt;/p&gt;

&lt;p&gt;Not only that, xmake also docked with &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake -r&lt;/code&gt; to directly recompile, docked with &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake clean&lt;/code&gt; to achieve unified file cleaning, and docked with &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake -v&lt;/code&gt; to achieve unified detailed compilation command viewing.&lt;/p&gt;

&lt;h4 id=&quot;trybuilds-cross-compilation-support&quot;&gt;TryBuild’s cross-compilation support&lt;/h4&gt;

&lt;p&gt;If it’s just the compilation of the current host platform, you might say, what’s the matter, cmake also has &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake --build .&lt;/code&gt; to compile directly, it is not too troublesome.&lt;/p&gt;

&lt;p&gt;So the question is, how to do cross compilation? If you have used autotools/cmake to cross-compile and generate mingw/android/ios target programs, can cmake and autotools still handle it simply and consistently?&lt;/p&gt;

&lt;p&gt;Autotools will not say much, anyway, I hate its cross-experience. Every time I cross-compile and transplant a code with an autotools project, it takes a long time. I often have to package various errors and study the transfer of various configuration parameters. Different platforms have different configurations.&lt;/p&gt;

&lt;p&gt;And cmake I don’t think it’s easy to use, for example, for the Android platform, I have to do it like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cmake &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -DCMAKE_TOOLCHAIN_FILE&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NDK&lt;/span&gt;/build/cmake/android.toolchain.cmake &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -DANDROID_ABI&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ABI&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -DANDROID_NATIVE_API_LEVEL&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$MINSDKVERSION&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$OTHER_ARGS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For the ios platform, I did not find a short-answer configuration method, but found a third-party ios toolchain configuration, which is very complicated: https://github.com/leetal/ios-cmake/blob/master/ios.toolchain.cmake&lt;/p&gt;

&lt;p&gt;For mingw, it is another way. I have been tossing about the environment for a long time, which is very tossing.&lt;/p&gt;

&lt;p&gt;Then if you use xmake to dock cmake to achieve cross-compilation, you only need to do this.&lt;/p&gt;

&lt;p&gt;Compile the android program:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -p android --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cmake --ndk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/xxx
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Compile the ios program:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -p iphoneos --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cmake
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Compile the mingw program:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -p mingw --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cmake --mingw&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/sdk/xxx
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When we only need to configure, enable cmake’s try-compilation mode through &lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=cmake&lt;/code&gt;, and then switch to the corresponding platform through &lt;code class=&quot;highlighter-rouge&quot;&gt;-p android/iphoneos/mingw&lt;/code&gt;, dock the corresponding SDK, and you can use the same method To quickly implement cross-compilation, even if this project is maintained by cmake.&lt;/p&gt;

&lt;p&gt;The user does not need to be concerned. If you use cmake to transfer the configuration of different toolchains, xmake will automatically handle it for you. You only need to execute xmake to compile, or execute &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake -r&lt;/code&gt; to recompile, or view compilation details&lt;code class=&quot;highlighter-rouge&quot;&gt; xmake -v&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In addition, you can quickly switch the build architecture by &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f -p iphoneos -a arm64 --trybuild=cmake&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we need to explain that although trybuild mode can greatly help users save compilation and configuration operations, if the conditions are run, we still hope that everyone can directly use xmake.lua to maintain their projects.&lt;/p&gt;

&lt;p&gt;In this way, there is no need to compile with trybuild, and xmake will support cross-compilation more perfectly, because internal xmake will directly compile the project without calling cmake, autotools and other tools, for example:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -p iphoneos
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -p android --ndk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/xxx
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, this time we omit the &lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=cmake&lt;/code&gt; parameter, because we don’t need it, we compile directly. At this time, xmake is equivalent to independent make/ninja and does not rely on make at all, and the compilation speed is also Can be completely comparable to ninja.&lt;/p&gt;

&lt;h3 id=&quot;improve-the-integration-of-remote-dependency-packages&quot;&gt;Improve the integration of remote dependency packages&lt;/h3&gt;

&lt;h4 id=&quot;cross-compilation-support&quot;&gt;Cross compilation support&lt;/h4&gt;

&lt;p&gt;xmake not only supports mingw/autotools cross-compilation support for trybuild, but also supports cross-compilation installation and integration for third parties maintained by cmake/autotools in remote package warehouses.&lt;/p&gt;

&lt;p&gt;E.g:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pcre2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pcre2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then by switching to the iphoneos platform, you can quickly integrate and install the pcre2 package of the iphoneos platform, and then compile and link it, even if the pcre2 package is maintained by autotools/cmake.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -p iphoneos
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;private-network-package-warehouse&quot;&gt;Private network package warehouse&lt;/h4&gt;

&lt;p&gt;In this version, we have also made some improvements to the integration of remote dependency packages. For example, you can switch to private network mode by configuring &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake g --network=private&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is mainly used for some company’s internal network through xmake’s self-built package management warehouse to achieve closed C/C++ dependency package integration, and will not rely on packages from the official warehouse provided by xmake.&lt;/p&gt;

&lt;h4 id=&quot;recursively-export-installed-packages&quot;&gt;Recursively export installed packages&lt;/h4&gt;

&lt;p&gt;xmake previously provided a command to export all third-party dependency packages installed by xmake.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake require --export
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, the previous version corresponds to some packages that have dependencies. When exporting, only itself will be exported, and all its dependencies will not be exported. In this version, we have improved it and will also perform all corresponding dependent packages.了export.&lt;/p&gt;

&lt;h3 id=&quot;improve-support-for-qt-sdk-environment&quot;&gt;Improve support for Qt SDK environment&lt;/h3&gt;

&lt;p&gt;In addition, this version also provides better support for the Qt SDK toolchain environment. For example, the Qt SDK toolchain installed by the apt command under the ubuntu system is also supported, while the previous version can only support downloading and installing from the Qt official website The Qt SDK environment.&lt;/p&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/microsoft/winget-pkgs/pull/2941&quot;&gt;#2941&lt;/a&gt;: Add support for winget&lt;/li&gt;
  &lt;li&gt;Add xmake-tinyc installer without msvc compiler for windows&lt;/li&gt;
  &lt;li&gt;Add tinyc compiler toolchain&lt;/li&gt;
  &lt;li&gt;Add emcc compiler toolchain (emscripten) to compiling to asm.js and WebAssembly&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/947&quot;&gt;#947&lt;/a&gt;: Add &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake g --network=private&lt;/code&gt; to enable the private network&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;change&quot;&gt;Change&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/907&quot;&gt;#907&lt;/a&gt;: Improve to the linker optimization for msvc&lt;/li&gt;
  &lt;li&gt;Improve to detect qt sdk environment&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/918&quot;&gt;#918&lt;/a&gt;: Improve to support cuda11 toolchains&lt;/li&gt;
  &lt;li&gt;Improve Qt support for ubuntu/apt&lt;/li&gt;
  &lt;li&gt;Improve CMake project generator&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/931&quot;&gt;#931&lt;/a&gt;: Support to export packages with all dependences&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/930&quot;&gt;#930&lt;/a&gt;: Support to download package without version list directly&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/927&quot;&gt;#927&lt;/a&gt;: Support to switch arm/thumb mode for android ndk&lt;/li&gt;
  &lt;li&gt;Improve trybuild/cmake to support android/mingw/iphoneos/watchos toolchains&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/903&quot;&gt;#903&lt;/a&gt;: Fix install vcpkg packages fails&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/912&quot;&gt;#912&lt;/a&gt;: Fix the custom toolchain&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/914&quot;&gt;#914&lt;/a&gt;: Fix bad light userdata pointer for lua on some aarch64 devices&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 14 Sep 2020 00:00:00 +0800</pubDate>
        <link>https://tboox.org/2020/09/14/xmake-update-v2.3.7/</link>
        <guid isPermaLink="true">https://tboox.org/2020/09/14/xmake-update-v2.3.7/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>toolchains</category>
        
        <category>tinyc</category>
        
        <category>emscripten</category>
        
        <category>qt</category>
        
        <category>cuda</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.3.7 发布, 新增 tinyc 和 emscripten 工具链支持</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;xmake&lt;/a&gt; 是一个基于 Lua 的轻量级跨平台构建工具，使用 xmake.lua 维护项目构建，相比 makefile/CMakeLists.txt，配置语法更加简洁直观，对新手非常友好，短时间内就能快速入门，能够让用户把更多的精力集中在实际的项目开发上。&lt;/p&gt;

&lt;p&gt;随着 xmake 最近几年不断的迭代发展，xmake 已经在 Github 收获 2.9K star，300+ fork，30+ 贡献者，并且处理了 900+ issues，5400+ Commits，活跃用户也在不断增长。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tboox.org/static/img/xmake/star-history.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在，xmake v2.3.7 版本发布了，在新版本中，我们主要完善了 xmake 自身的稳定性和兼容性，通过两个月的不断迭代，修复了很多用户反馈的各种使用问题，使用体验和稳定性有了很大的提升。&lt;/p&gt;

&lt;p&gt;另外，我们在这个版本中也新增对 TinyC 和 Emscripten (WebAssembly) 编译工具链的支持。&lt;/p&gt;

&lt;p&gt;尤其是针对 windows 平台，我们提供了额外的 xmake-tinyc 安装包，里面内置了 tinyc 编译器，使得用户可以完全脱离臃肿的 vs 环境，一键安装，开箱即用，只需要 5M 的安装包即可开发简单的 C 程序，同时还自带了整套 winapi 头文件。&lt;/p&gt;

&lt;p&gt;最后，我们还改进了 trybuild 模式编译，通过 xmake 可以快速编译 autotools/cmake 维护的第三方项目，并且可以快速对接 android/ios/mingw等交叉编译环境，实现快速移植编译。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;新特性介绍&quot;&gt;新特性介绍&lt;/h2&gt;

&lt;h3 id=&quot;更加多样的安装方式&quot;&gt;更加多样的安装方式&lt;/h3&gt;

&lt;p&gt;新版本中，我们将 xmake 安装包提交到了 windows winget 以及 ubuntu ppa 仓库，我们可以更加方便快捷地安装 xmake。&lt;/p&gt;

&lt;h4 id=&quot;winget-安装&quot;&gt;Winget 安装&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;winget install xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;ubuntu-ppa-安装&quot;&gt;Ubuntu PPA 安装&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo add-apt-repository ppa:xmake-io/xmake
sudo apt update
sudo apt install xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当然，我们还支持很多其他的安装方式，对于其他平台的详细安装方式见：&lt;a href=&quot;https://xmake.io/#/zh-cn/guide/installation&quot;&gt;安装文档&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;更加丰富的工具链支持&quot;&gt;更加丰富的工具链支持&lt;/h3&gt;

&lt;p&gt;当前我们已经支持非常多的工具链环境，而在这个版本中，我们又新增了 TinyC 和 Emscripten (WebAssembly) 编译工具链的支持，我们可以通过下面的命令快速切换到对应的工具链来编译。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f --toolchain&lt;span class=&quot;o&quot;&gt;=[&lt;/span&gt;tinyc|emscripten]
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们还在新版本中，额外提供了两个安装包，内置集成了 TinyC 编译环境，整个安装包只需要 5M，还包含了 winsdk api。&lt;/p&gt;

&lt;p&gt;安装包可以在 xmake 的 github/releases 目录下找到。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/releases/download/v2.3.7/xmake-tinyc-v2.3.7.win64.exe&quot;&gt;xmake-tinyc-v2.3.7.win64.exe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/releases/download/v2.3.7/xmake-tinyc-v2.3.7.win32.exe&quot;&gt;xmake-tinyc-v2.3.7.win32.exe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过这个安装包，我们编译开发 C 程序就可以完全摆脱臃肿的 vs 开发环境（好几个 G），实现一键安装，开箱即用，对于我们平常刷刷 leetcode，写点 C 测试代码还是非常有用的，没必要为此特定安装整个 vs 进来。&lt;/p&gt;

&lt;p&gt;另外，如果我们要查看 xmake 支持的所有工具链，可以执行下面的命令，另外 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f -p cross --sdk=/xxx&lt;/code&gt; 的编译配置可以支持更多通用的交叉工具链。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake show -l toolchains
xcode         Xcode IDE
vs            VisualStudio IDE
yasm          The Yasm Modular Assembler
clang         A C language family frontend &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;LLVM
go            Go Programming Language Compiler
dlang         D Programming Language Compiler
gfortran      GNU Fortran Programming Language Compiler
zig           Zig Programming Language Compiler
sdcc          Small Device C Compiler
cuda          CUDA Toolkit
ndk           Android NDK
rust          Rust Programming Language Compiler
llvm          A collection of modular and reusable compiler and toolchain technologies
cross         Common cross compilation toolchain
nasm          NASM Assembler
gcc           GNU Compiler Collection
mingw         Minimalist GNU &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Windows
gnu-rm        GNU Arm Embedded Toolchain
envs          Environment variables toolchain
fasm          Flat Assembler
tinyc         Tiny C Compiler
emcc          A toolchain &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;compiling to asm.js and WebAssembly
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;trybuild-编译模式改进&quot;&gt;TryBuild 编译模式改进&lt;/h3&gt;

&lt;p&gt;所谓 trybuild 模式，就是 xmake 推出的一个适配现有第三方构建系统的特性，因为现在大部分已有的第三方项目都是用 autotools/cmake 等第三方构建系统维护的，如果将它们迁移到 xmake 配置那么迁移成本还是比较高的。&lt;/p&gt;

&lt;p&gt;虽然 xmake 的配置编写非常简单上手，但也没必要对已经稳定维护的项目去大改构建系统，xmake 主要还是用于一些新项目的构建维护。&lt;/p&gt;

&lt;p&gt;基于此背景，xmake 采用 trybuild 编译模式，也就是所谓的尝试编译模式，通过自动探测第三方项目的构建系统，如果检测到是 autotools 维护的项目，那么自动调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;./configure; make&lt;/code&gt; 来编译。&lt;/p&gt;

&lt;p&gt;如果检测到是用 cmake 维护的项目，那么自动调用 cmake 来生成 makefile/build.ninja 来编译，对于使用 xmake 的用户而言，始终只是执行 xmake 这一个命令就可以完成编译，例如：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
note: configure found, try building it or you can run &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; to &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;buildsystem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass -y or --confirm&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;y/n/d to skip confirm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;?
please input: y &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
y
  ...
  CC       src/pcre2grep-pcre2grep.o
  CC       src/libpcre2_8_la-pcre2_auto_possess.lo
  CC       src/libpcre2_8_la-pcre2_config.lo
  ...
build ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;xmake检测到 autotools 构建系统后，就会提示用户是否需要尝试调用 autotools 来编译，输入y确认后，就可以直接完成编译，对于 cmake 的项目也是，只需要执行相同的 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake&lt;/code&gt; 命令即可。&lt;/p&gt;

&lt;p&gt;而不需要关心 autotools/cmake 需要如何去配置使用和编译，毕竟 cmake 对于 windows 和 linux 平台，需要生成不同的构建文件，编译方式也是不同的，一会调用 make，一会调用 msbuild，看着就头大。&lt;/p&gt;

&lt;p&gt;不仅如此，xmake 还对接了 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake -r&lt;/code&gt; 来直接重新编译，对接 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake clean&lt;/code&gt; 实现统一的文件清理，对接 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake -v&lt;/code&gt; 实现统一的详细编译命令的查看。&lt;/p&gt;

&lt;h4 id=&quot;trybuild-的交叉编译支持&quot;&gt;TryBuild 的交叉编译支持&lt;/h4&gt;

&lt;p&gt;如果只是当前主机平台的编译，也许你们会说，这有啥，cmake 也有 &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake --build .&lt;/code&gt; 来直接编译，并不怎么麻烦么。&lt;/p&gt;

&lt;p&gt;那么问题来了，交叉编译怎么搞？如果你们用过 autotools/cmake 去交叉编译生成 mingw/android/ios 的目标程序，cmake 和 autotools 还能够简单一致的处理么？&lt;/p&gt;

&lt;p&gt;autotools 不多说，反正我是对它的交叉体验是深恶痛绝的，每次交叉编译移植一个带有 autotools 项目的代码，都要折腾半天，经常要包各种错误，研究各种配置参数的传递，不同平台的配置还不同。&lt;/p&gt;

&lt;p&gt;而 cmake 我感觉用起来也不省事，比如对于 Android 平台得这样搞：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cmake &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -DCMAKE_TOOLCHAIN_FILE&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NDK&lt;/span&gt;/build/cmake/android.toolchain.cmake &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -DANDROID_ABI&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ABI&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -DANDROID_NATIVE_API_LEVEL&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$MINSDKVERSION&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$OTHER_ARGS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;而对于 ios 平台，没找到简答的配置方式，就找到个第三方的 ios 工具链配置，很复杂：https://github.com/leetal/ios-cmake/blob/master/ios.toolchain.cmake&lt;/p&gt;

&lt;p&gt;对于 mingw 又是另外一种方式，我又折腾了半天环境，很是折腾。&lt;/p&gt;

&lt;p&gt;那如果使用 xmake 去对接 cmake 实现交叉编译呢，只需要这样。&lt;/p&gt;

&lt;p&gt;编译 android 程序：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -p android --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cmake --ndk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/xxx
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;编译 ios 程序：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -p iphoneos --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cmake
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;编译 mingw 程序：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -p mingw --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cmake --mingw&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/sdk/xxx
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们只需要配置的时候，通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=cmake&lt;/code&gt; 启用 cmake 的尝试编译模式，然后通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;-p android/iphoneos/mingw&lt;/code&gt; 切到对应的平台，对接对应的sdk，就可以使用相同的方式来快速实现交叉编译，哪怕这个项目是使用 cmake 来维护的。&lt;/p&gt;

&lt;p&gt;用户不需要关系如果使用 cmake 去传递不同工具链的配置，xmake 都帮你自动处理了，你只需要简单的执行 xmake 来编译，也可以执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake -r&lt;/code&gt; 来重编，或者查看编译详情 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake -v&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;另外，还可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f -p iphoneos -a arm64 --trybuild=cmake&lt;/code&gt; 快速的切换编译架构。&lt;/p&gt;

&lt;p&gt;最后，我们需要说明的是，虽然 trybuild 模式可以极大帮助用户节省编译和配置操作，但是如果条件运行，我们还是希望大家能够直接使用 xmake.lua 来维护自己的项目。&lt;/p&gt;

&lt;p&gt;这样，就不需要走 trybuild 编译了，xmake 会更加完美的支持交叉编译，因为内部 xmake 会直接去编译项目，而不需要在调用 cmake、autotools 等工具了，例如：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -p iphoneos
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -p android --ndk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/xxx
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到，这回我们省去了 &lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=cmake&lt;/code&gt; 参数，因为不需要了，我们是直接编译的，这个时候 xmake 相当于独立的 make/ninja，并且完全不依赖 make，编译速度也可以完全媲美 ninja。&lt;/p&gt;

&lt;h3 id=&quot;改进远程依赖包的集成&quot;&gt;改进远程依赖包的集成&lt;/h3&gt;

&lt;h4 id=&quot;交叉编译支持&quot;&gt;交叉编译支持&lt;/h4&gt;

&lt;p&gt;xmake 不仅对 trybuild 支持了 mingw/autotools 的交叉编译支持，还对远程包仓库中使用 cmake/autotools 维护的第三方也支持上了交叉编译安装和集成。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pcre2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pcre2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后通过切换到 iphoneos 平台，就可以快速集成安装 iphoneos 平台的 pcre2 包，然后编译链接它，哪怕这个 pcre2 包是通过 autotools/cmake 维护的。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake f -p iphoneos
xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;私有网络包仓库&quot;&gt;私有网络包仓库&lt;/h4&gt;

&lt;p&gt;这个版本中，我们对远程依赖包的集成也稍微做了一些改进，比如可以通过配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake g --network=private&lt;/code&gt; 切到私有网络模式。&lt;/p&gt;

&lt;p&gt;这个主要用于一些公司内部网络通过 xmake 自建的包管理仓库，实现封闭式的 C/C++ 依赖包集成，完全不会从 xmake 提供的官方仓库下来依赖包。&lt;/p&gt;

&lt;h4 id=&quot;递归导出安装的包&quot;&gt;递归导出安装的包&lt;/h4&gt;

&lt;p&gt;xmake 之前提供了一个命令，可以导出通过 xmake 安装的所有第三方依赖包。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake require --export
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;但是，之前的版本对应一些存在依赖的包，导出时候只会导出自身，它的所有依赖是不会被导出的，而这个版本中，我们对其进行了改进，将对应的所有依赖包也进行了导出。&lt;/p&gt;

&lt;h3 id=&quot;改进对-qt-sdk-环境的支持&quot;&gt;改进对 Qt SDK 环境的支持&lt;/h3&gt;

&lt;p&gt;另外，这个版本我们还对 Qt SDK 的工具链环境进行了更好的支持，比如 ubuntu 系统下通过 apt 命令安装的 Qt SDK 工具链也进行了支持，而之前的版本只能支持从 Qt 官网下载安装的 Qt SDK 环境。&lt;/p&gt;

&lt;h2 id=&quot;更新内容&quot;&gt;更新内容&lt;/h2&gt;

&lt;h3 id=&quot;新特性&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/microsoft/winget-pkgs/pull/2941&quot;&gt;#2941&lt;/a&gt;: 支持通过 winget 来安装 xmake&lt;/li&gt;
  &lt;li&gt;添加 xmake-tinyc 安装包，内置tinyc编译器，支持windows上无msvc环境也可直接编译c代码&lt;/li&gt;
  &lt;li&gt;添加 tinyc 编译工具链&lt;/li&gt;
  &lt;li&gt;添加 emcc (emscripten) 编译工具链去编译 asm.js 和 WebAssembly&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/947&quot;&gt;#947&lt;/a&gt;: 通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake g --network=private&lt;/code&gt; 配置设置私有网络模式，避免远程依赖包下载访问外网导致编译失败&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;改进&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/907&quot;&gt;#907&lt;/a&gt;: 改进msvc的链接器优化选项，生成更小的可执行程序&lt;/li&gt;
  &lt;li&gt;改进ubuntu下Qt环境的支持&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/918&quot;&gt;#918&lt;/a&gt;: 改进cuda11工具链的支持&lt;/li&gt;
  &lt;li&gt;改进Qt支持，对通过 ubuntu/apt 安装的Qt sdk也进行了探测支持，并且检测效率也优化了下&lt;/li&gt;
  &lt;li&gt;改进 CMake 工程文件生成器&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/931&quot;&gt;#931&lt;/a&gt;: 改进导出包，支持导出所有依赖包&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/930&quot;&gt;#930&lt;/a&gt;: 如果私有包定义没有版本定义，支持直接尝试下载包&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/927&quot;&gt;#927&lt;/a&gt;: 改进android ndk，支持arm/thumb指令模式切换&lt;/li&gt;
  &lt;li&gt;改进 trybuild/cmake 支持 Android/Mingw/iPhoneOS/WatchOS 工具链&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs修复&quot;&gt;Bugs修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/903&quot;&gt;#903&lt;/a&gt;: 修复vcpkg包安装失败问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/912&quot;&gt;#912&lt;/a&gt;: 修复自定义工具链&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/914&quot;&gt;#914&lt;/a&gt;: 修复部分aarch64设备上运行lua出现bad light userdata pointer问题&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 14 Sep 2020 00:00:00 +0800</pubDate>
        <link>https://tboox.org/cn/2020/09/14/xmake-update-v2.3.7/</link>
        <guid isPermaLink="true">https://tboox.org/cn/2020/09/14/xmake-update-v2.3.7/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>toolchains</category>
        
        <category>tinyc</category>
        
        <category>emscripten</category>
        
        <category>qt</category>
        
        <category>cuda</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.3.6 released, Added fortran compilation support</title>
        <description>&lt;p&gt;This version focuses on some improvements to the support of other languages, such as fortran compilation support, experimental support for zig language, and third-party dependency package support and cross-compilation support for golang/dlang.&lt;/p&gt;

&lt;p&gt;Although, xmake focuses on c/c++ build support, other languages support xmake will also make some improvements from time to time. Its main purpose is not to replace their official build system, but only to support mixed compilation with c/c++ , To better serve c/c++ projects,
After all, some c/c++ projects still occasionally call code interfaces of other languages, such as mixed calls with languages such as cuda, dlang, objc, swift, asm, etc., so xmake still provides some basic compilation support for them.&lt;/p&gt;

&lt;p&gt;In addition, regarding c/c++, we also support the header file dependency format of the new &lt;code class=&quot;highlighter-rouge&quot;&gt;/sourceDependencies xxx.json&lt;/code&gt; output in the vs preview version (this is more reliable and stable for multi-language header file dependency detection).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/home&quot;&gt;Documents&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://xmake.io/assets/img/index/xmake-basic-render.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction-of-new-features&quot;&gt;Introduction of New Features&lt;/h2&gt;

&lt;h3 id=&quot;fortran-language-compilation-support&quot;&gt;Fortran language compilation support&lt;/h3&gt;

&lt;p&gt;Starting from this version, we have fully supported the use of the gfortran compiler to compile fortran projects, we can quickly create an empty project based on fortran by using the following command:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; create -l fortran -t console test
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Its xmake.lua content is as follows:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.f90&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;More code examples can be viewed here: &lt;a href=&quot;https://github.com/xmake-io/xmake/tree/master/tests/projects/fortran&quot;&gt;Fortran Examples&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;zig-language-experimental-support&quot;&gt;Zig language experimental support&lt;/h3&gt;

&lt;p&gt;Note: At present, this language xmake is still in the experimental support stage, and it is not perfect. For example, it is not supported on windows, and dynamic library compilation under linux/macOS is not yet supported. Please evaluate and use it yourself.&lt;/p&gt;

&lt;p&gt;We can use the following configuration method to try and experience, at least the console and static library programs under linux/macOS can still run.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.zig&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As for why windows does not support it, please refer to the issues I mentioned to zig earlier, &lt;a href=&quot;https://github.com/ziglang/zig/issues/5825&quot;&gt;#5825&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The dynamic library does not support it because I have some pitfalls (the dynamic library generated by zig will automatically append &lt;code class=&quot;highlighter-rouge&quot;&gt;.0.0.0&lt;/code&gt;), see: &lt;a href=&quot;https://github.com/ziglang/zig/ issues/5827&quot;&gt;issue 5827&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, I lay down in other pits. I personally feel that there are a lot of pits, so I’m still in the experimental stage for the time being, and I will look at it later.&lt;/p&gt;

&lt;p&gt;For more examples, see: &lt;a href=&quot;https://github.com/xmake-io/xmake/tree/master/tests/projects/zig&quot;&gt;Zig Examples&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;go-dependency-package-and-cross-compilation-support&quot;&gt;Go dependency package and cross compilation support&lt;/h3&gt;

&lt;p&gt;The new version of xmake continues to make some improvements to the go build support, such as cross-compilation of go. For example, we can compile windows programs on macOS and linux:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; f -p windows -a x86
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In addition, the new version also initially supports the third-party dependency package management of go:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;go::github.com/sirupsen/logrus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logrus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;go::golang.org/x/sys/internal/unsafeheader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;unsafeheader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_plat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;windows&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;go::golang.org/x/sys/windows&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;syshost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;go::golang.org/x/sys/unix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;syshost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.go&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;logrus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;syshost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;unsafeheader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, there are still some imperfections. For example, all cascading dependency packages must be manually configured at present, which will be a bit more cumbersome and needs to be improved in the future.&lt;/p&gt;

&lt;p&gt;For more examples, see: &lt;a href=&quot;https://github.com/xmake-io/xmake/tree/master/tests/projects/go&quot;&gt;Go Examples&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;dlangdub-dependency-package-support&quot;&gt;Dlang/Dub dependency package support&lt;/h3&gt;

&lt;p&gt;xmake also supports dlang’s dub package management, which can quickly integrate dlang’s third-party dependency packages:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dub::log 0.4.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dub::dateparser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dateparser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dub::emsi_containers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;emsi_containers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dub::stdx-allocator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;stdx-allocator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dub::mir-core&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mir-core&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dateparser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;emsi_containers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;stdx-allocator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mir-core&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;clexe-new-header-file-dependent-file-support&quot;&gt;cl.exe new header file dependent file support&lt;/h3&gt;

&lt;p&gt;The header file dependency of msvc usually needs to parse the output content of &lt;code class=&quot;highlighter-rouge&quot;&gt;/showIncludes&lt;/code&gt; and extract the includes file list inside to handle the dependency compilation problem. However, cl.exe does a very bad job of this output. The includes information and compilation output are Mixed together.&lt;/p&gt;

&lt;p&gt;It is very unfriendly to build tools to handle dependency analysis, especially in a multi-language environment, how to judge is includes, you need to judge the extraction through the preceding &lt;code class=&quot;highlighter-rouge&quot;&gt;Note: including file:&lt;/code&gt; string, but in Chinese, it is &lt;code class=&quot;highlighter-rouge&quot;&gt;Note: include File: &lt;/code&gt;,
If you change to the Japanese environment, it is also a Japanese prefix string, the encoding format problems, hard-coding problems, and the parsing and processing are not perfect.&lt;/p&gt;

&lt;p&gt;Regarding this point, in the latest vs2019 preview version, Microsoft has finally made improvements to the alignment. Through the new &lt;code class=&quot;highlighter-rouge&quot;&gt;/sourceDependencies xxx.json&lt;/code&gt; compilation option, the includes dependency information can be better output, which is convenient for analysis and extraction in a multilingual environment.&lt;/p&gt;

&lt;p&gt;In addition, the output of this new option is independent of a separate json file, and finally is not mixed with the compilation output, and finally there is no need to parse and separate compilation errors, warning messages, and includes list information.&lt;/p&gt;

&lt;p&gt;The output will look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;z:\\personal\\tbox\\src\\tbox\\tbox.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Includes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;z:\\personal\\tbox\\src\\tbox\\tbox.h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;z:\\personal\\tbox\\src\\tbox\\prefix.h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;z:\\personal\\tbox\\src\\tbox\\prefix\\prefix.h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;z:\\personal\\tbox\\src\\tbox\\prefix\\config.h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;z:\\personal\\tbox\\src\\tbox\\config.h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the new version, xmake handles json parsing by adding a builtin &lt;code class=&quot;highlighter-rouge&quot;&gt;core.base.json&lt;/code&gt; module, which can easily analyze and support the new header file dependent data. This mode is preferred (if cl is supported by the new version) , The old version of cl still uses &lt;code class=&quot;highlighter-rouge&quot;&gt;/showIncludes&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;xcode-plugin-generation-support&quot;&gt;Xcode plugin generation support&lt;/h3&gt;

&lt;p&gt;At present, we have no time to implement the generation of xcode projects by ourselves, but it does not mean that it is not supported, because xmake supports the generation of cmakelists.txt files, and cmake supports the generation of xcode project files. Before the official implementation,
We can also support it in disguise through cmake, xmake will automatically call cmake internally to transfer the generated results, there is no difference in use for users, just make sure that cmake is installed:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; project -k xcode
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;!&amp;gt; After we have time, we will re-implement each more complete xcode output plugin by ourselves, and welcome everyone to contribute.&lt;/p&gt;

&lt;h3 id=&quot;support-intellisense-for-xmake-vscode-plugin&quot;&gt;Support intellisense for xmake-vscode plugin&lt;/h3&gt;

&lt;p&gt;Recently, we also updated the &lt;a href=&quot;https://github.com/xmake-io/xmake-vscode&quot;&gt;xmake-vscode&lt;/a&gt; plugin, by automatically generating &lt;code class=&quot;highlighter-rouge&quot;&gt;compile_commands.json&lt;/code&gt; to the current project’s &lt;code class=&quot;highlighter-rouge&quot;&gt;.vscode&lt;/code&gt; directory, Then we only need to configure &lt;code class=&quot;highlighter-rouge&quot;&gt;.vscode/c_cpp_properties.json&lt;/code&gt; and associate this &lt;code class=&quot;highlighter-rouge&quot;&gt;.vscode/compile_commands.json&lt;/code&gt; path in it
Can realize intellisense automatic prompt, synchronize the configuration information such as includedirs in xmake.lua.&lt;/p&gt;

&lt;p&gt;As for how to generate &lt;code class=&quot;highlighter-rouge&quot;&gt;c_cpp_properties&lt;/code&gt;, there are detailed instructions in the official document: https://code.visualstudio.com/docs/cpp/configure-intellisense-crosscompilation&lt;/p&gt;

&lt;p&gt;The main configuration items inside:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &quot;configurations&quot;: [
    {
      &quot;compileCommands&quot;: &quot;.vscode/compile_commands.json&quot;,
    }
  ],
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;changlog&quot;&gt;Changlog&lt;/h2&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake project -k xcode&lt;/code&gt; generator (use cmake)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/870&quot;&gt;#870&lt;/a&gt;: Support gfortran compiler&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/887&quot;&gt;#887&lt;/a&gt;: Support zig compiler&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/893&quot;&gt;#893&lt;/a&gt;: Add json module&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/898&quot;&gt;#898&lt;/a&gt;: Support cross-compilation for golang&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/275&quot;&gt;#275&lt;/a&gt;: Support go package manager to install go packages&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/581&quot;&gt;#581&lt;/a&gt;: Support dub package manager to install dlang packages&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;change&quot;&gt;Change&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/868&quot;&gt;#868&lt;/a&gt;: Support new cl.exe dependency report files, &lt;code class=&quot;highlighter-rouge&quot;&gt;/sourceDependencies xxx.json&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/902&quot;&gt;#902&lt;/a&gt;: Improve to detect cross-compilation toolchain&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 28 Jul 2020 00:00:00 +0800</pubDate>
        <link>https://tboox.org/2020/07/28/xmake-update-v2.3.6/</link>
        <guid isPermaLink="true">https://tboox.org/2020/07/28/xmake-update-v2.3.6/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>toolchains</category>
        
        <category>fortran</category>
        
        <category>zig</category>
        
        <category>golang</category>
        
        <category>dlang</category>
        
        
        <category>xmake</category>
        
      </item>
    
  </channel>
</rss>
