<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TBOOX Open Source Project</title>
    <description>Focus on cross-platform development using c language</description>
    <link>http://www.tboox.org/</link>
    <atom:link href="http://www.tboox.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 28 Mar 2020 23:07:22 +0800</pubDate>
    <lastBuildDate>Sat, 28 Mar 2020 23:07:22 +0800</lastBuildDate>
    <generator>Jekyll v3.1.0</generator>
    
      <item>
        <title>xmake v2.3.1 released, Seamless integration with other build systems</title>
        <description>&lt;p&gt;In the past two months, I have made a lot of refactorings to improve xmake and added a lot of useful new features. Welcome to try it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Project Source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/&quot;&gt;Official Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some new features:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Compile other projects maintained by the build system with one click to achieve seamless docking and support cross compilation (such as fast cross compilation of autotools, see details below)&lt;/li&gt;
  &lt;li&gt;Added &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake project -k ninja&lt;/code&gt; project generation plugin to support generation of build.ninja build system files&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some improvements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Improve command line parameter input, support *nix style parameter input, thanks &lt;a href=&quot;https://github.com/OpportunityLiu&quot;&gt;@OpportunityLiu&lt;/a&gt; for contribution&lt;/li&gt;
  &lt;li&gt;Improve tab command completion, add command completion support for parameter values&lt;/li&gt;
  &lt;li&gt;Optimize get.sh installation and xmake update update scripts, add domestic mirror source, speed up download and install updates&lt;/li&gt;
  &lt;li&gt;gcc/clang compilation error output support native color highlighting support&lt;/li&gt;
  &lt;li&gt;Added msys/cygwin platform, and xmake source code also supports msys/mingw platform compilation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some invisible improvements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add socket and pipe modules and improve the process module&lt;/li&gt;
  &lt;li&gt;Refactor the whole process scheduler, better scheduling and parallel construction&lt;/li&gt;
  &lt;li&gt;Refactoring and improving the entire coroutine coroutine module, supporting simultaneous scheduling support for socket/pipe/process (preparing for subsequent remote compilation and distributed compilation)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are also some scattered bug fixes, see updates below.&lt;/p&gt;

&lt;h2 id=&quot;introduction-of-new-features&quot;&gt;Introduction of new features&lt;/h2&gt;

&lt;h3 id=&quot;generate-buildninja-build-file&quot;&gt;Generate build.ninja build file&lt;/h3&gt;

&lt;p&gt;xmake now supports the generation of ninja build files, allowing users to use ninja to quickly build projects maintained by xmake. I have to admit that in terms of build speed, ninja is indeed much faster than xmake. I will try to optimize the build speed of xmake in subsequent versions.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake project -k ninja
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then call ninja to build:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ninja
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or use the xmake command directly to call the ninja build, see below.&lt;/p&gt;

&lt;h3 id=&quot;try-building-with-another-build-system&quot;&gt;Try building with another build system&lt;/h3&gt;

&lt;p&gt;xmake v2.3.1 and above directly interface with other third-party build systems. Even if other projects do not use xmake.lua for maintenance, xmake can directly call other build tools to complete the compilation.&lt;/p&gt;

&lt;p&gt;Then the user can directly use a third-party build tool to compile, so why use xmake to call it? The main benefits are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Completely consistent behavior, simplifying the compilation process. No matter which other build system is used, you only need to execute the xmake command to compile. Users no longer need to study the different compilation processes of other tools&lt;/li&gt;
  &lt;li&gt;Docking the configuration environment of &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake config&lt;/code&gt;, reuse the platform detection and SDK environment detection of xmake, simplify the platform configuration&lt;/li&gt;
  &lt;li&gt;Docking cross-compilation environment, even for projects maintained with autotools, you can quickly cross-compile through xmake&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Build systems currently supported:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;autotools (cross-compiling environment for xmake)&lt;/li&gt;
  &lt;li&gt;xcodebuild&lt;/li&gt;
  &lt;li&gt;cmake&lt;/li&gt;
  &lt;li&gt;make&lt;/li&gt;
  &lt;li&gt;msbuild&lt;/li&gt;
  &lt;li&gt;scons&lt;/li&gt;
  &lt;li&gt;meson&lt;/li&gt;
  &lt;li&gt;bazel&lt;/li&gt;
  &lt;li&gt;ndkbuild&lt;/li&gt;
  &lt;li&gt;ninja&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;automatically-detect-build-system-and-compile&quot;&gt;Automatically detect build system and compile&lt;/h4&gt;

&lt;p&gt;For example, for a project maintained using cmake, executing xmake directly in the project root directory will automatically trigger a detection mechanism, detect CMakeLists.txt, and then prompt the user if cmake is needed to continue compiling.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake 
note: CMakeLists.txt found, try building it &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass -y or --confirm&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;y/n/d to skip confirm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;?
please input: y &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- Symbol prefix:
-- Configuring &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
-- Generating &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
-- Build files have been written to:/Users/ruki/Downloads/libpng-1.6.35/build
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  7%] Built target png-fix-itxt
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 21%] Built target genfiles
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 81%] Built target png
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 83%] Built target png_static
...
output to/Users/ruki/Downloads/libpng-1.6.35/build/artifacts
build ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;seamless-using-xmake-command&quot;&gt;Seamless using xmake command&lt;/h4&gt;

&lt;p&gt;Currently supports common commands such as &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake clean&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt; xmake --rebuild&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake config&lt;/code&gt; to seamlessly interface with third-party systems.&lt;/p&gt;

&lt;p&gt;We can directly clean the compiled output files of the cmake maintenance project&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake clean
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake clean --all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you bring &lt;code class=&quot;highlighter-rouge&quot;&gt;--all&lt;/code&gt; to perform the cleanup, all files generated by autotools/cmake will be cleared, not only the object files.&lt;/p&gt;

&lt;p&gt;The default &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake&lt;/code&gt; is docked with incremental build behavior, but we can also force a quick rebuild:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake --rebuild
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;manually-switch-the-specified-build-system&quot;&gt;Manually switch the specified build system&lt;/h4&gt;

&lt;p&gt;If there are multiple build systems under maintenance in a project, such as the libpng project, which comes with autotools/cmake/makefile and other build system maintenance, xmake defaults to using autotools by default. If you want to force switch to other build systems, you can execute:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=[&lt;/span&gt;autotools|cmake|make|msbuild|..]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In addition, the &lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=&lt;/code&gt; parameter is configured to manually specify the default build system, and the subsequent build process will not prompt the user for selection.&lt;/p&gt;

&lt;h4 id=&quot;fastly-cross-compile&quot;&gt;Fastly cross compile&lt;/h4&gt;

&lt;p&gt;As we all know, although many projects maintained by autotools support cross-compilation, the configuration process of cross-compilation is very complicated. There are still many differences in different toolchain processing methods, and many pits will be stepped in the middle.&lt;/p&gt;

&lt;p&gt;Even if you run through a toolchain’s cross-compilation, if you switch to another toolchain environment, it may take a long time, and if you use xmake, you usually only need two simple commands:&lt;/p&gt;

&lt;p&gt;!&amp;gt; At present autotools supports cross-compilation of xmake, and other build systems such as cmake will be added later.&lt;/p&gt;

&lt;h5 id=&quot;cross-compile-android-platform&quot;&gt;Cross compile android platform&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p android --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--ndk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;!&amp;gt; Among them, the –ndk parameter configuration is optional. If the user sets the ANDROID_NDK_HOME environment variable, or if the ndk is placed in ~/Library/Android/sdk/ndk-bundle, xmake can automatically detect it.&lt;/p&gt;

&lt;p&gt;Is not it simple? If you think this is not much, then you can directly operate &lt;code class=&quot;highlighter-rouge&quot;&gt;./configure&lt;/code&gt; to configure cross-compilation. You can see this document for comparison: [Using NDK with other compilation systems] (https://developer.android .com/ndk/guides/other_build_systems # autoconf)&lt;/p&gt;

&lt;p&gt;To put it bluntly, you probably have to do this, you may not be able to do it once:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TOOLCHAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NDK&lt;/span&gt;/toolchains/llvm/prebuilt/&lt;span class=&quot;nv&quot;&gt;$HOST_TAG&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-ar
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-as
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android21-clang
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CXX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android21-clang++
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-ld
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RANLIB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-ranlib
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;STRIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-strip
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./configure --host aarch64-linux-android
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;cross-compile-iphoneos-platform&quot;&gt;Cross compile iphoneos platform&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p iphoneos --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;cross-compile-mingw-platform&quot;&gt;Cross-compile mingw platform&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p mingw --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--mingw&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;using-other-cross-compilation-toolchains&quot;&gt;Using other cross-compilation toolchains&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p cross --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools --sdk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/xxxx
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For more cross compilation configuration details, please refer to the document: &lt;a href=&quot;https://xmake.io/#/guide/configuration?id=cross-compilation&quot;&gt;Cross Compilation&lt;/a&gt;, except for an additional &lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=&lt;/code&gt; parameter, all other cross-compilation configuration parameters are completely universal.&lt;/p&gt;

&lt;h4 id=&quot;passing-user-configuration-parameters&quot;&gt;Passing user configuration parameters&lt;/h4&gt;

&lt;p&gt;We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;--tryconfigs=&lt;/code&gt; to pass additional configuration parameters of the user to the corresponding third-party build system. For example: autotools will be passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;. / Configure&lt;/code&gt;, cmake will be passed to the&lt;code class=&quot;highlighter-rouge&quot;&gt; cmake&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools --tryconfigs&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-enable-shared=no&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For example, the above command, pass &lt;code class=&quot;highlighter-rouge&quot;&gt;--enable-shared=no&lt;/code&gt; to&lt;code class=&quot;highlighter-rouge&quot;&gt;./configure&lt;/code&gt; to disable dynamic library compilation.&lt;/p&gt;

&lt;p&gt;In addition, for &lt;code class=&quot;highlighter-rouge&quot;&gt;--cflags&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt; --includedirs&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;--ldflags&lt;/code&gt;, you don’t need to pass&lt;code class=&quot;highlighter-rouge&quot;&gt; --tryconfigs&lt;/code&gt;, you can pass the built-in parameters like &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake config --cflags=&lt;/code&gt; to pass through.&lt;/p&gt;

&lt;h4 id=&quot;examples-of-compiling-other-build-system&quot;&gt;Examples of compiling other build system&lt;/h4&gt;

&lt;h5 id=&quot;general-compilation&quot;&gt;General Compilation&lt;/h5&gt;

&lt;p&gt;In most cases, the compilation method after each docking system is consistent, except for the &lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=&lt;/code&gt; configuration parameter.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=[&lt;/span&gt;autotools|cmake|meson|ninja|bazel|make|msbuild|xcodebuild]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;!&amp;gt; We also need to make sure that the build tool specified by –trybuild is installed and working properly.&lt;/p&gt;

&lt;h5 id=&quot;building-android-jni-programs&quot;&gt;Building Android jni programs&lt;/h5&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;jni/Android.mk&lt;/code&gt; exists in the current project, then xmake can directly call ndk-build to build the jni library.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p android --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ndkbuild &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--ndk &lt;span class=&quot;o&quot;&gt;=]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;nix-style-command-parameter-input&quot;&gt;*nix style command parameter input&lt;/h3&gt;

&lt;p&gt;The current input specification is referenced from: &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html&quot;&gt;https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you very much &lt;a href=&quot;https://github.com/OpportunityLiu&quot;&gt;@OpportunityLiu&lt;/a&gt; for your contribution. The current input method can support the following writing:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake -j8 -rvD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Before, I could only write:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake -j 8 -r -v -D
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tab-command-completion&quot;&gt;Tab command completion&lt;/h3&gt;

&lt;p&gt;In previous versions, only parameter names could be completed. You can now complete the parameter values and prompt the value list. For example, after typing the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --plat &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; and
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Press the tab key to complete the platform parameters and become&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --plat &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; android
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;force-c-code-to-be-compiled-as-c-&quot;&gt;Force C code to be compiled as C ++&lt;/h3&gt;

&lt;p&gt;xmake adds a configuration parameter that specifies the type of source file and forces it to compile as a corresponding source file, such as compiling c code as c ++.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcekind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/675&quot;&gt;#675&lt;/a&gt;: Support to compile &lt;code class=&quot;highlighter-rouge&quot;&gt;*.c&lt;/code&gt; as c++, &lt;code class=&quot;highlighter-rouge&quot;&gt;add_files(&quot;*.c&quot;, {sourcekind = &quot;cxx&quot;})&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/681&quot;&gt;#681&lt;/a&gt;: Support compile xmake on msys/cygwin and add msys/cygwin platform&lt;/li&gt;
  &lt;li&gt;Add socket/pipe io modules and support to schedule socket/process/pipe in coroutine&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/192&quot;&gt;#192&lt;/a&gt;: Try building project with the third-party buildsystem&lt;/li&gt;
  &lt;li&gt;Enable color diagnostics output for gcc/clang&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/588&quot;&gt;#588&lt;/a&gt;: Improve project generator, &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake project -k ninja&lt;/code&gt;, support for build.ninja&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;change&quot;&gt;Change&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/665&quot;&gt;#665&lt;/a&gt;: Support to parse *nix style command options, thanks &lt;a href=&quot;https://github.com/OpportunityLiu&quot;&gt;@OpportunityLiu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/673&quot;&gt;#673&lt;/a&gt;: Improve tab complete to support argument values&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/680&quot;&gt;#680&lt;/a&gt;: Improve get.sh scripts and add download mirrors&lt;/li&gt;
  &lt;li&gt;Improve process scheduler&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/651&quot;&gt;#651&lt;/a&gt;: Improve os/io module syserrors tips&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Fix incremental compilation for checking the dependent file&lt;/li&gt;
  &lt;li&gt;Fix log output for parsing xmake-vscode/problem info&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/684&quot;&gt;#684&lt;/a&gt;: Fix linker errors for android ndk on windows&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 28 Mar 2020 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2020/03/28/xmake-update-v2.3.2/</link>
        <guid isPermaLink="true">http://www.tboox.org/2020/03/28/xmake-update-v2.3.2/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>autotools</category>
        
        <category>cmake</category>
        
        <category>ninja</category>
        
        <category>mingw</category>
        
        <category>msys</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.3.2 发布, 带来和ninja一样快的构建速度</title>
        <description>&lt;p&gt;这个版本重点重构优化了下内部并行构建机制，实现多个target间源文件的并行编译，以及并行link的支持，同时优化了xmake的一些内部损耗，修复影响编译速度的一些bug。
通过测试对比，目前的整体构建速度基本跟ninja持平，相比cmake/make, meson/ninja都快了不少，因为它们还额外多了一步生成makefile/build.ninja的过程。&lt;/p&gt;

&lt;p&gt;另外，xmake还增加了对sdcc编译工具链的支持，用于编译51/stm8等嵌入式程序。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;一些优化点&quot;&gt;一些优化点&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;多个target间所有源文件同时并行构建（之前不能跨target，中途会被link给堵住串行化）&lt;/li&gt;
  &lt;li&gt;多个无依赖的target的link可以并行执行（之前只能挨个执行link）&lt;/li&gt;
  &lt;li&gt;修复之前的任务调度bug，更加细粒度化调度，充分利用cpu core资源&lt;/li&gt;
  &lt;li&gt;优化xmake内部api上的一些损耗，这块效果也很明显&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;更多优化细节可以看下：&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/589&quot;&gt;issue #589&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;构建速度对比&quot;&gt;构建速度对比&lt;/h2&gt;

&lt;p&gt;我们在termux和macOS上做了一些对比测试，测试工程在: &lt;a href=&quot;https://github.com/xmake-io/xmake/tree/master/core&quot;&gt;xmake-core&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;对于相对比较多的target的项目，新版xmake对其构建速度的提升更加明显。&lt;/p&gt;

&lt;h3 id=&quot;多任务并行编译测试&quot;&gt;多任务并行编译测试&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;构建系统&lt;/th&gt;
      &lt;th&gt;Termux (8core/-j12)&lt;/th&gt;
      &lt;th&gt;构建系统&lt;/th&gt;
      &lt;th&gt;MacOS (8core/-j12)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;xmake&lt;/td&gt;
      &lt;td&gt;24.890s&lt;/td&gt;
      &lt;td&gt;xmake&lt;/td&gt;
      &lt;td&gt;12.264s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ninja&lt;/td&gt;
      &lt;td&gt;25.682s&lt;/td&gt;
      &lt;td&gt;ninja&lt;/td&gt;
      &lt;td&gt;11.327s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cmake(gen+make)&lt;/td&gt;
      &lt;td&gt;5.416s+28.473s&lt;/td&gt;
      &lt;td&gt;cmake(gen+make)&lt;/td&gt;
      &lt;td&gt;1.203s+14.030s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cmake(gen+ninja)&lt;/td&gt;
      &lt;td&gt;4.458s+24.842s&lt;/td&gt;
      &lt;td&gt;cmake(gen+ninja)&lt;/td&gt;
      &lt;td&gt;0.988s+11.644s&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;单任务编译测试&quot;&gt;单任务编译测试&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;构建系统&lt;/th&gt;
      &lt;th&gt;Termux (-j1)&lt;/th&gt;
      &lt;th&gt;构建系统&lt;/th&gt;
      &lt;th&gt;MacOS (-j1)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;xmake&lt;/td&gt;
      &lt;td&gt;1m57.707s&lt;/td&gt;
      &lt;td&gt;xmake&lt;/td&gt;
      &lt;td&gt;39.937s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ninja&lt;/td&gt;
      &lt;td&gt;1m52.845s&lt;/td&gt;
      &lt;td&gt;ninja&lt;/td&gt;
      &lt;td&gt;38.995s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cmake(gen+make)&lt;/td&gt;
      &lt;td&gt;5.416s+2m10.539s&lt;/td&gt;
      &lt;td&gt;cmake(gen+make)&lt;/td&gt;
      &lt;td&gt;1.203s+41.737s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cmake(gen+ninja)&lt;/td&gt;
      &lt;td&gt;4.458s+1m54.868s&lt;/td&gt;
      &lt;td&gt;cmake(gen+ninja)&lt;/td&gt;
      &lt;td&gt;0.988s+38.022s&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;更新内容&quot;&gt;更新内容&lt;/h2&gt;

&lt;h3 id=&quot;新特性&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;添加powershell色彩主题用于powershell终端下背景色显示&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake --dry-run -v&lt;/code&gt;命令去空运行构建，仅仅为了查看详细的构建命令&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/712&quot;&gt;#712&lt;/a&gt;: 添加sdcc平台，并且支持sdcc编译器&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;改进&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/589&quot;&gt;#589&lt;/a&gt;: 改进优化构建速度，支持跨目标间并行编译和link，编译速度和ninja基本持平&lt;/li&gt;
  &lt;li&gt;改进ninja/cmake工程文件生成器插件&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/728&quot;&gt;#728&lt;/a&gt;: 改进os.cp支持保留源目录结构层级的递归复制&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/732&quot;&gt;#732&lt;/a&gt;: 改进find_package支持查找homebrew/cmake安装的包&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/695&quot;&gt;#695&lt;/a&gt;: 改进采用android ndk最新的abi命名&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs修复&quot;&gt;Bugs修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;修复windows下link error显示问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/718&quot;&gt;#718&lt;/a&gt;: 修复依赖包下载在多镜像时一定概率缓存失效问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/722&quot;&gt;#722&lt;/a&gt;: 修复无效的包依赖导致安装死循环问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/719&quot;&gt;#719&lt;/a&gt;: 修复windows下主进程收到ctrlc后，.bat子进程没能立即退出的问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/720&quot;&gt;#720&lt;/a&gt;: 修复compile_commands生成器的路径转义问题&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 28 Mar 2020 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2020/03/28/xmake-update-v2.3.2/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2020/03/28/xmake-update-v2.3.2/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>ninja</category>
        
        <category>并行构建</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>tbox v1.6.5 released, Improve coroutine scheduling support</title>
        <description>&lt;p&gt;There are not many changes in functions and features in this version. The main improvement is the scheduling module of the coroutine, which enables unified scheduling support for the three objects: process, socket, and pipe. We can operate processes in the coroutine at the same time. There are pipes.&lt;/p&gt;

&lt;p&gt;This relies on the poller module provided by tbox, which uniformly encapsulates interfaces such as epoll/kqueue/select/poll/iocp to achieve cross-platform wait for socket/pipe object events. By providing consistent reactors, unified dispatching in coroutines is achieved. .&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/tbox&quot;&gt;Github Repo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tboox.io/&quot;&gt;Online documents&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, poller also adds support for waiting for process events. You can also wait for the exit event of the process at the same time through the same wait interface. Actually, there are still a lot of things about this.&lt;/p&gt;

&lt;p&gt;E.g:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On windows, thread + WaitForMultipleObjects is used to connect to poller&lt;/li&gt;
  &lt;li&gt;On unix, thread/waitpid to docker to poller&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The relevant poller interfaces mainly include the following four, where object can be a process/pipe/socket object, and then set the corresponding event to wait at the same time.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tb_bool_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_poller_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_object_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_cpointer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tb_bool_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_poller_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_object_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tb_bool_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_modify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_poller_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_object_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_cpointer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tb_long_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_poller_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;tb_poller_event_func_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_long_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/tbox/issues/112&quot;&gt;#112&lt;/a&gt;: Support unix socket，thanks &lt;a href=&quot;https://github.com/codehz&quot;&gt;@Codehz&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Support to wait pipe, socket and process in coroutine and poller at same time&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;improve uuid and improve uuid v4&lt;/li&gt;
  &lt;li&gt;support msys/mingw and cygwin/gcc toolchains&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 29 Feb 2020 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2020/02/29/update-v1.6.5/</link>
        <guid isPermaLink="true">http://www.tboox.org/2020/02/29/update-v1.6.5/</guid>
        
        <category>tbox</category>
        
        <category>coroutine</category>
        
        
        <category>tbox</category>
        
      </item>
    
      <item>
        <title>tbox v1.6.5 发布，改进协程调度支持</title>
        <description>&lt;p&gt;这个版本功能和特性改动并不多，主要是改进了下协程的调度模块，实现对process, socket，pipe这三种对象间的统一调度支持，我们可以在协程中同时操作进程，socket还有管道。&lt;/p&gt;

&lt;p&gt;这有赖于tbox提供的poller模块，统一封装了对epoll/kqueue/select/poll/iocp等接口，实现跨平台的等待socket/pipe对象事件，通过提供一致的reactor，实现了在协程中统一调度。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/tbox&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tboox.io/#/zh-cn/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外，poller还对进程事件的等待也加上了支持，可以通过相同的wait接口同时对process的退出事件进行等待，关于这块内部其实还是做了很多事的。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;win上通过thread+WaitForMultipleObjects的方式来对接到poller&lt;/li&gt;
  &lt;li&gt;unix上通过thread/waitpid的方式来对接到poller&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;相关poller接口主要有下面四个，其中object可以是process/pipe/socket对象，然后设置上对应的事件就可以去同时wait了。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tb_bool_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_poller_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_object_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_cpointer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tb_bool_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_poller_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_object_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tb_bool_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_modify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_poller_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_object_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_cpointer_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tb_long_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_poller_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_poller_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;tb_poller_event_func_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_long_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;新特性&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/tbox/issues/112&quot;&gt;#112&lt;/a&gt;: 新增unix socket支持，感谢&lt;a href=&quot;https://github.com/codehz&quot;&gt;@Codehz&lt;/a&gt;的贡献&lt;/li&gt;
  &lt;li&gt;在协程和poller中支持同时等待和调度socket，pipe io和process&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;改进&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;改进uuid生成，实现uuid v4&lt;/li&gt;
  &lt;li&gt;支持msys/mingw和cygwin/gcc上编译&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 29 Feb 2020 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2020/02/29/update-v1.6.5/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2020/02/29/update-v1.6.5/</guid>
        
        <category>tbox</category>
        
        <category>协程</category>
        
        
        <category>tbox</category>
        
      </item>
    
      <item>
        <title>xmake v2.3.1 released, Seamless integration with other build systems</title>
        <description>&lt;p&gt;In the past two months, I have made a lot of refactorings to improve xmake and added a lot of useful new features. Welcome to try it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Project Source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/&quot;&gt;Official Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some new features:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Compile other projects maintained by the build system with one click to achieve seamless docking and support cross compilation (such as fast cross compilation of autotools, see details below)&lt;/li&gt;
  &lt;li&gt;Added &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake project -k ninja&lt;/code&gt; project generation plugin to support generation of build.ninja build system files&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some improvements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Improve command line parameter input, support *nix style parameter input, thanks &lt;a href=&quot;https://github.com/OpportunityLiu&quot;&gt;@OpportunityLiu&lt;/a&gt; for contribution&lt;/li&gt;
  &lt;li&gt;Improve tab command completion, add command completion support for parameter values&lt;/li&gt;
  &lt;li&gt;Optimize get.sh installation and xmake update update scripts, add domestic mirror source, speed up download and install updates&lt;/li&gt;
  &lt;li&gt;gcc/clang compilation error output support native color highlighting support&lt;/li&gt;
  &lt;li&gt;Added msys/cygwin platform, and xmake source code also supports msys/mingw platform compilation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some invisible improvements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add socket and pipe modules and improve the process module&lt;/li&gt;
  &lt;li&gt;Refactor the whole process scheduler, better scheduling and parallel construction&lt;/li&gt;
  &lt;li&gt;Refactoring and improving the entire coroutine coroutine module, supporting simultaneous scheduling support for socket/pipe/process (preparing for subsequent remote compilation and distributed compilation)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are also some scattered bug fixes, see updates below.&lt;/p&gt;

&lt;h2 id=&quot;introduction-of-new-features&quot;&gt;Introduction of new features&lt;/h2&gt;

&lt;h3 id=&quot;generate-buildninja-build-file&quot;&gt;Generate build.ninja build file&lt;/h3&gt;

&lt;p&gt;xmake now supports the generation of ninja build files, allowing users to use ninja to quickly build projects maintained by xmake. I have to admit that in terms of build speed, ninja is indeed much faster than xmake. I will try to optimize the build speed of xmake in subsequent versions.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake project -k ninja
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then call ninja to build:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ninja
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or use the xmake command directly to call the ninja build, see below.&lt;/p&gt;

&lt;h3 id=&quot;try-building-with-another-build-system&quot;&gt;Try building with another build system&lt;/h3&gt;

&lt;p&gt;xmake v2.3.1 and above directly interface with other third-party build systems. Even if other projects do not use xmake.lua for maintenance, xmake can directly call other build tools to complete the compilation.&lt;/p&gt;

&lt;p&gt;Then the user can directly use a third-party build tool to compile, so why use xmake to call it? The main benefits are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Completely consistent behavior, simplifying the compilation process. No matter which other build system is used, you only need to execute the xmake command to compile. Users no longer need to study the different compilation processes of other tools&lt;/li&gt;
  &lt;li&gt;Docking the configuration environment of &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake config&lt;/code&gt;, reuse the platform detection and SDK environment detection of xmake, simplify the platform configuration&lt;/li&gt;
  &lt;li&gt;Docking cross-compilation environment, even for projects maintained with autotools, you can quickly cross-compile through xmake&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Build systems currently supported:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;autotools (cross-compiling environment for xmake)&lt;/li&gt;
  &lt;li&gt;xcodebuild&lt;/li&gt;
  &lt;li&gt;cmake&lt;/li&gt;
  &lt;li&gt;make&lt;/li&gt;
  &lt;li&gt;msbuild&lt;/li&gt;
  &lt;li&gt;scons&lt;/li&gt;
  &lt;li&gt;meson&lt;/li&gt;
  &lt;li&gt;bazel&lt;/li&gt;
  &lt;li&gt;ndkbuild&lt;/li&gt;
  &lt;li&gt;ninja&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;automatically-detect-build-system-and-compile&quot;&gt;Automatically detect build system and compile&lt;/h4&gt;

&lt;p&gt;For example, for a project maintained using cmake, executing xmake directly in the project root directory will automatically trigger a detection mechanism, detect CMakeLists.txt, and then prompt the user if cmake is needed to continue compiling.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake 
note: CMakeLists.txt found, try building it &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass -y or --confirm&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;y/n/d to skip confirm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;?
please input: y &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- Symbol prefix:
-- Configuring &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
-- Generating &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
-- Build files have been written to:/Users/ruki/Downloads/libpng-1.6.35/build
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  7%] Built target png-fix-itxt
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 21%] Built target genfiles
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 81%] Built target png
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 83%] Built target png_static
...
output to/Users/ruki/Downloads/libpng-1.6.35/build/artifacts
build ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;seamless-using-xmake-command&quot;&gt;Seamless using xmake command&lt;/h4&gt;

&lt;p&gt;Currently supports common commands such as &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake clean&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt; xmake --rebuild&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake config&lt;/code&gt; to seamlessly interface with third-party systems.&lt;/p&gt;

&lt;p&gt;We can directly clean the compiled output files of the cmake maintenance project&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake clean
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake clean --all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you bring &lt;code class=&quot;highlighter-rouge&quot;&gt;--all&lt;/code&gt; to perform the cleanup, all files generated by autotools/cmake will be cleared, not only the object files.&lt;/p&gt;

&lt;p&gt;The default &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake&lt;/code&gt; is docked with incremental build behavior, but we can also force a quick rebuild:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake --rebuild
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;manually-switch-the-specified-build-system&quot;&gt;Manually switch the specified build system&lt;/h4&gt;

&lt;p&gt;If there are multiple build systems under maintenance in a project, such as the libpng project, which comes with autotools/cmake/makefile and other build system maintenance, xmake defaults to using autotools by default. If you want to force switch to other build systems, you can execute:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=[&lt;/span&gt;autotools|cmake|make|msbuild|..]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In addition, the &lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=&lt;/code&gt; parameter is configured to manually specify the default build system, and the subsequent build process will not prompt the user for selection.&lt;/p&gt;

&lt;h4 id=&quot;fastly-cross-compile&quot;&gt;Fastly cross compile&lt;/h4&gt;

&lt;p&gt;As we all know, although many projects maintained by autotools support cross-compilation, the configuration process of cross-compilation is very complicated. There are still many differences in different toolchain processing methods, and many pits will be stepped in the middle.&lt;/p&gt;

&lt;p&gt;Even if you run through a toolchain’s cross-compilation, if you switch to another toolchain environment, it may take a long time, and if you use xmake, you usually only need two simple commands:&lt;/p&gt;

&lt;p&gt;!&amp;gt; At present autotools supports cross-compilation of xmake, and other build systems such as cmake will be added later.&lt;/p&gt;

&lt;h5 id=&quot;cross-compile-android-platform&quot;&gt;Cross compile android platform&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p android --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--ndk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;!&amp;gt; Among them, the –ndk parameter configuration is optional. If the user sets the ANDROID_NDK_HOME environment variable, or if the ndk is placed in ~/Library/Android/sdk/ndk-bundle, xmake can automatically detect it.&lt;/p&gt;

&lt;p&gt;Is not it simple? If you think this is not much, then you can directly operate &lt;code class=&quot;highlighter-rouge&quot;&gt;./configure&lt;/code&gt; to configure cross-compilation. You can see this document for comparison: [Using NDK with other compilation systems] (https://developer.android .com/ndk/guides/other_build_systems # autoconf)&lt;/p&gt;

&lt;p&gt;To put it bluntly, you probably have to do this, you may not be able to do it once:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TOOLCHAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NDK&lt;/span&gt;/toolchains/llvm/prebuilt/&lt;span class=&quot;nv&quot;&gt;$HOST_TAG&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-ar
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-as
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android21-clang
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CXX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android21-clang++
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-ld
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RANLIB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-ranlib
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;STRIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-strip
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./configure --host aarch64-linux-android
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;cross-compile-iphoneos-platform&quot;&gt;Cross compile iphoneos platform&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p iphoneos --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;cross-compile-mingw-platform&quot;&gt;Cross-compile mingw platform&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p mingw --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--mingw&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;using-other-cross-compilation-toolchains&quot;&gt;Using other cross-compilation toolchains&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p cross --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools --sdk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/xxxx
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For more cross compilation configuration details, please refer to the document: &lt;a href=&quot;https://xmake.io/#/guide/configuration?id=cross-compilation&quot;&gt;Cross Compilation&lt;/a&gt;, except for an additional &lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=&lt;/code&gt; parameter, all other cross-compilation configuration parameters are completely universal.&lt;/p&gt;

&lt;h4 id=&quot;passing-user-configuration-parameters&quot;&gt;Passing user configuration parameters&lt;/h4&gt;

&lt;p&gt;We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;--tryconfigs=&lt;/code&gt; to pass additional configuration parameters of the user to the corresponding third-party build system. For example: autotools will be passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;. / Configure&lt;/code&gt;, cmake will be passed to the&lt;code class=&quot;highlighter-rouge&quot;&gt; cmake&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools --tryconfigs&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-enable-shared=no&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For example, the above command, pass &lt;code class=&quot;highlighter-rouge&quot;&gt;--enable-shared=no&lt;/code&gt; to&lt;code class=&quot;highlighter-rouge&quot;&gt;./configure&lt;/code&gt; to disable dynamic library compilation.&lt;/p&gt;

&lt;p&gt;In addition, for &lt;code class=&quot;highlighter-rouge&quot;&gt;--cflags&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt; --includedirs&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;--ldflags&lt;/code&gt;, you don’t need to pass&lt;code class=&quot;highlighter-rouge&quot;&gt; --tryconfigs&lt;/code&gt;, you can pass the built-in parameters like &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake config --cflags=&lt;/code&gt; to pass through.&lt;/p&gt;

&lt;h4 id=&quot;examples-of-compiling-other-build-system&quot;&gt;Examples of compiling other build system&lt;/h4&gt;

&lt;h5 id=&quot;general-compilation&quot;&gt;General Compilation&lt;/h5&gt;

&lt;p&gt;In most cases, the compilation method after each docking system is consistent, except for the &lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=&lt;/code&gt; configuration parameter.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=[&lt;/span&gt;autotools|cmake|meson|ninja|bazel|make|msbuild|xcodebuild]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;!&amp;gt; We also need to make sure that the build tool specified by –trybuild is installed and working properly.&lt;/p&gt;

&lt;h5 id=&quot;building-android-jni-programs&quot;&gt;Building Android jni programs&lt;/h5&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;jni/Android.mk&lt;/code&gt; exists in the current project, then xmake can directly call ndk-build to build the jni library.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p android --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ndkbuild &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--ndk &lt;span class=&quot;o&quot;&gt;=]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;nix-style-command-parameter-input&quot;&gt;*nix style command parameter input&lt;/h3&gt;

&lt;p&gt;The current input specification is referenced from: &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html&quot;&gt;https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you very much &lt;a href=&quot;https://github.com/OpportunityLiu&quot;&gt;@OpportunityLiu&lt;/a&gt; for your contribution. The current input method can support the following writing:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake -j8 -rvD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Before, I could only write:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake -j 8 -r -v -D
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tab-command-completion&quot;&gt;Tab command completion&lt;/h3&gt;

&lt;p&gt;In previous versions, only parameter names could be completed. You can now complete the parameter values and prompt the value list. For example, after typing the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --plat &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; and
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Press the tab key to complete the platform parameters and become&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --plat &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; android
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;force-c-code-to-be-compiled-as-c-&quot;&gt;Force C code to be compiled as C ++&lt;/h3&gt;

&lt;p&gt;xmake adds a configuration parameter that specifies the type of source file and forces it to compile as a corresponding source file, such as compiling c code as c ++.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcekind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/675&quot;&gt;#675&lt;/a&gt;: Support to compile &lt;code class=&quot;highlighter-rouge&quot;&gt;*.c&lt;/code&gt; as c++, &lt;code class=&quot;highlighter-rouge&quot;&gt;add_files(&quot;*.c&quot;, {sourcekind = &quot;cxx&quot;})&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/681&quot;&gt;#681&lt;/a&gt;: Support compile xmake on msys/cygwin and add msys/cygwin platform&lt;/li&gt;
  &lt;li&gt;Add socket/pipe io modules and support to schedule socket/process/pipe in coroutine&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/192&quot;&gt;#192&lt;/a&gt;: Try building project with the third-party buildsystem&lt;/li&gt;
  &lt;li&gt;Enable color diagnostics output for gcc/clang&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/588&quot;&gt;#588&lt;/a&gt;: Improve project generator, &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake project -k ninja&lt;/code&gt;, support for build.ninja&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;change&quot;&gt;Change&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/665&quot;&gt;#665&lt;/a&gt;: Support to parse *nix style command options, thanks &lt;a href=&quot;https://github.com/OpportunityLiu&quot;&gt;@OpportunityLiu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/673&quot;&gt;#673&lt;/a&gt;: Improve tab complete to support argument values&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/680&quot;&gt;#680&lt;/a&gt;: Improve get.sh scripts and add download mirrors&lt;/li&gt;
  &lt;li&gt;Improve process scheduler&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/651&quot;&gt;#651&lt;/a&gt;: Improve os/io module syserrors tips&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Fix incremental compilation for checking the dependent file&lt;/li&gt;
  &lt;li&gt;Fix log output for parsing xmake-vscode/problem info&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/684&quot;&gt;#684&lt;/a&gt;: Fix linker errors for android ndk on windows&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 23 Feb 2020 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2020/02/23/xmake-update-v2.3.1/</link>
        <guid isPermaLink="true">http://www.tboox.org/2020/02/23/xmake-update-v2.3.1/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>autotools</category>
        
        <category>cmake</category>
        
        <category>ninja</category>
        
        <category>mingw</category>
        
        <category>msys</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.3.1 发布, 无缝对接其他构建系统</title>
        <description>&lt;p&gt;最近对xmake内部做了不少的重构来改进，并且新增了不少实用的新特性，欢迎来体验。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一些新特性：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;一键编译其他构建系统维护的项目，实现无缝对接，并且支持交叉编译（比如autotools的快速交叉编译，见下文详述）&lt;/li&gt;
  &lt;li&gt;新增&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake project -k ninja&lt;/code&gt;工程生成插件，支持对build.ninja构建系统文件的生成&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一些改进点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;改进命令行参数输入，支持*nix style的参数输入，感谢&lt;a href=&quot;https://github.com/OpportunityLiu&quot;&gt;@OpportunityLiu&lt;/a&gt;的贡献&lt;/li&gt;
  &lt;li&gt;改进tab命令补全，增加对参数values的命令补全支持&lt;/li&gt;
  &lt;li&gt;优化get.sh安装和xmake update更新脚本，添加国内镜像源，加速下载和安装更新&lt;/li&gt;
  &lt;li&gt;gcc/clang编译错误输出支持原生色彩高亮支持&lt;/li&gt;
  &lt;li&gt;新增msys/cygwin平台，并且xmake源码也支持msys/mingw平台编译&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一些看不见的改进点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;添加socket, pipe模块，改进process模块&lt;/li&gt;
  &lt;li&gt;重构整个进程调度器，更好的调度并行构建&lt;/li&gt;
  &lt;li&gt;重构改进整个coroutine协程模块，支持对socket/pipe/process三者的同时调度支持（为后续远程编译和分布式编译做准备）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;还有一些零散的bug修复，见下文更新内容。&lt;/p&gt;

&lt;h2 id=&quot;新特性介绍&quot;&gt;新特性介绍&lt;/h2&gt;

&lt;h3 id=&quot;生成buildninja构建文件&quot;&gt;生成build.ninja构建文件&lt;/h3&gt;

&lt;p&gt;xmake现已支持对ninja构建文件的生成，让用户可以使用ninja来快速构建xmake维护的项目。不得不承认，目前就构建速度来讲，ninja确实比xmake快不少，后续版本我会尝试优化下xmake的构建速度。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake project -k ninja
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后调用ninja来构建：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ninja
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;或者直接使用xmake命令来调用ninja构建，见下文。&lt;/p&gt;

&lt;h3 id=&quot;尝试使用其他构建系统构建&quot;&gt;尝试使用其他构建系统构建&lt;/h3&gt;

&lt;p&gt;xmake v2.3.1以上版本直接对接了其他第三方构建系统，即使其他项目中没有使用xmake.lua来维护，xmake也可以直接调用其他构建工具来完成编译。&lt;/p&gt;

&lt;p&gt;那用户直接调用使用第三方构建工具来编译不就行了，为啥还要用xmake去调用呢？主要有以下好处：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;完全的行为一致，简化编译流程，不管用了哪个其他构建系统，都只需要执行xmake这个命令就可以编译，用户不再需要去研究其他工具的不同的编译流程&lt;/li&gt;
  &lt;li&gt;完全对接&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake config&lt;/code&gt;的配置环境，复用xmake的平台探测和sdk环境检测，简化平台配置&lt;/li&gt;
  &lt;li&gt;对接交叉编译环境，即使是用autotools维护的项目，也能通过xmake快速实现交叉编译&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;目前已支持的构建系统：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;autotools（已完全对接xmake的交叉编译环境）&lt;/li&gt;
  &lt;li&gt;xcodebuild&lt;/li&gt;
  &lt;li&gt;cmake&lt;/li&gt;
  &lt;li&gt;make&lt;/li&gt;
  &lt;li&gt;msbuild&lt;/li&gt;
  &lt;li&gt;scons&lt;/li&gt;
  &lt;li&gt;meson&lt;/li&gt;
  &lt;li&gt;bazel&lt;/li&gt;
  &lt;li&gt;ndkbuild&lt;/li&gt;
  &lt;li&gt;ninja&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;自动探测构建系统并编译&quot;&gt;自动探测构建系统并编译&lt;/h4&gt;

&lt;p&gt;例如，对于一个使用cmake维护的项目，直接在项目根目录执行xmake，就会自动触发探测机制，检测到CMakeLists.txt，然后提示用户是否需要使用cmake来继续完成编译。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake 
note: CMakeLists.txt found, try building it &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass -y or --confirm&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;y/n/d to skip confirm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;?
please input: y &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- Symbol prefix:
-- Configuring &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
-- Generating &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
-- Build files have been written to: /Users/ruki/Downloads/libpng-1.6.35/build
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  7%] Built target png-fix-itxt
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 21%] Built target genfiles
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 81%] Built target png
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 83%] Built target png_static
...
output to /Users/ruki/Downloads/libpng-1.6.35/build/artifacts
build ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;无缝对接xmake命令&quot;&gt;无缝对接xmake命令&lt;/h4&gt;

&lt;p&gt;目前支持&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake clean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake --rebuild&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake config&lt;/code&gt;等常用命令与第三方系统的无缝对接。&lt;/p&gt;

&lt;p&gt;我们可以直接清理cmake维护项目的编译输出文件&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake clean
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake clean --all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果带上&lt;code class=&quot;highlighter-rouge&quot;&gt;--all&lt;/code&gt;执行清理，会清除autotools/cmake生成的所有文件，不仅仅只清理对象文件。&lt;/p&gt;

&lt;p&gt;默认&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake&lt;/code&gt;对接的是增量构建行为，不过我们也可以强制快速重建：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake --rebuild
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;手动切换指定构建系统&quot;&gt;手动切换指定构建系统&lt;/h4&gt;

&lt;p&gt;如果一个项目下有多个构建系统同时在维护，比如libpng项目，自带autotools/cmake/makefile等构建系统维护，xmake默认优先探测使用了autotools，如果想要强制切换其他构建系统，可以执行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=[&lt;/span&gt;autotools|cmake|make|msbuild| ..]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;另外，配置了&lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=&lt;/code&gt;参数手动指定了默认的构建系统，后续的build过程就不会额外提示用户选择了。&lt;/p&gt;

&lt;h4 id=&quot;实现快速交叉编译&quot;&gt;实现快速交叉编译&lt;/h4&gt;

&lt;p&gt;众所周知，autotools维护的项目虽然很多都支持交叉编译，但是交叉编译的配置过程很复杂，不同的工具链处理方式还有很多的差异，中途会踩到很多的坑。&lt;/p&gt;

&lt;p&gt;即使跑通了一个工具链的交叉编译，如果切到另外一个工具链环境，可能又要折腾好久，而如果使用xmake，通常只需要两条简单的命令即可：&lt;/p&gt;

&lt;p&gt;!&amp;gt; 目前就autotools对接支持了xmake的交叉编译，后期还会对cmake等其他构建系统加上支持。&lt;/p&gt;

&lt;h5 id=&quot;交叉编译android平台&quot;&gt;交叉编译android平台&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p android --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--ndk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;!&amp;gt; 其中，–ndk参数配置是可选的，如果用户设置了ANDROID_NDK_HOME环境变量，或者ndk放置在~/Library/Android/sdk/ndk-bundle，xmake都能自动检测到。&lt;/p&gt;

&lt;p&gt;是不是很简单？如果你觉得这没啥，那么可以对比下直接操作&lt;code class=&quot;highlighter-rouge&quot;&gt;./configure&lt;/code&gt;去配置交叉编译，可以看下这篇文档对比下：&lt;a href=&quot;https://developer.android.com/ndk/guides/other_build_systems#autoconf&quot;&gt;将NDK 与其他编译系统配合使用&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;说白了，你大概得这样，还不一定一次就能搞定：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TOOLCHAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NDK&lt;/span&gt;/toolchains/llvm/prebuilt/&lt;span class=&quot;nv&quot;&gt;$HOST_TAG&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-ar
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-as
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android21-clang
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CXX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android21-clang++
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-ld
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RANLIB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-ranlib
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;STRIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TOOLCHAIN&lt;/span&gt;/bin/aarch64-linux-android-strip
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./configure --host aarch64-linux-android
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;交叉编译iphoneos平台&quot;&gt;交叉编译iphoneos平台&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p iphoneos --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;交叉编译mingw平台&quot;&gt;交叉编译mingw平台&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p mingw --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--mingw&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;使用其他交叉编译工具链&quot;&gt;使用其他交叉编译工具链&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p cross --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools --sdk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/xxxx
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;关于更多交叉编译的配置细节，请参考文档：&lt;a href=&quot;https://xmake.io/#/zh-cn/guide/configuration?id=%e4%ba%a4%e5%8f%89%e7%bc%96%e8%af%91&quot;&gt;交叉编译&lt;/a&gt;，除了多了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=&lt;/code&gt;参数，其他交叉编译配置参数都是完全通用的。&lt;/p&gt;

&lt;h4 id=&quot;传递用户配置参数&quot;&gt;传递用户配置参数&lt;/h4&gt;

&lt;p&gt;我们可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;--tryconfigs=&lt;/code&gt;来传递用户额外的配置参数到对应的第三方构建系统，比如：autotools会传递给&lt;code class=&quot;highlighter-rouge&quot;&gt;./configure&lt;/code&gt;，cmake会传递给&lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt;命令。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;autotools --tryconfigs&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--enable-shared=no&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;比如上述命令，传递&lt;code class=&quot;highlighter-rouge&quot;&gt;--enable-shared=no&lt;/code&gt;给&lt;code class=&quot;highlighter-rouge&quot;&gt;./configure&lt;/code&gt;，来禁用动态库编译。&lt;/p&gt;

&lt;p&gt;另外，对于&lt;code class=&quot;highlighter-rouge&quot;&gt;--cflags&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--includedirs&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;--ldflags&lt;/code&gt;等参数，不需要通过&lt;code class=&quot;highlighter-rouge&quot;&gt;--tryconfigs&lt;/code&gt;，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake config --cflags=&lt;/code&gt;等内置参数就可透传过去。&lt;/p&gt;

&lt;h4 id=&quot;编译其他构建系统过程示例&quot;&gt;编译其他构建系统过程示例&lt;/h4&gt;

&lt;h5 id=&quot;通用编译方式&quot;&gt;通用编译方式&lt;/h5&gt;

&lt;p&gt;大多数情况下，每个构建系统对接后的编译方式都是一致的，除了&lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=&lt;/code&gt;配置参数除外。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=[&lt;/span&gt;autotools|cmake|meson|ninja|bazel|make|msbuild|xcodebuild]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;!&amp;gt; 我们还需要确保–trybuild指定的构建工具已经安装能够正常使用。&lt;/p&gt;

&lt;h5 id=&quot;构建android-jni程序&quot;&gt;构建Android jni程序&lt;/h5&gt;

&lt;p&gt;如果当前项目下存在&lt;code class=&quot;highlighter-rouge&quot;&gt;jni/Android.mk&lt;/code&gt;，那么xmake可以直接调用ndk-build来构建jni库。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p android --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ndkbuild &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;--ndk&lt;span class=&quot;o&quot;&gt;=]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;nix-style命令参数输入&quot;&gt;*nix style命令参数输入&lt;/h3&gt;

&lt;p&gt;目前的输入规范参考自：&lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html&quot;&gt;https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;也非常感谢&lt;a href=&quot;https://github.com/OpportunityLiu&quot;&gt;@OpportunityLiu&lt;/a&gt;的贡献，现在的输入方式，可以支持采用如下写法：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake -j8 -rvD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;之前只能这么写：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake -j 8 -r -v -D
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tab命令自动补全&quot;&gt;tab命令自动补全&lt;/h3&gt;

&lt;p&gt;之前的版本，只能对参数名进行补全，现在可以对参数值进行补全和值列表提示，比如敲如下命令后：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --plat&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;and
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;按tab键就可以补全platform参数，变成&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --plat&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;android
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;强制将c代码作为c编译&quot;&gt;强制将c代码作为c++编译&lt;/h3&gt;

&lt;p&gt;xmake新增一个配置参数，可以指定源文件的类型，强制作为对应的源文件来编译，比如将c代码作为c++来编译。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcekind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;更新内容&quot;&gt;更新内容&lt;/h2&gt;

&lt;h3 id=&quot;新特性&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/675&quot;&gt;#675&lt;/a&gt;: 支持通过设置强制将&lt;code class=&quot;highlighter-rouge&quot;&gt;*.c&lt;/code&gt;作为c++代码编译, &lt;code class=&quot;highlighter-rouge&quot;&gt;add_files(&quot;*.c&quot;, {sourcekind = &quot;cxx&quot;})&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/681&quot;&gt;#681&lt;/a&gt;: 支持在msys/cygwin上编译xmake，以及添加msys/cygwin编译平台&lt;/li&gt;
  &lt;li&gt;添加socket/pipe模块，并且支持在协程中同时调度process/socket/pipe&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/192&quot;&gt;#192&lt;/a&gt;: 尝试构建带有第三方构建系统的项目，还支持autotools项目的交叉编译&lt;/li&gt;
  &lt;li&gt;启用gcc/clang的编译错误色彩高亮输出&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/588&quot;&gt;#588&lt;/a&gt;: 改进工程生成插件&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake project -k ninja&lt;/code&gt;，增加对build.ninja生成支持&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;改进&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/665&quot;&gt;#665&lt;/a&gt;: 支持 *nix style 的参数输入，感谢&lt;a href=&quot;https://github.com/OpportunityLiu&quot;&gt;@OpportunityLiu&lt;/a&gt;的贡献&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/673&quot;&gt;#673&lt;/a&gt;: 改进tab命令补全，增加对参数values的补全支持&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/680&quot;&gt;#680&lt;/a&gt;: 优化get.sh安装脚本，添加国内镜像源，加速下载&lt;/li&gt;
  &lt;li&gt;改进process调度器&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/651&quot;&gt;#651&lt;/a&gt;: 改进os/io模块系统操作错误提示&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs修复&quot;&gt;Bugs修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;修复增量编译检测依赖文件的一些问题&lt;/li&gt;
  &lt;li&gt;修复log输出导致xmake-vscode插件解析编译错误信息失败问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/684&quot;&gt;#684&lt;/a&gt;: 修复windows下android ndk的一些linker错误&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 23 Feb 2020 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2020/02/23/xmake-update-v2.3.1/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2020/02/23/xmake-update-v2.3.1/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>autotools</category>
        
        <category>cmake</category>
        
        <category>ninja</category>
        
        <category>mingw</category>
        
        <category>msys</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>TBOOX开源工程2019总结和明年规划</title>
        <description>&lt;p&gt;今年一年总体还是有不少收获的，尤其是&lt;a href=&quot;https://xmake.io&quot;&gt;xmake&lt;/a&gt;，今年大部分时间都花在这个项目上面，总共发了5个大版本，大小特性改动不下百处，新增1000多次commit，处理issues超过300个。&lt;/p&gt;

&lt;p&gt;不过&lt;a href=&quot;https://github.com/tboox/tbox&quot;&gt;tbox&lt;/a&gt;也陆陆续续做了一些更新，还是有不少改进的地方。&lt;/p&gt;

&lt;p&gt;关于今年整体的项目进展，这边也做个简单的总结吧，这里主要总结一些比较大的特性改进，一些零散的小模块改动就不一一列举了。&lt;/p&gt;

&lt;h3 id=&quot;完成了远程包依赖管理&quot;&gt;完成了远程包依赖管理&lt;/h3&gt;

&lt;p&gt;这也是是今年最大的收获了，毕竟陆陆续续耗时了将近一年时间，虽然还有不少需要改进的地方，自建的包仓库也还不是很丰富，明年我会继续去完善它。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;libuv master&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ffmpeg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;zlib 1.20.*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tbox &amp;gt;1.6.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;libuv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ffmpeg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tbox&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;zlib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://xmake.io/assets/img/index/package_arch.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;新增vsxmake生成插件&quot;&gt;新增vsxmake生成插件&lt;/h3&gt;

&lt;p&gt;新版本xmake重新实现了一个vs工程的生成插件（非常感谢@OpportunityLiu的贡献），跟之前的生成vs的插件处理模式上有很大的不同，原先生成的vs工程是把所有源文件展开后，转交给vs来处理编译。&lt;/p&gt;

&lt;p&gt;但是像rules和自定义脚本这种是没法支持的，因为xmake的rules里面用了很多的on_build此类自定义脚本，无法展开，所以像qt， wdk此类的项目就没法支持导出到vs里面进行编译了。&lt;/p&gt;

&lt;p&gt;因此，为了解决这个问题，新版本的vs生成插件通过在vs下直接调用xmake命令，去执行编译操作，并且对intellsence和定义跳转，还有断点调试也做了支持。&lt;/p&gt;

&lt;p&gt;具体使用方式跟老版本类似：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake project -k &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vsxmake2010|vsxmake2013|vsxmake2015|..] -m &lt;span class=&quot;s2&quot;&gt;&quot;debug;release&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://xmake.io/assets/img/manual/qt_vs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;上线了新版的文档站点&quot;&gt;上线了新版的文档站点&lt;/h3&gt;

&lt;p&gt;由于之前的docute文档站仅支持单页markdown，随着文档的不断增多，维护起来越来越臃肿，因此今年我整体切到了docsify来管理。&lt;/p&gt;

&lt;p&gt;文档站点：&lt;a href=&quot;https://xmake.io/#/zh-cn/&quot;&gt;https://xmake.io/#/zh-cn/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-docs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;xmake日活用户翻了10倍&quot;&gt;xmake日活用户翻了10倍&lt;/h3&gt;

&lt;p&gt;其实也就只有50多个日活用户（比较惨 = =），不过相比去年每天仅仅只有5个独立用户在使用xmake来构建，今年算是有了不少起色，借助github traffics的粗略统计，每天有超过50个用户在使用xmake来构建自己的项目，每天构建的项目数超过100个。&lt;/p&gt;

&lt;p&gt;明年继续，哈哈~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-stats-2019.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;github-star数也增长了不少&quot;&gt;github star数也增长了不少&lt;/h3&gt;

&lt;p&gt;毕竟是冷门项目，受众很小，今年tbox和xmake都涨了1k多我已经知足了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/star-history-2019.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;一些使用了xmake的开源项目&quot;&gt;一些使用了xmake的开源项目&lt;/h3&gt;

&lt;p&gt;今年也有了一些知名的第三方开源项目使用了xmake来维护构建，主要有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/acl-dev/acl&quot;&gt;libacl&lt;/a&gt;: An advanced C/C++ Network library&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/acl-dev/libfiber&quot;&gt;libfiber&lt;/a&gt;: The high performance coroutine library for Linux/FreeBSD/Windows, supporting select/poll/epoll/kqueue/iocp/windows GUI&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/idealvin/co&quot;&gt;co&lt;/a&gt;: An elegant and efficient C++ basic library for Linux, Windows and Mac.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fasiondog/hikyuu&quot;&gt;hikyuu&lt;/a&gt;: Hikyuu Quant Framework 基于C++/Python的开源量化交易研究框架&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lc-ui/lcui.css&quot;&gt;LCUI.css&lt;/a&gt;: A UI component framework for building LCUI application.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lc-soft/LC-Finder&quot;&gt;LC-Finder&lt;/a&gt;: A simple pciture resource manager, support tag search and thumbnail preview.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里有个项目列表，里面是我收集到一些使用了xmake的项目：&lt;a href=&quot;https://github.com/xmake-io/awesome-xmake#projects&quot;&gt;https://github.com/xmake-io/awesome-xmake#projects&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;明年xmake相关的一些计划&quot;&gt;明年xmake相关的一些计划&lt;/h3&gt;

&lt;p&gt;明年的重点主要是在远程编译和分布式编译上，为此最近我正在改进tbox的协程支持，并且正在对xmake的lua协程做进一步封装，实现对pipe，socket和process的统一调度支持，为后续的远程编译做准备。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;实现跨平台的远程编译&lt;/li&gt;
  &lt;li&gt;实现跨平台的分布式编译&lt;/li&gt;
  &lt;li&gt;继续完善xmake与编辑器/IDE的集成&lt;/li&gt;
  &lt;li&gt;完善远程依赖包管理，自建仓库增加更多常用依赖包&lt;/li&gt;
  &lt;li&gt;继续封装lua的io协程调度模块，实现对pipe，socket和process的统一调度支持&lt;/li&gt;
  &lt;li&gt;提供对xcode工程的生成插件&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;tbox的一些特性改进&quot;&gt;tbox的一些特性改进&lt;/h3&gt;

&lt;p&gt;今年没花太多时间在tbox上面，总共也就发了一个版本，大部分特性改动主要还是服务于xmake，例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;添加stdfile接口去读写stdin, stdout和stderr。&lt;/li&gt;
  &lt;li&gt;添加对进程和线程的cpu亲缘性设置和获取&lt;/li&gt;
  &lt;li&gt;添加filelock文件锁跨平台api接口&lt;/li&gt;
  &lt;li&gt;添加匿名管道，命名管道支持&lt;/li&gt;
  &lt;li&gt;改进字符集编码转换，以及增加对ANSI编码的支持&lt;/li&gt;
  &lt;li&gt;改进原子操作，并增加c11风格原子接口&lt;/li&gt;
  &lt;li&gt;新增进程输出重定向到管道&lt;/li&gt;
  &lt;li&gt;针对协程栈使用虚拟内存&lt;/li&gt;
  &lt;li&gt;改进基于openssl/mbedtls的https访问&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不过明年我会进一步改进和实现协程、网络相关的模块，提供更多实用的基础功能。&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Dec 2019 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2019/12/31/tboox-now-and-future/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2019/12/31/tboox-now-and-future/</guid>
        
        <category>tboox</category>
        
        <category>tbox</category>
        
        <category>xmake</category>
        
        
        <category>tboox</category>
        
      </item>
    
      <item>
        <title>xmake v2.2.9 released, Add experimental support for c++ 20 modules</title>
        <description>&lt;p&gt;There are not many new features in this version. It mainly supports c++ 20 modules experimentally. Currently it supports the clang/msvc compiler. In addition, it improves a lot of user experience and improves some stability.&lt;/p&gt;

&lt;p&gt;In addition, this version adds socket.io support and scheduling support for coroutine io to prepare for remote compilation of the next version and subsequent distributed compilation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Project Source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/&quot;&gt;Official Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction-of-new-features&quot;&gt;Introduction of new features&lt;/h2&gt;

&lt;h3 id=&quot;c20-modules&quot;&gt;c++20 modules&lt;/h3&gt;

&lt;p&gt;c++ modules have been officially included in the c++20 draft, and msvc and clang have been basically implemented on &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019 /p1103r3.pdf&quot;&gt;modules-ts&lt;/a&gt; Support, as c++20’s footsteps are getting closer and closer to us, xmake has also begun to support c++modules in advance.&lt;/p&gt;

&lt;p&gt;At present xmake has fully supported the implementation of the modules-ts of msvc/clang. For gcc, since its cxx-modules branch is still under development, it has not officially entered the master. I have read the changelog inside, and the related flags are still in the process. Constantly changing, I feel that it has not stabilized, so I have not supported it yet.&lt;/p&gt;

&lt;p&gt;For more information about xmake’s progress on c++modules: &lt;a href=&quot;https://github.com/xmake-io/xmake/pull/569&quot;&gt;https://github.com/xmake-io/xmake/pull/569&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;hello-module&quot;&gt;Hello Module&lt;/h4&gt;

&lt;p&gt;I will not talk about the introduction of c++modules. This is mainly about how to build a c++modules project under xmake. Let’s look at a simple example:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;src/*.mpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above is a description of the xmake.lua that supports building c++modules files, where &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.mpp&lt;/code&gt; is the module file:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;cstdio&amp;gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Main.cpp is the main program that uses the hello module:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello module!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next we execute xmake to build this program:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruki:hello ruki$ xmake
[0%]: ccache compiling.release src/hello.mpp
[50%]: ccache compiling.release src/main.cpp
[100%]: linking.release hello
build ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;xmake will handle all the details logic internally, for developers, just add the module file &lt;code class=&quot;highlighter-rouge&quot;&gt;*.mpp&lt;/code&gt; as the source file.&lt;/p&gt;

&lt;h4 id=&quot;module-interface-file&quot;&gt;Module Interface File&lt;/h4&gt;

&lt;p&gt;The above mentioned &lt;code class=&quot;highlighter-rouge&quot;&gt;*.mpp&lt;/code&gt; is the module interface file name recommended by xmake. In fact, the default suffix names of the compiler files are not uniform. clang is &lt;code class=&quot;highlighter-rouge&quot;&gt;*.cppm&lt;/code&gt;, while msvc is &lt;code class=&quot;highlighter-rouge&quot;&gt;*.ixx&lt;/code&gt;, which is very unfriendly for writing a unified module project across compilers.
Therefore, reference is made to the recommendation method in &lt;a href=&quot;https://build2.org/doc/modules-cppcon2017.pdf&quot;&gt;build2&lt;/a&gt;, and the unified &lt;code class=&quot;highlighter-rouge&quot;&gt;*.mpp&lt;/code&gt; suffix is used to standardize the command of the module project interface under xmake.&lt;/p&gt;

&lt;p&gt;Of course, this also supports xmake’s recommended naming scheme. For suffixes such as &lt;code class=&quot;highlighter-rouge&quot;&gt;*.ixx&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*.cppm&lt;/code&gt;, xmake is also fully compatible and can be added directly to &lt;code class=&quot;highlighter-rouge&quot;&gt;add_files&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;other-examples&quot;&gt;Other examples&lt;/h4&gt;

&lt;p&gt;There are also a lot of engineering examples related to c++modules built into the xmake project. Interested students can refer to the following: &lt;a href=&quot;https://github.com/xmake-io/xmake/tree/dev/tests/projects/c%2B%2B/modules&quot;&gt;c++module examples&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;set_toolchain-interface-changes&quot;&gt;set_toolchain interface changes&lt;/h3&gt;

&lt;p&gt;The set_toolchain interface is mainly used to set different compilation toolchains for the target. Versions before 2.2.9 actually have two interfaces: add_tools and set_tools to handle the same thing, but the two interfaces are named and used in accordance with the specifications. It is very consistent, so some adjustments and changes have been made, and the new set_toolchain interface is used to better set up the toolchain.&lt;/p&gt;

&lt;p&gt;For source files added by &lt;code class=&quot;highlighter-rouge&quot;&gt;add_files(&quot;*.c&quot;)&lt;/code&gt;, by default, they will call the system’s most suitable compilation tool to compile, or modify them manually by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --cc=clang&lt;/code&gt; command, but these are all Globally affects all target targets.&lt;/p&gt;

&lt;p&gt;If there are special requirements, you need to specify different compilers, linkers, or compilers of a specific version for a specific target under the current project. At this time, this interface can be used, for example:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_toolchain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$(projectdir)/tools/bin/clang-5.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above description only makes special settings for the compiler of the test2 target, using a specific clang-5.0 compiler to compile test2, and test1 still uses the default settings.&lt;/p&gt;

&lt;p&gt;For some compiler file names that are irregular and cause xmake to fail to recognize and process them as known compiler names, we can also add a tool name hint, for example:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;`lua
set_toolchain(&quot;cc&quot;, &quot;gcc@$(projectdir)/tools/bin/mipscc.exe&quot;)
&lt;/code&gt; `&lt;/p&gt;

&lt;p&gt;The above description sets mipscc.exe as the C compiler, and prompts xmake to compile as a parameter passing method for gcc.&lt;/p&gt;

&lt;h3 id=&quot;socket-io&quot;&gt;socket io&lt;/h3&gt;

&lt;p&gt;This interface has been initially implemented, supports lua coroutine io scheduling, and achieves high concurrent io reading and writing (it will also support process and pipe scheduling support at the same time). It is currently mainly used for xmake itself and is used for subsequent To prepare for remote compilation and distributed compilation, users are not allowed to use it for the time being, but it will be released after subsequent improvements. Users can also make some service programs through socket io in their plugins.&lt;/p&gt;

&lt;p&gt;However, there are not many scenarios that users may use. After all, xmake is only a build tool, and rarely allows users to do io communication by themselves.&lt;/p&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/569&quot;&gt;#569&lt;/a&gt;: Add c++ modules build rules&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake project -k xmakefile&lt;/code&gt; generator&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/620&quot;&gt;620&lt;/a&gt;: Add global &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.xmakerc.lua&lt;/code&gt; for all projects.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/593&quot;&gt;593&lt;/a&gt;: Add &lt;code class=&quot;highlighter-rouge&quot;&gt;core.base.socket&lt;/code&gt; module.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;change&quot;&gt;Change&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/563&quot;&gt;#563&lt;/a&gt;: Separate build rules for specific language files from action/build&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/570&quot;&gt;#570&lt;/a&gt;: Add &lt;code class=&quot;highlighter-rouge&quot;&gt;qt.widgetapp&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;qt.quickapp&lt;/code&gt; rules&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/576&quot;&gt;#576&lt;/a&gt;: Uses &lt;code class=&quot;highlighter-rouge&quot;&gt;set_toolchain&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;add_tools&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;set_tools&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Improve &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake create&lt;/code&gt; action&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/589&quot;&gt;#589&lt;/a&gt;: Improve the default build jobs number to optimize build speed&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/598&quot;&gt;#598&lt;/a&gt;: Improve find_package to support .tbd libraries on macOS&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/615&quot;&gt;#615&lt;/a&gt;: Support to install and use other archs and ios conan packages&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/629&quot;&gt;#629&lt;/a&gt;: Improve hash.uuid and implement uuid v4&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/639&quot;&gt;#639&lt;/a&gt;: Improve to parse argument options to support -jN&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/567&quot;&gt;#567&lt;/a&gt;: Fix out of memory for serialize&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/566&quot;&gt;#566&lt;/a&gt;: Fix link order problem with remote packages&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/565&quot;&gt;#565&lt;/a&gt;: Fix run path for vcpkg packages&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/597&quot;&gt;#597&lt;/a&gt;: Fix run &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake require&lt;/code&gt; command too slowly&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/634&quot;&gt;#634&lt;/a&gt;: Fix mode.coverage rule and check flags&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 21 Dec 2019 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2019/12/21/xmake-update-v2.2.9/</link>
        <guid isPermaLink="true">http://www.tboox.org/2019/12/21/xmake-update-v2.2.9/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>c++20</category>
        
        <category>ts-modules</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.2.9 发布, 新增c++20 modules的实验性支持</title>
        <description>&lt;p&gt;这个版本没啥太大新特性，主要对c++20 modules进行了实验性支持，目前支持clang/msvc编译器，除此之外改进了不少使用体验，并且提高了一些稳定性。&lt;/p&gt;

&lt;p&gt;另外，这个版本新增了socket.io支持以及对应协程io的调度支持，为下个版本的远程编译，以及后续的分布式编译做准备。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;新特性介绍&quot;&gt;新特性介绍&lt;/h2&gt;

&lt;h3 id=&quot;c20-modules&quot;&gt;c++20 modules&lt;/h3&gt;

&lt;p&gt;c++ modules已经正式纳入了c++20草案，msvc和clang也已经基本实现了对&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf&quot;&gt;modules-ts&lt;/a&gt;的支持，随着c++20的脚步离我们越来越近，xmake也开始对c++modules提前做好了支持。&lt;/p&gt;

&lt;p&gt;目前xmake已经完全支持了msvc/clang的modules-ts构建实现，而对于gcc，由于它的cxx-modules分支还在开发中，还没有正式进入master，我看了下里面的changelog，相关flags还在不断变动，感觉还没稳定下来，因此这里暂时还没对其进行支持。&lt;/p&gt;

&lt;p&gt;关于xmake对c++modules的相关进展见：&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/569&quot;&gt;https://github.com/xmake-io/xmake/pull/569&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;hello-module&quot;&gt;Hello Module&lt;/h4&gt;

&lt;p&gt;关于c++modules的相关介绍我就不多说了，这边主要还是介绍下xmake下如何去构建c++modules项目，我们先来看一个简单的例子：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;src/*.mpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面是一个支持构建c++modules文件的xmake.lua描述，其中&lt;code class=&quot;highlighter-rouge&quot;&gt;hello.mpp&lt;/code&gt;就是模块文件：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;cstdio&amp;gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;而main.cpp是使用了hello模块的主程序：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello module!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下来我们执行xmake来构建下这个程序吧：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruki:hello ruki$ xmake 
[  0%]: ccache compiling.release src/hello.mpp
[ 50%]: ccache compiling.release src/main.cpp
[100%]: linking.release hello
build ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;是不是非常简单，xmake内部会去处理所有细节逻辑，对于开发者而言，仅仅是添加了模块文件&lt;code class=&quot;highlighter-rouge&quot;&gt;*.mpp&lt;/code&gt;作为源文件而已。&lt;/p&gt;

&lt;h4 id=&quot;模块接口文件&quot;&gt;模块接口文件&lt;/h4&gt;

&lt;p&gt;上文所述的&lt;code class=&quot;highlighter-rouge&quot;&gt;*.mpp&lt;/code&gt;是xmake推荐的模块接口文件命名，其实各家编译器对于模块文件的默认后缀名都是不统一的，clang下是&lt;code class=&quot;highlighter-rouge&quot;&gt;*.cppm&lt;/code&gt;，而msvc下是&lt;code class=&quot;highlighter-rouge&quot;&gt;*.ixx&lt;/code&gt;，这对于编写跨编译器统一的模块项目是非常不友好的，
因此这里参考了&lt;a href=&quot;https://build2.org/doc/modules-cppcon2017.pdf&quot;&gt;build2&lt;/a&gt;里面的推荐方式，采用统一的&lt;code class=&quot;highlighter-rouge&quot;&gt;*.mpp&lt;/code&gt;后缀，来规范xmake下模块项目接口的命令。&lt;/p&gt;

&lt;p&gt;当然，这也支持xmake推荐命名方式，而对于&lt;code class=&quot;highlighter-rouge&quot;&gt;*.ixx&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;*.cppm&lt;/code&gt;等后缀名，xmake也是完全兼容支持的，也可以直接添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files&lt;/code&gt;中去。&lt;/p&gt;

&lt;h4 id=&quot;其他例子&quot;&gt;其他例子&lt;/h4&gt;

&lt;p&gt;xmake项目下还内置了不少跟c++modules相关的工程examples，有兴趣的同学可以参考下：&lt;a href=&quot;https://github.com/xmake-io/xmake/tree/dev/tests/projects/c%2B%2B/modules&quot;&gt;c++module examples&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;set_toolchain接口改动&quot;&gt;set_toolchain接口改动&lt;/h3&gt;

&lt;p&gt;set_toolchain这个接口主要用于针对target设置不同的编译工具链，2.2.9之前的版本其实有&lt;code class=&quot;highlighter-rouge&quot;&gt;add_tools&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;set_tools&lt;/code&gt;两个接口来处理相同的事情，不过这两接口命名和使用上和规范不是很一致，因此做了些调整改动，用这个set_toolchain新接口更好的设置工具链。&lt;/p&gt;

&lt;p&gt;对于&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files(&quot;*.c&quot;)&lt;/code&gt;添加的源码文件，默认都是会调用系统最匹配的编译工具去编译，或者通过&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --cc=clang&lt;/code&gt;命令手动去修改，不过这些都是全局影响所有target目标的。&lt;/p&gt;

&lt;p&gt;如果有些特殊需求，需要对当前工程下某个特定的target目标单独指定不同的编译器、链接器或者特定版本的编译器，这个时候此接口就可以排上用途了，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_toolchain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$(projectdir)/tools/bin/clang-5.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上述描述仅对test2目标的编译器进行特殊设置，使用特定的clang-5.0编译器来编译test2，而test1还是使用默认设置。&lt;/p&gt;

&lt;p&gt;对于一些编译器文件名不规则，导致xmake无法正常识别处理为已知的编译器名的情况下，我们也可以加一个工具名提示，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_toolchain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gcc@$(projectdir)/tools/bin/mipscc.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上述描述设置mipscc.exe作为c编译器，并且提示xmake作为gcc的传参处理方式进行编译。&lt;/p&gt;

&lt;h3 id=&quot;socket-io&quot;&gt;socket io&lt;/h3&gt;

&lt;p&gt;这块的接口初步已经实现，支持lua协程的io调度，实现高并发的io读写（后期还会同时支持进程、pipe的调度支持），目前主要用于xmake自身的使用，用于为后续的远程编译和分布式编译做准备，所以暂时不开放用户自己使用，不过等后续完善后，会开放出来，用户也可以在自己的插件里面通过socket io做一些服务程序。&lt;/p&gt;

&lt;p&gt;不过可能用户用到的场景不是很多，毕竟xmake只是个构建工具，很少会让用户自己去做io通信。&lt;/p&gt;

&lt;h2 id=&quot;更新内容&quot;&gt;更新内容&lt;/h2&gt;

&lt;h3 id=&quot;新特性&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/569&quot;&gt;#569&lt;/a&gt;: 增加对c++模块的实验性支持&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake project -k xmakefile&lt;/code&gt;生成器&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/620&quot;&gt;620&lt;/a&gt;: 添加全局&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.xmakerc.lua&lt;/code&gt;配置文件，对所有本地工程生效.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/593&quot;&gt;593&lt;/a&gt;: 添加&lt;code class=&quot;highlighter-rouge&quot;&gt;core.base.socket&lt;/code&gt;模块，为下一步远程编译和分布式编译做准备。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;改进&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/563&quot;&gt;#563&lt;/a&gt;: 重构构建逻辑，将特定语言的构建抽离到独立的rules中去&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/570&quot;&gt;#570&lt;/a&gt;: 改进Qt构建，将&lt;code class=&quot;highlighter-rouge&quot;&gt;qt.application&lt;/code&gt;拆分成&lt;code class=&quot;highlighter-rouge&quot;&gt;qt.widgetapp&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;qt.quickapp&lt;/code&gt;两个构建规则&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/576&quot;&gt;#576&lt;/a&gt;: 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;set_toolchain&lt;/code&gt;替代&lt;code class=&quot;highlighter-rouge&quot;&gt;add_tools&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;set_tools&lt;/code&gt;，解决老接口使用歧义，提供更加易理解的设置方式&lt;/li&gt;
  &lt;li&gt;改进&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake create&lt;/code&gt;创建模板工程&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/589&quot;&gt;#589&lt;/a&gt;: 改进默认的构建任务数，充分利用cpu core来提速整体编译速度&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/598&quot;&gt;#598&lt;/a&gt;: 改进&lt;code class=&quot;highlighter-rouge&quot;&gt;find_package&lt;/code&gt;支持在macOS上对.tbd系统库文件的查找&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/615&quot;&gt;#615&lt;/a&gt;: 支持安装和使用其他arch和ios的conan包&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/629&quot;&gt;#629&lt;/a&gt;: 改进hash.uuid并且实现uuid v4&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/639&quot;&gt;#639&lt;/a&gt;: 改进参数解析器支持&lt;code class=&quot;highlighter-rouge&quot;&gt;-jN&lt;/code&gt;风格传参&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs修复&quot;&gt;Bugs修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/567&quot;&gt;#567&lt;/a&gt;: 修复序列化对象时候出现的内存溢出问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/566&quot;&gt;#566&lt;/a&gt;: 修复安装远程依赖的链接顺序问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/565&quot;&gt;#565&lt;/a&gt;: 修复vcpkg包的运行PATH设置问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/597&quot;&gt;#597&lt;/a&gt;: 修复xmake require安装包时间过长问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/634&quot;&gt;#634&lt;/a&gt;: 修复mode.coverage构建规则，并且改进flags检测&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 21 Dec 2019 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2019/12/21/xmake-update-v2.2.9/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2019/12/21/xmake-update-v2.2.9/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>c++20</category>
        
        <category>ts-modules</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake从入门到精通10：多个子工程目标的依赖配置</title>
        <description>&lt;p&gt;xmake是一个基于Lua的轻量级现代化c/c++的项目构建工具，主要特点是：语法简单易上手，提供更加可读的项目维护，实现跨平台行为一致的构建体验。&lt;/p&gt;

&lt;p&gt;本文主要详细讲解下，如果在一个项目中维护和生成多个目标文件的生成，以及它们之间的依赖关系设置。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;target到底是什么&quot;&gt;target到底是什么？&lt;/h3&gt;

&lt;p&gt;xmake的概念定义里，一个独立的项目工程可能会有多个子工程组织在一起，每个子工程对应只能生成一个唯一的目标文件，例如：可执行程序，静态库或者动态库等。&lt;/p&gt;

&lt;p&gt;而这里所说的每个子工程就是xmake里面所说的&lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt;，字面意思就是&lt;code class=&quot;highlighter-rouge&quot;&gt;目标子工程&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;因此每个子工程，我们都可以通过新增一个target在xmake.lua里面维护，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/test1/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/test2/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面我们就定义了两个独立的子工程目标，编译时候会生成两个互不依赖的可执行文件。&lt;/p&gt;

&lt;h3 id=&quot;从根域继承全局设置&quot;&gt;从根域继承全局设置&lt;/h3&gt;

&lt;p&gt;暂时先不谈target间的依赖问题，如果我们有许多通用设置，每个target下都得设置一遍，那会非常冗余，也不好维护。&lt;/p&gt;

&lt;p&gt;因此，我们可以把这些配置移到target域的外面，也就是根作用域中去设置，这样对当前xmake.lua以及所有子xmake.lua中的target都会生效，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tbox&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_linkdirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_includedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;include&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/test1/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/test2/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;比如这两target都需要链接tbox库，放置在外层根域设置，test1和test2都能加上对应links。&lt;/p&gt;

&lt;h3 id=&quot;目标间的依赖设置&quot;&gt;目标间的依赖设置&lt;/h3&gt;

&lt;p&gt;那如果某个target需要用到另外一个tatget生成的静态库，应该怎么配置呢？&lt;/p&gt;

&lt;p&gt;一种方式就是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;add_linkdirs&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;add_links&lt;/code&gt;手动指定对应target最后生成的目录库所在目录，然后把链接加上。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FOO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_includedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo/inc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_linkdirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$(buildir)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FOO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_includedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo/inc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_linkdirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$(buildir)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test2/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FOO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上述配置中，test1和test2都会用到libfoo库，并且需要获取到libfoo库的头文件路径，库路径和链接，并且在使用过程中还需要额外设置&lt;code class=&quot;highlighter-rouge&quot;&gt;-DFOO&lt;/code&gt;宏定义开关才行。&lt;/p&gt;

&lt;p&gt;看上去没啥，其实这么写有两个问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;test目标和另外两个库目标之间是有编译顺序依赖的，如果test先编译就会提示链接库找不到&lt;/li&gt;
  &lt;li&gt;配置太过繁琐不好维护，test1和test2有很多冗余配置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;那有没有更加简单可靠的配置方式呢，其实我们只需要&lt;code class=&quot;highlighter-rouge&quot;&gt;add_deps&lt;/code&gt;来对target间配置上依赖关系即可。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FOO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_includedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo/inc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test2/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;对比下，test1和test2的配置，是不是精简了好多？仅仅通过&lt;code class=&quot;highlighter-rouge&quot;&gt;add_deps(&quot;foo&quot;)&lt;/code&gt;就继承了libfoo的所有导出设置：linkdirs, links, includedirs以及defines&lt;/p&gt;

&lt;p&gt;其中target自身生成的库默认就会自动导出链接设置，而includedirs和defines通过设置public属性，我们也将它们标记为导出，这样可以被test目标继承到。&lt;/p&gt;

&lt;p&gt;并且，现在有了依赖关系，xmake在编译的时候，会自动处理这些target之间的编译顺序，保证不会出现链接的时候，libfoo库还没有生成的问题。&lt;/p&gt;

&lt;h3 id=&quot;依赖继承的进一步解析&quot;&gt;依赖继承的进一步解析&lt;/h3&gt;

&lt;h4 id=&quot;级联依赖继承&quot;&gt;级联依赖继承&lt;/h4&gt;

&lt;p&gt;根据上文所说，target会自动继承依赖目标中的配置和属性，不需要额外调用&lt;code class=&quot;highlighter-rouge&quot;&gt;add_links&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;add_linkdirs&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;add_rpathdirs&lt;/code&gt;等接口去关联依赖目标了。&lt;/p&gt;

&lt;p&gt;并且继承关系是支持级联的，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;library1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_includedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;inc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 默认私有头文件目录不会被继承&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_includedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;inc1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 此处的头文件相关目录也会被继承&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;library2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;library1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;library2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的配置中，test依赖library2，然后library2又依赖library1，那么通过&lt;code class=&quot;highlighter-rouge&quot;&gt;add_deps&lt;/code&gt;仅仅添加library2的依赖，test就可以完整继承整个依赖链上的所有导出设置。&lt;/p&gt;

&lt;h4 id=&quot;禁用默认的继承行为&quot;&gt;禁用默认的继承行为&lt;/h4&gt;

&lt;p&gt;那如果我们不想继承依赖target的任何配置，如何操作呢？&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dep1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dep2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过显式设置inherit配置，来告诉xmake，这两个依赖的配置是否需要被继承，如果不设置，默认就是启用继承的。&lt;/p&gt;

&lt;h4 id=&quot;可继承的导出属性详解&quot;&gt;可继承的导出属性详解&lt;/h4&gt;

&lt;p&gt;上文，我们还通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;add_includedirs(&quot;inc1&quot;, {public = true})&lt;/code&gt;, 设置public为true, 将includedirs的设置公开给其他依赖的子target继承。&lt;/p&gt;

&lt;p&gt;目前对于target的编译链接flags相关接口设置，都是支持继承属性的，可以人为控制是否需要导出给其他target来依赖继承，目前支持的属性有：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;属性&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;private&lt;/td&gt;
      &lt;td&gt;默认设置，作为当前target的私有配置，不会被依赖的其他target所继承&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;public&lt;/td&gt;
      &lt;td&gt;公有配置，当前target，依赖的子target都会被设置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;interface&lt;/td&gt;
      &lt;td&gt;接口设置，仅被依赖的子target所继承设置，当前target不参与&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这个其实参考借鉴了cmake的设计，目前xmake中只要跟target相关的所有编译链接设置接口，都是支持可见性导出的，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;add_includedirs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;add_defines&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;add_cflags&lt;/code&gt;等等。&lt;/p&gt;

&lt;p&gt;关于这块的详细信息，可以看下：https://github.com/xmake-io/xmake/issues/368&lt;/p&gt;

</description>
        <pubDate>Fri, 13 Dec 2019 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2019/12/13/quickstart-10-target-deps/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2019/12/13/quickstart-10-target-deps/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>交叉编译</category>
        
        
        <category>xmake</category>
        
      </item>
    
  </channel>
</rss>
