<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TBOOX Open Source Project</title>
    <description>Focus on cross-platform development using c language</description>
    <link>http://www.tboox.org/</link>
    <atom:link href="http://www.tboox.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 30 May 2018 10:04:10 +0800</pubDate>
    <lastBuildDate>Wed, 30 May 2018 10:04:10 +0800</lastBuildDate>
    <generator>Jekyll v3.1.0</generator>
    
      <item>
        <title>xmake新增对Qt编译环境支持</title>
        <description>&lt;p&gt;在最新的xmake v2.2.1版本中，新增了对Qt SDK环境的支持，我们完全可以脱离Qt Creater进行Qt应用程序的开发，甚至配合vscode/idea等编辑器+xmake插件(&lt;a href=&quot;https://github.com/tboox/xmake-vscode&quot;&gt;xmake-vscode&lt;/a&gt;, &lt;a href=&quot;https://github.com/tboox/xmake-idea&quot;&gt;xmake-idea&lt;/a&gt; …)，
用户完全可以切换到自己最常用的编辑器环境中去开发和构建Qt程序，例如这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/vscode-qt.jpeg&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;通过模板创建空工程&lt;/h4&gt;

&lt;p&gt;xmake内置了一些工程模板可以用来快速创建一个基于Qt的空工程，例如：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; create -l c++ -t console_qt test
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; create -l c++ -t static_qt test
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; create -l c++ -t shared_qt test
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; create -l c++ -t quickapp_qt test
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;目前主要提供上述四种工程模板，对应：控制台程序、静态库、动态库、ui应用程序。&lt;/p&gt;

&lt;p&gt;以quickapp工程为例，最后生成的空工程&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake.lua&lt;/code&gt;内容大概长这样：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qt_demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- add rules&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qt.application&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- add headers&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- add files&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/qml.qrc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- add frameworks&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_frameworks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QtQuick&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;qt-sdk&quot;&gt;Qt SDK环境配置&lt;/h4&gt;

&lt;p&gt;默认情况下xmake会自动探测Qt环境，当然如果找不到Qt SDK环境，用户也可以手动指定Qt SDK环境目录：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; f --qt=~/Qt/Qt5.9.1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;section-1&quot;&gt;静态库程序&lt;/h5&gt;

&lt;p&gt;xmake通过内置的构建规则&lt;code class=&quot;highlighter-rouge&quot;&gt;qt.static&lt;/code&gt;，将其应用到对应的target，即可让相关target支持Qt静态库的构建，非常的方便简洁，关于构建规则的说明，可参考相关文档：&lt;a href=&quot;https://xmake.io/#/zh/manual?id=%E5%86%85%E5%BB%BA%E8%A7%84%E5%88%99&quot;&gt;内建规则&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果大家想要支持其他构建环境，也只需要方便的自定义一个自己的扩展规则，应用到对应的target即可实现，言归正传，我们看下Qt静态库的&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake.lua&lt;/code&gt;描述：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qt.static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_frameworks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QtNetwork&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;QtGui&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;非常简单，一般只需要这几行就ok了，如果需要用到Qt的一些框架库，可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;add_frameworks&lt;/code&gt;来添加, 接着就是正常的编译过程：&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;section-2&quot;&gt;动态库程序&lt;/h5&gt;

&lt;p&gt;动态库程序跟上节介绍的静态库描述规则类似，唯一的区别就是吧构建规则改成&lt;code class=&quot;highlighter-rouge&quot;&gt;add_rules(&quot;qt.shared&quot;)&lt;/code&gt;就行了。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qt.shared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_frameworks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QtNetwork&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;QtGui&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;那&lt;code class=&quot;highlighter-rouge&quot;&gt;add_rules(&quot;qt.shared&quot;)&lt;/code&gt;和之前的&lt;code class=&quot;highlighter-rouge&quot;&gt;set_kind(&quot;shared&quot;)&lt;/code&gt;有什么区别呢，区别就是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set_kind(&quot;shared&quot;)&lt;/code&gt;: 是xmake最为基础的动态库构建模式，非常原始，不附加任何框架层的依赖库和配置&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;add_rules(&quot;qt.shared&quot;)&lt;/code&gt;：仅用于Qt动态库的构建，属于内置的扩展规则，会附加Qt SDK的构建环境&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-3&quot;&gt;控制台程序&lt;/h5&gt;

&lt;p&gt;控制台也是类似，直接替换构建规则就可以了：qt.console&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qt.console&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;quick&quot;&gt;Quick应用程序&lt;/h5&gt;

&lt;p&gt;从Qt目前最新的SDK，主要提供了两种ui app的构建框架，Quick App 和 Widgets App，xmake也都进行了支持，并且统一规范成：&lt;code class=&quot;highlighter-rouge&quot;&gt;qt.application&lt;/code&gt; Qt应用程序规则来简化设置。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qt_quickapp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qt.application&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/qml.qrc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_frameworks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QtQuick&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看上述描述，仅仅只需要把对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;qml.qrc&lt;/code&gt;作为源文件添加进去，然后附加需要的QtQuick依赖库就行了。&lt;/p&gt;

&lt;p&gt;注：虽然xmake的&lt;code class=&quot;highlighter-rouge&quot;&gt;add_links&lt;/code&gt;也是用来添加依赖库进行链接的，但是这里建议对于Qt SDK提供的库还是用&lt;code class=&quot;highlighter-rouge&quot;&gt;add_frameworks&lt;/code&gt;来添加，因为所有Qt的构建规则都对&lt;code class=&quot;highlighter-rouge&quot;&gt;add_frameworks&lt;/code&gt;进行了扩展，
对Qt自带的框架库进行了更好的支持，也能根据构建模式自动切换debug/release版本的Qt库。&lt;/p&gt;

&lt;h5 id=&quot;widgets&quot;&gt;Widgets应用程序&lt;/h5&gt;

&lt;p&gt;Widgets App的描述规则还是用的&lt;code class=&quot;highlighter-rouge&quot;&gt;qt.application&lt;/code&gt;，只需要把.ui文件添加进去就行了，唯一需要注意的是，带&lt;code class=&quot;highlighter-rouge&quot;&gt;Q_OBJECT&lt;/code&gt;meta的头文件，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;mainwindow.h&lt;/code&gt;这种，
因为有个moc预处理过程，所以也需要把它添加到源文件中，这样Qt的构建规则就会检测到，将其自动进行moc预处理。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qt_widgetapp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;qt.application&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/mainwindow.ui&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/mainwindow.h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- 添加带有 Q_OBJECT 的meta头文件&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_frameworks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QtWidgets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;关于Qt SDK环境支持的更多详情可以参考：&lt;a href=&quot;https://github.com/tboox/xmake/issues/160&quot;&gt;#160&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 30 May 2018 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2018/05/30/support-qt/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2018/05/30/support-qt/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>Qt</category>
        
        <category>Widgets</category>
        
        <category>QuickApplication</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake入门，构建项目原来可以如此简单</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在开发&lt;a href=&quot;https://github.com/tboox/xmake&quot;&gt;xmake&lt;/a&gt;之前，我一直在使用gnumake/makefile来维护个人C/C++项目，一开始还好，然而等项目越来越庞大后，维护起来就非常吃力了，后续也用过一阵子automake系列工具，并不是很好用。&lt;/p&gt;

&lt;p&gt;由于C/C++程序的构建过程比较繁琐，如果不借助IDE工具，很难快速构建一个新的C/C++程序，想要跨平台构建就更加麻烦了。&lt;/p&gt;

&lt;p&gt;虽然IDE很好用，也很强大，但是还是有很多不足的地方，例如:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;跨平台开发支持不完善&lt;/li&gt;
  &lt;li&gt;自身环境不一定跨平台&lt;/li&gt;
  &lt;li&gt;过于臃肿&lt;/li&gt;
  &lt;li&gt;不利于服务端自动化部署构建&lt;/li&gt;
  &lt;li&gt;不够灵活，定制化配置构建过程有局限性&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然如果你熟悉makefile的话，也可以手敲makefile，不过不同平台用的make也不相同，比如: gnumake, nmake等，导致makefile语法存在差异性，无法做到一致性编译，而且对开发者有一定的使用门槛。&lt;/p&gt;

&lt;p&gt;在win上使用gnumake还得装cygwin，mingw-msys等环境，也非常麻烦，折腾完环境就得半天时间。&lt;/p&gt;

&lt;p&gt;目前已经有了很多现代化的构建工具，方便开发者构建和维护C/C++项目，例如:cmake, scons, premake, bazel, gn, gyp等等。&lt;/p&gt;

&lt;p&gt;其中很多只能生成对应的IDE工程，然后再通过对应IDE来维护和构建，这种只是解决了C/C++项目的一致性维护问题，但是构建方式不一致，因此还是没解决之前列举的大部分不足点，也无法直接快速构建。&lt;/p&gt;

&lt;p&gt;而cmake, scons虽然很强大，但是cmake语法怪异不直观，本人实在是不习惯，scons使用还需要依赖python，py2/py3的问题折腾起来也比较蛋疼。&lt;/p&gt;

&lt;p&gt;鉴于此，我采用了lua来描述工程，利用lua的轻量，简洁，灵活，跨平台等特性，来解决上述遇到的各种问题，使用xmake将会带来不一样的构建体验:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;轻量，跨平台，无依赖，无需额外安装python等第三方环境，直接内置lua运行时，一个安装包(或者命令)直接搞定&lt;/li&gt;
  &lt;li&gt;工程描述直观简洁，更符合用户正常的思维习惯&lt;/li&gt;
  &lt;li&gt;支持直接构建，强大的命令行工具，终端用户的福音，装逼用户必备&lt;/li&gt;
  &lt;li&gt;vscode, idea, clion, sublime, vim等编辑器插件支持&lt;/li&gt;
  &lt;li&gt;智能检测支持，简化用户编译配置过程&lt;/li&gt;
  &lt;li&gt;插件支持，灵活的用户可扩展性&lt;/li&gt;
  &lt;li&gt;vcproj等IDE项目文件生成也支持的哦&lt;/li&gt;
  &lt;li&gt;更多隐藏特性等你来体验&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-compilation.png&quot; alt=&quot;xmake-compilation&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;快速上手&lt;/h2&gt;

&lt;p&gt;不会写makefile？没关系，直接在源码目录运行以下命令即可直接编译:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;xmake会自动扫描在当前目录下的源码结构，生成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake.lua&lt;/code&gt;工程描述文件，然后尝试直接编译。&lt;/p&gt;

&lt;p&gt;想要直接运行编译后的可执行程序，简单，直接敲:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake run
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;更多相关信息，请参考文章: &lt;a href=&quot;http://tboox.org/cn/2017/01/07/build-without-makefile/&quot;&gt;xmake新增智能代码扫描编译模式，无需手写任何make文件&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;快速入门&lt;/h2&gt;

&lt;p&gt;如果想要更进一步描述工程，调整源码结构，添加一些编译选项什么的，还是需要维护一个名叫xmake.lua的工程描述文件，类似makefile, cmakelist.txt，但是其语法和api经过不断地改进简化，已经相当易用。&lt;/p&gt;

&lt;p&gt;最简单的描述例子只需要三行:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就可以构建一个可执行程序，编译所有在src目录下的c源文件。&lt;/p&gt;

&lt;p&gt;然后直接执行xmake即可编译。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files()&lt;/code&gt;支持通配符文件模式匹配，并且支持&lt;code class=&quot;highlighter-rouge&quot;&gt;.c, .cpp, .go, .d, .m, .mm, .S, .swift, .rc, .rs&lt;/code&gt;等各种native语言的代码文件，大部分都能支持混编。&lt;/p&gt;

&lt;p&gt;我们甚至可以添加.a和.o, .obj文件到&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files()&lt;/code&gt;，例如:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lib/libxxx.a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;obj/bbb.o&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上述描述会编译生成一个libtest.a库，在编译归档的时候，会自动将libxxx.a库反解出来，合并到libtest.a中去，并且同时将bbb.o也加进去。&lt;/p&gt;

&lt;p&gt;xmake提供的&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files&lt;/code&gt;是非常强大的，我们还可以再添加一批文件的同时，指定排除某些文件，例如:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/**.cpp|test.cpp|arm/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上述描述，在递归添加源文件的同时，排除掉了test.cpp以及arm目录下的源文件。&lt;/p&gt;

&lt;p&gt;更多&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files&lt;/code&gt;用法，请参考文档:&lt;a href=&quot;http://xmake.io/#/zh/manual?id=targetadd_files&quot;&gt;add_files接口使用文档&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;使用演示&lt;/h2&gt;

&lt;p&gt;命令行下的使用过程，大家可以通过一个视频直观的体验下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/133693&quot;&gt;
&lt;img src=&quot;https://asciinema.org/a/133693.png&quot; width=&quot;60%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;创建工程&lt;/h2&gt;

&lt;p&gt;更加省事的方式就是通过上节所说傻瓜式操作方式，自动生成一个xmake.lua，然后在这基础下修修改改就行了。&lt;/p&gt;

&lt;p&gt;当然如果没有现成源码，想从新工程创建开始编译，那么可以使用xmake提供的工程模板进行创建:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake create &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;默认创建一个名为test的c可执行项目，源码结构如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── src
│   └── main.c
└── xmake.lua
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当然你也可以选择语言和模板类型:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake create -l c++ -t shared &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上述命令创建了一个c++动态库项目，就这么简单。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;运行和调试&lt;/h2&gt;

&lt;p&gt;编译完的可执行程序，直接敲&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake run&lt;/code&gt;就能运行，xmake会自动找到对应的target目标文件，你也可以传递参数给程序。&lt;/p&gt;

&lt;p&gt;如果有多个target目标，你可以指定需要运行的target名，例如:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake run &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;想要快速调试程序？加上&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt;参数即可&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake run -d &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;xmake默认会去找系统自带的调试器，然后加载运行，windows上使用vsjitdebugger，linux上gdb，macos上lldb，当然你也可以随意切换到其他调试器。&lt;/p&gt;

&lt;p&gt;配合debug模式编译，就能做到使用xmake进行源码调试。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;可视化配置和构建&lt;/h2&gt;

&lt;p&gt;xmake提倡使用命令行的方式来操作，用习惯后效率非常高，而且在windows上，即使没有cygwin，也可以直接在cmd下正常运行。&lt;/p&gt;

&lt;p&gt;当然，并不是所有用户习惯命令行，因此xmake也提供了编辑器插件，与各大编辑器进行集成，例如:&lt;/p&gt;

&lt;h4 id=&quot;xmake-vscode&quot;&gt;xmake-vscode插件&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tboox/xmake-vscode/master/res/problem.gif&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;xmake-idea&quot;&gt;xmake-idea插件&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tboox/xmake-idea/master/res/problem.gif&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;xmake-sublime&quot;&gt;xmake-sublime插件&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tboox/xmake-sublime/master/res/problem.gif&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;xmake-tui&quot;&gt;xmake-tui界面&lt;/h4&gt;

&lt;p&gt;除了编辑器插件，xmake甚至自己封装实现了一整套跨平台tui字符界面库，然后仿kconfig/menuconf的界面风格，实现了一个类似的可视化字符界面菜单配置。&lt;/p&gt;

&lt;p&gt;这个不需要额外的插件，只需要在终端下执行:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --menu
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就可以显示菜单配置界面进行编译配置，配置完即可根据当前配置进行编译，效果如下:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://xmake.io/assets/img/index/menuconf.gif&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;定制化编译&lt;/h2&gt;

&lt;p&gt;想要更加灵活的编译配置？那就得要修改xmake.lua啦，不过还是很简单的。&lt;/p&gt;

&lt;h4 id=&quot;section-8&quot;&gt;添加编译选项&lt;/h4&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;add_cxflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-DDEBUG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面代码中，&lt;code class=&quot;highlighter-rouge&quot;&gt;add_cxflags&lt;/code&gt;接口就是同时配置C/C++代码的编译选项，并且只在debug模式下生效，也就是执行下面命令的时候:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -m debug
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-9&quot;&gt;使用内置选项&lt;/h4&gt;

&lt;p&gt;像添加宏定义，设置警告级别，优化级别，头文件搜索目录什么的，完全没必要使用原始的&lt;code class=&quot;highlighter-rouge&quot;&gt;add_cxflags&lt;/code&gt;接口，xmake有提供更加方便的接口，更加智能化的处理来简化配置，也更加通用跨平台，例如:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_optimize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fast&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;all&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src2/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;跟刚才的配置不同的是，此处设置放在了target的上面，此处不属于target域，是root全局设置，会影响下面的所有target目标程序的编译设置，这样可以简化配置，避免冗余。&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;灵活的脚本控制&lt;/h2&gt;

&lt;p&gt;对于高端用户，构建需求复杂多变，xmake也提供了对应解决方案，各个构建阶段都可以灵活定制:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;after_build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;file %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上述代码在编译程序结束后，执行file命令查看目标程序相关信息，目前xmake可以在build, clean, run, install, uninstall等各个阶段的前后插入自定义的脚本，也可以直接内置action，例如: on_install会覆盖内置的安装逻辑，提供给用户足够的灵活性。&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;方便的多目标依赖&lt;/h2&gt;

&lt;p&gt;很多时候，一个项目会有多个target目标程序，之间存在依赖关系，例如: 一个可执行程序hello，依赖一个静态库libtest.a，我们只需要通过add_deps将两个target做个关联就行了，libtest.a的搜索目录，头文件目录设置什么的都不需要关心，xmake会自动处理:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/test/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;--添加依赖&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/hello/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-12&quot;&gt;预编译头文件支持&lt;/h2&gt;

&lt;p&gt;xmake支持通过预编译头文件去加速c/c++程序编译，目前支持的编译器有：gcc, clang和msvc。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_pcxxheader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;header.h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;各大编译器对预编译头的处理方式存在很大差异，而xmake将其差异性隐藏了起来，提供一致性的描述设置，简化用户在跨平台编译时候的处理，
具体关于编译器对预编译头文件的处理，可参考相关文章：&lt;a href=&quot;http://tboox.org/cn/2017/07/31/precompiled-header/&quot;&gt;不同编译器对预编译头文件的处理&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-13&quot;&gt;自定义编译规则&lt;/h2&gt;

&lt;p&gt;xmake不仅原生内置支持多种语言文件的构建，而且还可以通过自定义构建规则，让用户自己来实现复杂的未知文件构建。&lt;/p&gt;

&lt;p&gt;我们可以通过预先设置规则支持的文件后缀，来扩展其他文件的构建支持：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 定义一个markdown文件的构建规则&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.md&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;-- 使test目标支持markdown文件的构建规则&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- 添加markdown文件的构建&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.md&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们也可以指定某些零散的其他文件作为markdown规则来处理：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/test/*.md.in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注：通过&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files(&quot;*.md&quot;, {rule = &quot;markdown&quot;})&lt;/code&gt;方式指定的规则，优先级高于&lt;code class=&quot;highlighter-rouge&quot;&gt;add_rules(&quot;markdown&quot;)&lt;/code&gt;设置的规则。&lt;/p&gt;

&lt;h2 id=&quot;ide&quot;&gt;IDE工程文件生成&lt;/h2&gt;

&lt;p&gt;xmake提供了丰富的插件扩展，其中vcproj, makefile等工程文件的生成就是作为插件提供，使用起来也非常简单:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake project -k vs2017 -m &lt;span class=&quot;s2&quot;&gt;&quot;debug,release&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;即可生成带有debug, release两种编译模式的vc工程，同时支持x86和x64。&lt;/p&gt;

&lt;p&gt;生成的工程目录结构会根据添加的所有源文件的目录结构，自动分析生成直观的文件树，方便vs去浏览查看。&lt;/p&gt;

&lt;p&gt;makefile的生成如下:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake project -k makefile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;后续会陆续更多其他工程文件，也欢迎大家来贡献哦。&lt;/p&gt;

&lt;h2 id=&quot;section-14&quot;&gt;灵活简单的插件扩展&lt;/h2&gt;

&lt;p&gt;上节的IDE工程文件生成，在xmake中就是作为插件来提供，这样更加方便扩展，也能让用户快速定制自己的插件，只需要定义个task插件任务就行了：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 定义一个名叫hello的插件任务&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- 设置类型为插件&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- 插件运行的入口&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello xmake!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- 设置插件的命令行选项，这里没有任何参数选项，仅仅显示插件描述&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_menu&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;-- usage&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xmake hello [options]&quot;&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;-- description&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello xmake!&quot;&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;-- options&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上述代码就是一个最为简单的&lt;code class=&quot;highlighter-rouge&quot;&gt;hello xmake!&lt;/code&gt;插件，运行&lt;code class=&quot;highlighter-rouge&quot;&gt;$xmake hello&lt;/code&gt;就可看到执行输出，&lt;code class=&quot;highlighter-rouge&quot;&gt;set_menu&lt;/code&gt;用于配置插件命令行选项，这个不设置就是内部task，无法在命令行下调用。&lt;/p&gt;

&lt;p&gt;更加详细的插件说明以及内置插件列表可参考文档：&lt;a href=&quot;http://xmake.io/#/zh/plugins&quot;&gt;插件手册&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-15&quot;&gt;查找依赖包&lt;/h2&gt;

&lt;p&gt;xmake参考了cmake对于&lt;code class=&quot;highlighter-rouge&quot;&gt;find_*&lt;/code&gt;系列接口的设计，实现在项目中动态的查找和添加包依赖。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lib.detect.find_package&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zlib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上述描述代码，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;lib.detect.find_package&lt;/code&gt;来查找包，如果找到zlib包，则将links, includedirs和linkdirs等信息添加到target中去。&lt;/p&gt;

&lt;h2 id=&quot;repl&quot;&gt;交互式命令执行(REPL)&lt;/h2&gt;

&lt;p&gt;有时候在交互模式下，运行命令更加的方便测试和验证一些模块和api，也更加的灵活，不需要再去额外写一个脚本文件来加载，不过我一般用来做计算器用用（好吧。。）&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 不带任何参数执行，就可以进入&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake lua
&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 进行表达式计算&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;1 + 2
3

&lt;span class=&quot;c&quot;&gt;# 赋值和打印变量值&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;a
1

&lt;span class=&quot;c&quot;&gt;# 多行输入和执行&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;_, v &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;pairs&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;1, 2, 3&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;v&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;end
1
2
3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们也能够通过 import 来导入扩展模块：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;task &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; import&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;core.project.task&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;task.run&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
hello xmake!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-16&quot;&gt;编译环境支持&lt;/h2&gt;

&lt;p&gt;当前xmake的最新版本已经支持很多sdk环境的集成编译，例如:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[x] Visual Studio编译环境&lt;/li&gt;
  &lt;li&gt;[x] mingw编译环境&lt;/li&gt;
  &lt;li&gt;[x] cygwin编译环境&lt;/li&gt;
  &lt;li&gt;[x] Android NDK编译环境&lt;/li&gt;
  &lt;li&gt;[x] Xcode编译环境(支持iPhoneos/Macosx构建)&lt;/li&gt;
  &lt;li&gt;[x] 系统gcc/clang编译环境&lt;/li&gt;
  &lt;li&gt;[x] 交叉工具链编译环境&lt;/li&gt;
  &lt;li&gt;[x] Cuda编译环境&lt;/li&gt;
  &lt;li&gt;[ ] Qt编译环境(正在支持中)&lt;/li&gt;
  &lt;li&gt;[ ] Windows WDK编译环境(正在支持中)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;faq&quot;&gt;FAQ&lt;/h2&gt;

&lt;h4 id=&quot;xmake&quot;&gt;xmake有哪些用途?&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;跨平台维护和编译C/C++项目&lt;/li&gt;
  &lt;li&gt;CI上部署自动化构建&lt;/li&gt;
  &lt;li&gt;开源代码的快速移植&lt;/li&gt;
  &lt;li&gt;临时的测试代码编写和快速运行&lt;/li&gt;
  &lt;li&gt;与自己喜欢的编辑器集成，打造属于自己的C/C++开发环境&lt;/li&gt;
  &lt;li&gt;与其他native语言的混合编译&lt;/li&gt;
  &lt;li&gt;嵌入式开发下的交叉编译&lt;/li&gt;
  &lt;li&gt;提升逼格&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于第三点的用途，我平常用的最多，因为我经常需要移植第三方的开源项目，它们使用的构建工具各不相同，有automake，cmake等等，其支持的构建平台力度也都不相同，经常会遇到需要的平台不支持的问题。&lt;/p&gt;

&lt;p&gt;没办法，只好自己敲makefile来移植代码，然后适配自己需要支持的那些平台，还有交叉工具链，很蛋疼，自从写了xmake后，我现在平常移植代码方便了很多，效率提升非常明显。&lt;/p&gt;

&lt;h4 id=&quot;section-17&quot;&gt;怎样看实时编译警告信息?&lt;/h4&gt;

&lt;p&gt;为了避免刷屏，在构建时候，默认是不实时输出警告信息的，如果想要看的话可以加上&lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt;选项启用编译警告输出就行了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-w|--warning] 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-18&quot;&gt;怎样看详细的编译参数信息？&lt;/h4&gt;

&lt;p&gt;请加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;--verbose&lt;/code&gt; 选项重新执行xmake后，获取更加详细的输出信息&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hash&quot;&gt;$ xmake [-v|--verbose] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;--backtrace&lt;/code&gt; 选项也可以获取出错时的xmake的调试栈信息&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake -v --backtrace
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-verbose.png&quot; alt=&quot;xmake-verbose&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-19&quot;&gt;快速安装&lt;/h2&gt;

&lt;p&gt;最后我们讲下，如何安装xmake，通常只需要一个脚本命令就能搞定。&lt;/p&gt;

&lt;h4 id=&quot;section-20&quot;&gt;一键安装脚本&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/tboox/xmake/master/scripts/get.sh&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;windows&quot;&gt;windows安装包&lt;/h4&gt;

&lt;p&gt;对于windows用户，提供了安装包来快速安装，可到&lt;a href=&quot;https://github.com/tboox/xmake/releases&quot;&gt;Github Releases&lt;/a&gt;上下载对应版本。&lt;/p&gt;

&lt;p&gt;更加详细的安装过程，见相关文档: &lt;a href=&quot;http://xmake.io/#/zh/?id=安装&quot;&gt;安装说明&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-21&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;xmake还有很多非常有用的特性，例如：编译器特性检测、丰富的模块库、依赖包管理、自定义选项等等，一篇文章讲不完这么多，大家有兴趣的话，可以去&lt;a href=&quot;http://xmake.io/#/zh/&quot;&gt;官方文档&lt;/a&gt;里面看看，还有很多隐藏特性等着你哦。&lt;/p&gt;

</description>
        <pubDate>Mon, 26 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2018/03/26/build-project-so-simply/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2018/03/26/build-project-so-simply/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>build</category>
        
        <category>project</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake新增对Cuda代码编译支持</title>
        <description>&lt;p&gt;最近研究了下NVIDIA Cuda Toolkit的编译环境，并且在xmake 2.1.10开发版中，新增了对cuda编译环境的支持，可以直接编译&lt;code class=&quot;highlighter-rouge&quot;&gt;*.cu&lt;/code&gt;代码。&lt;/p&gt;

&lt;p&gt;关于Cuda Toolkit相关说明以及安装文档，可参考官方文档：&lt;a href=&quot;http://docs.nvidia.com/cuda/index.html&quot;&gt;CUDA Toolkit Documentation&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;下载安装好Cuda SDK后，在macosx上回默认安装到&lt;code class=&quot;highlighter-rouge&quot;&gt;/Developer/NVIDIA/CUDA-x.x&lt;/code&gt;目录下，Windows上可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;CUDA_PATH&lt;/code&gt;的环境变量找到对应的SDK目录，而
Linux下默认会安装到&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/cuda&lt;/code&gt;目录下。&lt;/p&gt;

&lt;p&gt;xmake在执行&lt;code class=&quot;highlighter-rouge&quot;&gt;$ xmake&lt;/code&gt; 命令编译&lt;code class=&quot;highlighter-rouge&quot;&gt;*.cu&lt;/code&gt;代码的时候，会尝试探测这些默认的安装目录，然后尝试调用nvcc编译器直接编译cuda程序，大部分情况下只需要执行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;cuda&quot;&gt;创建和编译Cuda工程&lt;/h4&gt;

&lt;p&gt;我之前编译之前，我们可以通过xmake创建一个空的cuda工程，例如：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake create -l cuda &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd test&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;-l&lt;/code&gt;参数指定创建一个cuda代码工程，工程名为test，执行输出如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[00%]: ccache compiling.release src/main.cu
[100%]: linking.release test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们也可以尝试直接运行这个cuda程序：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake run
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接着我们来看下，这个cuda工程的&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake.lua&lt;/code&gt;文件：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- define target&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- set kind&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- add include directories&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_includedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;inc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- add files&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- generate SASS code for each SM architecture&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ipairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;30&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;35&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;37&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;50&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;52&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;60&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;61&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;70&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;add_cuflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-gencode arch=compute_&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;,code=sm_&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;add_ldflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-gencode arch=compute_&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;,code=sm_&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- generate PTX code from the highest SM architecture to guarantee forward-compatibility&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;70&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_cuflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-gencode arch=compute_&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;,code=compute_&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_ldflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-gencode arch=compute_&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;,code=compute_&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;里面大部分跟C/C++的工程描述类似，唯一的区别就是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;add_cuflags&lt;/code&gt;设置了一些cuda代码特有的编译选项，这部分配置根据用户的需求，可自己调整。&lt;/p&gt;

&lt;p&gt;关于&lt;code class=&quot;highlighter-rouge&quot;&gt;add_cuflags&lt;/code&gt;的更多说明，可阅读&lt;a href=&quot;http://xmake.io/#/zh/manual?id=targetadd_cuflags&quot;&gt;xmake的官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;cuda-1&quot;&gt;Cuda编译环境的配置&lt;/h4&gt;

&lt;p&gt;默认情况下，xmake都能成功检测到系统中安装的Cuda SDK环境，用户不需要做额外的配置操作，当然如果遇到检测不到的情况，用户也可以手动指定Cuda SDK的路径：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --cuda_dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/cuda
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;来告诉xmake，你当前的Cuda SDK的安装目录在哪里。&lt;/p&gt;

&lt;p&gt;如果想要测试xmake对当前cuda环境的探测支持，可以直接运行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake l detect.sdks.find_cuda_toolchains
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;linkdirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Developer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NVIDIA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CUDA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;9.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lib&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;bindir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/Developer/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NVIDIA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CUDA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;9.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bin&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;includedirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Developer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NVIDIA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CUDA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;9.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;include&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;cudadir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/Developer/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NVIDIA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CUDA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;9.1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;来测试检测情况，甚至可以帮忙贡献相关检测代码&lt;a href=&quot;https://github.com/tboox/xmake/blob/master/xmake/modules/detect/sdks/find_cuda_toolchains.lua&quot;&gt;find_cuda_toolchains.lua&lt;/a&gt;来改进xmake的检测过程。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;其他说明&lt;/h4&gt;

&lt;p&gt;注：目前对cuda的支持刚刚完成，还没正式发版，更多关于xmake对cuda的支持情况和进展，见：&lt;a href=&quot;https://github.com/tboox/xmake/issues/158&quot;&gt;issues #158&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;如果要试用此特性，可下载安装最新&lt;a href=&quot;https://github.com/tboox/xmake.git&quot;&gt;master版本&lt;/a&gt;，或者下载&lt;a href=&quot;https://github.com/tboox/xmake/releases/download/v2.1.9/xmake-v2.1.10-dev.exe&quot;&gt;windows 2.1.10-dev安装包&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/cuda_test.gif&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2018/03/09/support-cuda/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2018/03/09/support-cuda/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>cuda</category>
        
        <category>NVIDIA</category>
        
        <category>GPU</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.1.9 released, provide user custom menu config</title>
        <description>&lt;p&gt;This release provide user custom menu config, like &lt;code class=&quot;highlighter-rouge&quot;&gt;make menuconfig&lt;/code&gt; for linux:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/menuconf.gif&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to known more usage, please see &lt;a href=&quot;http://xmake.io/#/home&quot;&gt;online documents&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Source code: &lt;a href=&quot;https://github.com/tboox/xmake&quot;&gt;Github&lt;/a&gt;, &lt;a href=&quot;https://gitee.com/tboox/xmake&quot;&gt;Gitee&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;del_files()&lt;/code&gt; api to delete files in the files list&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;rule()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;add_rules()&lt;/code&gt; api to implement the custom build rule and improve &lt;code class=&quot;highlighter-rouge&quot;&gt;add_files(&quot;src/*.md&quot;, {rule = &quot;markdown&quot;})&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;os.filesize()&lt;/code&gt; api&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;core.ui.xxx&lt;/code&gt; cui components&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --menu&lt;/code&gt; to configure project with a menu configuration interface&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;set_values&lt;/code&gt; api to &lt;code class=&quot;highlighter-rouge&quot;&gt;option()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Support to generate a menu configuration interface from user custom project options&lt;/li&gt;
  &lt;li&gt;Add source file position to interpreter and search results in menu&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Improve to configure cross-toolchains, add tool alias to support unknown tool name, .e.g &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --cc=gcc@ccmips.exe&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/151&quot;&gt;#151&lt;/a&gt;: Improve to build the share library for the mingw platform&lt;/li&gt;
  &lt;li&gt;Improve to generate makefile plugin&lt;/li&gt;
  &lt;li&gt;Improve the checking errors tips&lt;/li&gt;
  &lt;li&gt;Improve &lt;code class=&quot;highlighter-rouge&quot;&gt;add_cxflags&lt;/code&gt; .., force to set flags without auto checking: &lt;code class=&quot;highlighter-rouge&quot;&gt;add_cxflags(&quot;-DTEST&quot;, {force = true})&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Improve &lt;code class=&quot;highlighter-rouge&quot;&gt;add_files&lt;/code&gt;, add force block to force to set flags without auto checking: &lt;code class=&quot;highlighter-rouge&quot;&gt;add_files(&quot;src/*.c&quot;, {force = {cxflags = &quot;-DTEST&quot;}})&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Improve to search the root project directory&lt;/li&gt;
  &lt;li&gt;Improve to detect vs environment&lt;/li&gt;
  &lt;li&gt;Upgrade luajit to 2.1.0-beta3&lt;/li&gt;
  &lt;li&gt;Support to run xmake on linux (arm, arm64)&lt;/li&gt;
  &lt;li&gt;Improve to generate vs201x project plugin&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Fix complation dependence&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/151&quot;&gt;#151&lt;/a&gt;: Fix &lt;code class=&quot;highlighter-rouge&quot;&gt;os.nuldev()&lt;/code&gt; for gcc on mingw&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/150&quot;&gt;#150&lt;/a&gt;: Fix the command line string limitation for &lt;code class=&quot;highlighter-rouge&quot;&gt;ar.exe&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Fix &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --cross&lt;/code&gt; error&lt;/li&gt;
  &lt;li&gt;Fix &lt;code class=&quot;highlighter-rouge&quot;&gt;os.cd&lt;/code&gt; to the windows root path bug&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;new-features-introduction&quot;&gt;New features introduction&lt;/h3&gt;

&lt;h4 id=&quot;add-config-options-in-menu&quot;&gt;Add config options in menu&lt;/h4&gt;

&lt;p&gt;configuration menu:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;root menu
    &lt;ul&gt;
      &lt;li&gt;test1&lt;/li&gt;
      &lt;li&gt;test2&lt;/li&gt;
      &lt;li&gt;test3
        &lt;ul&gt;
          &lt;li&gt;test3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;test4&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/option_set_category.gif&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- &#39;boolean&#39; option&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_showmenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root menu/test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- &#39;choice&#39; option with values: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_showmenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root menu/test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- &#39;string&#39; option&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_showmenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root menu/test3/test3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- &#39;number&#39; option&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_showmenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root menu/test4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;search-configuration&quot;&gt;Search configuration&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/searchconf.gif&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 03 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2018/02/03/update-v2.1.9/</link>
        <guid isPermaLink="true">http://www.tboox.org/2018/02/03/update-v2.1.9/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>update</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.1.9版本发布，增加可视化图形菜单配置</title>
        <description>&lt;p&gt;此版本主要增加&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --menu&lt;/code&gt;实现用户自定义图形菜单配置，界面风格类似linux的&lt;code class=&quot;highlighter-rouge&quot;&gt;make menuconfig&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/menuconf.gif&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;更多使用说明，请阅读：&lt;a href=&quot;http://xmake.io/#/zh/&quot;&gt;文档手册&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;项目源码：&lt;a href=&quot;https://github.com/tboox/xmake&quot;&gt;Github&lt;/a&gt;, &lt;a href=&quot;https://gitee.com/tboox/xmake&quot;&gt;Gitee&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;del_files()&lt;/code&gt;接口去从已添加的文件列表中移除一些文件&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;rule()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;add_rules()&lt;/code&gt;接口实现自定义构建规则，并且改进&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files(&quot;src/*.md&quot;, {rule = &quot;markdown&quot;})&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;os.filesize()&lt;/code&gt;接口&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;core.ui.xxx&lt;/code&gt;等cui组件模块，实现终端可视化界面，用于实现跟用户进行短暂的交互&lt;/li&gt;
  &lt;li&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --menu&lt;/code&gt;实现可视化菜单交互配置，简化工程的编译配置&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;set_values&lt;/code&gt;接口到option&lt;/li&gt;
  &lt;li&gt;改进option，支持根据工程中用户自定义的option，自动生成可视化配置菜单&lt;/li&gt;
  &lt;li&gt;在调用api设置工程配置时以及在配置菜单中添加源文件位置信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;改进交叉工具链配置，通过指定工具别名定向到已知的工具链来支持未知编译工具名配置, 例如: &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --cc=gcc@ccmips.exe&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/151&quot;&gt;#151&lt;/a&gt;: 改进mingw平台下动态库生成&lt;/li&gt;
  &lt;li&gt;改进生成makefile插件&lt;/li&gt;
  &lt;li&gt;改进检测错误提示&lt;/li&gt;
  &lt;li&gt;改进&lt;code class=&quot;highlighter-rouge&quot;&gt;add_cxflags&lt;/code&gt;等flags api的设置，添加force参数，来禁用自动检测和映射，强制设置选项：&lt;code class=&quot;highlighter-rouge&quot;&gt;add_cxflags(&quot;-DTEST&quot;, {force = true})&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;改进&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files&lt;/code&gt;的flags设置，添加force域，用于设置不带自动检测和映射的原始flags：&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files(&quot;src/*.c&quot;, {force = {cxflags = &quot;-DTEST&quot;}})&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;改进搜索工程根目录策略&lt;/li&gt;
  &lt;li&gt;改进vs环境探测，支持加密文件系统下vs环境的探测&lt;/li&gt;
  &lt;li&gt;升级luajit到最新2.1.0-beta3&lt;/li&gt;
  &lt;li&gt;增加对linux/arm, arm64的支持，可以在arm linux上运行xmake&lt;/li&gt;
  &lt;li&gt;改进vs201x工程生成插件，更好的includedirs设置支持&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs&quot;&gt;Bugs修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;修复依赖修改编译和链接问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/151&quot;&gt;#151&lt;/a&gt;: 修复&lt;code class=&quot;highlighter-rouge&quot;&gt;os.nuldev()&lt;/code&gt;在mingw上传入gcc时出现问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/150&quot;&gt;#150&lt;/a&gt;: 修复windows下ar.exe打包过长obj列表参数，导致失败问题&lt;/li&gt;
  &lt;li&gt;修复&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --cross&lt;/code&gt;无法配置问题&lt;/li&gt;
  &lt;li&gt;修复&lt;code class=&quot;highlighter-rouge&quot;&gt;os.cd&lt;/code&gt;到windows根路径问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;新特性介绍&lt;/h3&gt;

&lt;h4 id=&quot;delfiles&quot;&gt;新增&lt;code class=&quot;highlighter-rouge&quot;&gt;del_files&lt;/code&gt;接口实现从源文件列表中删除指定文件&lt;/h4&gt;

&lt;p&gt;通过此接口，可以从前面&lt;a href=&quot;http://xmake.io/#/zh/manual?id=targetadd_files&quot;&gt;add_files&lt;/a&gt;接口添加的文件列表中，删除指定的文件，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;del_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/test.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的例子，可以从&lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt;目录下添加除&lt;code class=&quot;highlighter-rouge&quot;&gt;test.c&lt;/code&gt;以外的所有文件，当然这个也可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files(&quot;src/*.c|test.c&quot;)&lt;/code&gt;来达到相同的目的，但是这种方式更加灵活。&lt;/p&gt;

&lt;p&gt;例如，我们可以条件判断来控制删除哪些文件，并且此接口也支持&lt;a href=&quot;http://xmake.io/#/zh/manual?id=targetadd_files&quot;&gt;add_files&lt;/a&gt;的匹配模式，过滤模式，进行批量移除。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/**.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;del_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/test*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;del_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/subdir/*.c|xxx.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_plat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iphoneos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xxx.m&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过上面的例子，我们可以看出&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;del_files&lt;/code&gt;是根据调用顺序，进行顺序添加和删除的，并且通过&lt;code class=&quot;highlighter-rouge&quot;&gt;del_files(&quot;src/subdir/*.c|xxx.c&quot;)&lt;/code&gt;删除一批文件，
并且排除&lt;code class=&quot;highlighter-rouge&quot;&gt;src/subdir/xxx.c&lt;/code&gt;（就是说，不删除这个文件）。&lt;/p&gt;

&lt;h4 id=&quot;rule&quot;&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;rule()&lt;/code&gt;接口实现用户自定义编译规则&lt;/h4&gt;

&lt;p&gt;在2.1.9版本之后，xmake不仅原生内置支持多种语言文件的构建，而且还可以通过自定义构建规则，让用户自己来实现复杂的未知文件构建。&lt;/p&gt;

&lt;p&gt;我们可以通过预先设置规则支持的文件后缀，来扩展其他文件的构建支持：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 定义一个markdown文件的构建规则&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.md&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;-- 使test目标支持markdown文件的构建规则&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- 添加markdown文件的构建&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.md&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们也可以指定某些零散的其他文件作为markdown规则来处理：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/test/*.md.in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p class=&quot;tips&quot;&gt;
通过`add_files(&quot;*.md&quot;, {rule = &quot;markdown&quot;})`方式指定的规则，优先级高于`add_rules(&quot;markdown&quot;)`设置的规则。
&lt;/p&gt;

&lt;p&gt;我们还可以实现规则的级联构建，例如在构建man规则后，继续调用markdown规则，实现级联构建：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;man&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_imports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;core.project.rule&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;对于有些文件，需要支持多文件构建生成单一对象的模式，可以通过&lt;a href=&quot;http://xmake.io/#/zh/manual?id=ruleon_build_all&quot;&gt;on_build_all&lt;/a&gt;来实现：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;man&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_build_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- build some source files&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ipairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcefiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/test/*.doc.in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;man&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;xmake-f---menu&quot;&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --menu&lt;/code&gt;实现可视化菜单配置&lt;/h4&gt;

&lt;p&gt;之前的版本，使用&lt;a href=&quot;http://xmake.io/#/zh/manual?id=option&quot;&gt;option&lt;/a&gt;可实现命令行菜单选项的用户自定义，当工程配置相当多的情况下，采用这种命令行配置的方式就不是很灵活了。&lt;/p&gt;

&lt;p&gt;因此在2.1.9版本中，我们扩展了option，使其原生支持&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --menu&lt;/code&gt;的图形化配置界面，实现复杂的分级配置，并且支持配置的模糊查找和定位，配置项目更加灵活方便。&lt;/p&gt;

&lt;p&gt;我们可以通过&lt;a href=&quot;http://xmake.io/#/zh/manual?id=optionset_category&quot;&gt;set_category&lt;/a&gt;设置option的分级路径名&lt;code class=&quot;highlighter-rouge&quot;&gt;set_category(&quot;root/submenu/submenu2&quot;)&lt;/code&gt;，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- &#39;boolean&#39; option&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_showmenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root menu/test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- &#39;choice&#39; option with values: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_showmenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root menu/test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- &#39;string&#39; option&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_showmenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root menu/test3/test3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- &#39;number&#39; option&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_showmenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root menu/test4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上述配置最后显示的菜单界面路径结构：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;root menu
    &lt;ul&gt;
      &lt;li&gt;test1&lt;/li&gt;
      &lt;li&gt;test2&lt;/li&gt;
      &lt;li&gt;test3
        &lt;ul&gt;
          &lt;li&gt;test3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;test4&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;效果图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/option_set_category.gif&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;并且我们还可以通过&lt;a href=&quot;http://xmake.io/#/zh/manual?id=optionset_values&quot;&gt;set_values&lt;/a&gt;，提供选项值列表供用户快速选择使用，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_showmenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/option_set_values.png&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;搜索用户配置&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/searchconf.gif&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2018/02/03/update-v2.1.9/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2018/02/03/update-v2.1.9/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>版本更新</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake 自定义构建规则的使用</title>
        <description>&lt;p&gt;在2.1.9版本之后，xmake不仅原生内置支持多种语言文件的构建，而且还可以通过自定义构建规则，让用户自己来实现复杂的未知文件构建。&lt;/p&gt;

&lt;p&gt;具体使用介绍，可参考相关文档：&lt;a href=&quot;http://xmake.io/#/zh/manual?id=%E6%9E%84%E5%BB%BA%E8%A7%84%E5%88%99&quot;&gt;rule规则使用手册&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;通用规则&lt;/h4&gt;

&lt;p&gt;我们可以通过预先设置规则支持的文件后缀，来扩展其他文件的构建支持：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 定义一个markdown文件的构建规则&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.md&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;-- 使test目标支持markdown文件的构建规则&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- 添加markdown文件的构建&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.md&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们也可以指定某些零散的其他文件作为markdown规则来处理：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/test/*.md.in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注：通过&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files(&quot;*.md&quot;, {rule = &quot;markdown&quot;})&lt;/code&gt;方式指定的规则，优先级高于&lt;code class=&quot;highlighter-rouge&quot;&gt;add_rules(&quot;markdown&quot;)&lt;/code&gt;设置的规则。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;依赖构建&lt;/h4&gt;

&lt;p&gt;我们还可以实现规则的级联构建，例如在构建man规则后，继续调用markdown规则，实现级联构建：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;man&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_imports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;core.project.rule&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中&lt;code class=&quot;highlighter-rouge&quot;&gt;add_imports&lt;/code&gt;用于预先导入扩展模块，可在多个自定义脚本中直接使用，具体说明见：&lt;a href=&quot;http://xmake.io/#/zh/manual?id=targetadd_imports&quot;&gt;add_imports文档&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;多文件构建&lt;/h4&gt;

&lt;p&gt;对于有些文件，需要支持多文件构建生成单一对象的模式，可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;on_build_all&lt;/code&gt;来实现：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;man&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_build_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- build some source files&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ipairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcefiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/test/*.doc.in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;man&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-3&quot;&gt;清理和安装&lt;/h4&gt;

&lt;p&gt;我们可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;on_clean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;on_install&lt;/code&gt;用于实现自定义规则的清理和安装逻辑，每次处理一个源文件，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_clean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;core.base.option&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;outputdir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最后附上一个完整例子，请供参考：&lt;a href=&quot;https://github.com/tboox/xmake/issues/149&quot;&gt;rule使用例子&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2017/11/13/custom-rule/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2017/11/13/custom-rule/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>自定义规则</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.1.8 released, improve IDE/Editor plugin integration</title>
        <description>&lt;p&gt;This release improve IDE/Editor plugin integration, we provide the following plugins now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Vim Editor Plugin
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/luzhlon/xmake.vim&quot;&gt;xmake.vim&lt;/a&gt; (third-party, thanks &lt;a href=&quot;https://github.com/luzhlon&quot;&gt;@luzhlon&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Visual Studio Code Editor Plugin (&lt;a href=&quot;https://github.com/tboox/xmake-vscode&quot;&gt;xmake-vscode&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Sublime Text Editor Plugin (&lt;a href=&quot;https://github.com/tboox/xmake-sublime&quot;&gt;xmake-sublime&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;IntelliJ-based IDE Plugin (&lt;a href=&quot;https://github.com/tboox/xmake-idea&quot;&gt;xmake-idea&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;IntelliJ-IDEA&lt;/li&gt;
      &lt;li&gt;CLion&lt;/li&gt;
      &lt;li&gt;Android Studio&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to known more usage, please see &lt;a href=&quot;http://xmake.io/#/home&quot;&gt;online documents&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Source code: &lt;a href=&quot;https://github.com/tboox/xmake&quot;&gt;Github&lt;/a&gt;, &lt;a href=&quot;https://gitee.com/tboox/xmake&quot;&gt;Gitee&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;XMAKE_LOGFILE&lt;/code&gt; environment variable to dump the output info to file&lt;/li&gt;
  &lt;li&gt;Support tinyc compiler&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Improve support for IDE/editor plugins (.e.g vscode, sublime, intellij-idea)&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file when creating new projects&lt;/li&gt;
  &lt;li&gt;Improve to create template project&lt;/li&gt;
  &lt;li&gt;Improve to detect toolchains on macosx without xcode&lt;/li&gt;
  &lt;li&gt;Improve &lt;code class=&quot;highlighter-rouge&quot;&gt;set_config_header&lt;/code&gt; to support &lt;code class=&quot;highlighter-rouge&quot;&gt;set_config_header(&quot;config&quot;, {version = &quot;2.1.8&quot;, build = &quot;%Y%m%d%H%M&quot;})&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/145&quot;&gt;#145&lt;/a&gt;: Fix the current directory when running target&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 08 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2017/11/08/update-v2.1.8/</link>
        <guid isPermaLink="true">http://www.tboox.org/2017/11/08/update-v2.1.8/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>update</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.1.8版本发布，改进对IDE和编辑器插件的支持</title>
        <description>&lt;p&gt;此版本主要改进对IDE和编辑器插件的支持，目前xmake提供以下编辑器和IDE插件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Vim 编辑器插件
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/luzhlon/xmake.vim&quot;&gt;xmake.vim&lt;/a&gt; (第三方插件，感谢&lt;a href=&quot;https://github.com/luzhlon&quot;&gt;@luzhlon&lt;/a&gt;提供)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Visual Studio Code 编辑器插件 (&lt;a href=&quot;https://github.com/tboox/xmake-vscode&quot;&gt;xmake-vscode&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Sublime Text 编辑器插件 (&lt;a href=&quot;https://github.com/tboox/xmake-sublime&quot;&gt;xmake-sublime&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;IntelliJ 系列IDE插件 (&lt;a href=&quot;https://github.com/tboox/xmake-idea&quot;&gt;xmake-idea&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;IntelliJ-IDEA&lt;/li&gt;
      &lt;li&gt;CLion&lt;/li&gt;
      &lt;li&gt;Android Studio&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更多使用说明，请阅读：&lt;a href=&quot;http://xmake.io/#/zh/&quot;&gt;文档手册&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;项目源码：&lt;a href=&quot;https://github.com/tboox/xmake&quot;&gt;Github&lt;/a&gt;, &lt;a href=&quot;https://gitee.com/tboox/xmake&quot;&gt;Gitee&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;XMAKE_LOGFILE&lt;/code&gt;环境变量，启用输出到日志文件&lt;/li&gt;
  &lt;li&gt;添加对tinyc编译器的支持&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;改进对IDE和编辑器插件的集成支持，例如：Visual Studio Code, Sublime Text 以及 IntelliJ IDEA
    &lt;ul&gt;
      &lt;li&gt;增加对vscode的编译错误解析支持&lt;/li&gt;
      &lt;li&gt;改进Sublime Text下的色彩代码干扰&lt;/li&gt;
      &lt;li&gt;增加对Intellij IDEA的工程模板支持&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;当生成新工程的时候，自动生成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;文件，忽略一些xmake的临时文件和目录&lt;/li&gt;
  &lt;li&gt;改进创建模板工程，使用模板名代替模板id作为参数&lt;/li&gt;
  &lt;li&gt;改进macOS编译平台的探测，如果没有安装xcode也能够进行编译构建，如果有编译器的话&lt;/li&gt;
  &lt;li&gt;改进&lt;code class=&quot;highlighter-rouge&quot;&gt;set_config_header&lt;/code&gt;接口，支持局部版本号设置，优先于全局&lt;code class=&quot;highlighter-rouge&quot;&gt;set_version&lt;/code&gt;，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;set_config_header(&quot;config&quot;, {version = &quot;2.1.8&quot;, build = &quot;%Y%m%d%H%M&quot;})&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs&quot;&gt;Bugs修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/145&quot;&gt;#145&lt;/a&gt;: 修复运行target的当前目录环境&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 08 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2017/11/08/update-v2.1.8/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2017/11/08/update-v2.1.8/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>版本更新</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake-idea v1.0.3 released, a xmake integration in Intellij-IDEA</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/tboox/xmake-idea&quot;&gt;xmake-idea&lt;/a&gt; plugin is a xmake integration in Intellij-IDEA.&lt;/p&gt;

&lt;p&gt;It is deeply integrated with &lt;a href=&quot;https://github.com/tboox/xmake&quot;&gt;xmake&lt;/a&gt; and Intellij-IDEA to provide a convenient and fast cross-platform c/c++ development and building.&lt;/p&gt;

&lt;p&gt;And It also support other Intellij-based platform, like Clion, Android Studio and etc.&lt;/p&gt;

&lt;p&gt;You need install &lt;a href=&quot;https://github.com/tboox/xmake&quot;&gt;xmake&lt;/a&gt; first and a project with &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake.lua&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Quickstart&lt;/li&gt;
  &lt;li&gt;Create project&lt;/li&gt;
  &lt;li&gt;Project configuration&lt;/li&gt;
  &lt;li&gt;Run configuration&lt;/li&gt;
  &lt;li&gt;Menu tools&lt;/li&gt;
  &lt;li&gt;Tool windows&lt;/li&gt;
  &lt;li&gt;Build and run&lt;/li&gt;
  &lt;li&gt;Parse errors and goto file&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;quickstart&quot;&gt;Quickstart&lt;/h2&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/static/img/xmake/xmake-idea-quickstart.gif&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;parse-errors-and-goto-file&quot;&gt;Parse errors and goto file&lt;/h2&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/static/img/xmake/xmake-idea-problem.gif&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;tool-windows&quot;&gt;Tool windows&lt;/h2&gt;

&lt;h4 id=&quot;output-panel&quot;&gt;Output panel&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-idea-output_panel.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-project&quot;&gt;Create project&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-idea-create_project.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;project-configuration&quot;&gt;Project configuration&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-idea-project_configuration.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;run-configuration&quot;&gt;Run configuration&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-idea-run_configuration.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;menu-tools&quot;&gt;Menu tools&lt;/h2&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/static/img/xmake/xmake-idea-menu.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 07 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2017/11/07/xmake-idea-v1.0.3/</link>
        <guid isPermaLink="true">http://www.tboox.org/2017/11/07/xmake-idea-v1.0.3/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>IntelliJ</category>
        
        <category>IDEA</category>
        
        <category>plugin</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake-idea v1.0.3 发布, 一个集成xmake的Intellij-IDEA插件</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/tboox/xmake-idea&quot;&gt;xmake-idea&lt;/a&gt; 插件深度集成了&lt;a href=&quot;https://github.com/tboox/xmake&quot;&gt;xmake&lt;/a&gt;和Intellij-IDEA，提供方便快速的跨平台c/c++构建。&lt;/p&gt;

&lt;p&gt;并且它也支持其他基于Intellij的IDE环境, 例如：Clion, Android Studio等等。&lt;/p&gt;

&lt;p&gt;注：使用此插件，需要先安装xmake，更多关于xmake的使用说明，请阅读：&lt;a href=&quot;http://xmake.io/#/zh/&quot;&gt;文档手册&lt;/a&gt;，项目源码：&lt;a href=&quot;https://github.com/tboox/xmake&quot;&gt;Github&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;特性&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;快速开始&lt;/li&gt;
  &lt;li&gt;创建空工程向导&lt;/li&gt;
  &lt;li&gt;全局工程配置&lt;/li&gt;
  &lt;li&gt;运行环境配置&lt;/li&gt;
  &lt;li&gt;菜单栏工具&lt;/li&gt;
  &lt;li&gt;快捷的编译工具窗口&lt;/li&gt;
  &lt;li&gt;构建和运行&lt;/li&gt;
  &lt;li&gt;错误解析和跳转&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;快速开始&lt;/h2&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/static/img/xmake/xmake-idea-quickstart.gif&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;错误解析和跳转&lt;/h2&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/static/img/xmake/xmake-idea-problem.gif&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;快捷的编译工具窗口&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-idea-output_panel.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;创建空工程向导&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-idea-create_project.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;全局工程配置&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-idea-project_configuration.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;运行环境配置&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-idea-run_configuration.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;菜单栏工具&lt;/h2&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/static/img/xmake/xmake-idea-menu.png&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 07 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2017/11/07/xmake-idea-v1.0.3/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2017/11/07/xmake-idea-v1.0.3/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>Intellij</category>
        
        <category>IDEA</category>
        
        <category>插件</category>
        
        
        <category>xmake</category>
        
      </item>
    
  </channel>
</rss>
