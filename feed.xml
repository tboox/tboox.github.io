<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TBOOX Open Source Project</title>
    <description>Focus on cross-platform development using c language</description>
    <link>https://tboox.org/</link>
    <atom:link href="https://tboox.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 08 Nov 2022 11:25:08 +0800</pubDate>
    <lastBuildDate>Tue, 08 Nov 2022 11:25:08 +0800</lastBuildDate>
    <generator>Jekyll v3.1.0</generator>
    
      <item>
        <title>Xmake v2.7.3 Released, Package Components and C++ Modules Incremental Build Support</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Xmake&lt;/a&gt; is a lightweight cross-platform build utility based on Lua.&lt;/p&gt;

&lt;p&gt;It is very lightweight and has no dependencies because it has a built-in Lua runtime.&lt;/p&gt;

&lt;p&gt;It uses xmake.lua to maintain project builds and its configuration syntax is very simple and readable.&lt;/p&gt;

&lt;p&gt;We can use it to build project directly like Make/Ninja, or generate project files like CMake/Meson, and it also has a built-in package management system to help users solve the integrated use of C/C++ dependent libraries.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xmake = Build backend + Project Generator + Package Manager + [Remote|Distributed] Build + Cache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Although not very precise, we can still understand Xmake in the following way:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xmake ~= Make/Ninja + CMake/Meson + Vcpkg/Conan + distcc + ccache/sccache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/&quot;&gt;Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://xmake.io/assets/img/index/package.gif&quot; width=&quot;650px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction-of-new-features&quot;&gt;Introduction of new features&lt;/h2&gt;

&lt;h3 id=&quot;package-component-support&quot;&gt;Package component support&lt;/h3&gt;

&lt;h4 id=&quot;introduction&quot;&gt;Introduction&lt;/h4&gt;

&lt;p&gt;This new feature is intended to enable the integration of specific sub-libraries from a C/C++ package, and is generally used for library component integration in larger packages.&lt;/p&gt;

&lt;p&gt;This is because such packages provide a number of sub-libraries, not all of which are required by the user, and linking them all may be problematic.&lt;/p&gt;

&lt;p&gt;Although, previous versions were able to support the feature of sublibrary selection, e.g.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml~foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graphics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml~bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;network&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml~foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml~bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is done by custom configuration of each package, but there are some problems with this approach.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sfml~foo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sfml~bar&lt;/code&gt; will be installed repeatedly as two separate packages, taking up double the disk space&lt;/li&gt;
  &lt;li&gt;some common code will be compiled repeatedly, which will affect the efficiency of the installation&lt;/li&gt;
  &lt;li&gt;if a target depends on both &lt;code class=&quot;highlighter-rouge&quot;&gt;sfml~foo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sfml~bar&lt;/code&gt;, there will be link conflicts&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The impact of double-compilation and disk usage can be very high for very large package integrations such as boost, and can even lead to more than N times the disk usage if there are a large number of sub-library combinations.&lt;/p&gt;

&lt;p&gt;To solve this problem, Xmake has added a package component mode, which offers some of the following benefits.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;fast integration of any number of components in just one compile, greatly improving installation efficiency and reducing disk footprint&lt;/li&gt;
  &lt;li&gt;component abstraction, across compilers and platforms, so users don’t need to worry about configuring link order dependencies between each sub library&lt;/li&gt;
  &lt;li&gt;easier to use&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more background details see: &lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2636&quot;&gt;#2636&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;use-package-components&quot;&gt;Use package components&lt;/h4&gt;

&lt;p&gt;For the user, using package components is very convenient because the user is not required to maintain the package, as long as the package is used, it is configured with the relevant set of components and we can quickly integrate and use it, e.g.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;network&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;view-package-components&quot;&gt;View package components&lt;/h4&gt;

&lt;p&gt;So how do we know what components are provided by a given package? We can check by executing the following command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xrepo info sfml
The package info of project:
    require&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sfml&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
      -&amp;gt; description: Simple and Fast Multimedia Library
      -&amp;gt; version: 2.5.1
      ...
      -&amp;gt; components:
         -&amp;gt; system:
         -&amp;gt; graphics: system, window
         -&amp;gt; window: system
         -&amp;gt; audio: system
         -&amp;gt; network: system
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;package-component-configuration&quot;&gt;Package component configuration&lt;/h4&gt;

&lt;p&gt;If you are a package maintainer and want to add component support to a package, then you need to configure the package components via the following two interfaces.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;add_components: adds a list of package components&lt;/li&gt;
  &lt;li&gt;on_component: Configures each package component&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;link-configuration-for-package-components&quot;&gt;Link configuration for package components&lt;/h5&gt;

&lt;p&gt;In most cases, a package component only needs to be configured with some of its own sub-link information, e.g.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;audio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;network&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;system&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;on_component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-s&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;links&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sfml-graphics&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_plat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;windows&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mingw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;links&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;freetype&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;syslinks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;opengl32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gdi32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;user32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;advapi32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;on_component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-s&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;links&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sfml-window&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_plat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;windows&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mingw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;syslinks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;opengl32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gdi32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;user32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;advapi32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above is an incomplete package configuration, I have only extracted a part of the configuration related to the package components.&lt;/p&gt;

&lt;p&gt;A full example of the configuration and use of package components can be found at: &lt;a href=&quot;https://github.com/xmake-io/xmake/blob/master/tests/projects/package/components/xmake.lua&quot;&gt;components example&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;configure-compilation-information-for-components&quot;&gt;Configure compilation information for components&lt;/h5&gt;

&lt;p&gt;We can configure not only the linking information for each component, but also the compilation information for includedirs, defines etc. We can also configure each component individually.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;defines&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TEST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;configure-component-dependencies&quot;&gt;Configure component dependencies&lt;/h5&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;audio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;network&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;system&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;on_component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;deps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;system&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above configuration tells the package that our graphics component will have additional dependencies on the &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; components.&lt;/p&gt;

&lt;p&gt;So, on the user side, our use of the graphics component can be done from the&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;system&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Simplified to.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Because, as soon as we turn on the graphics component, it will also automatically enable the dependent window and system components and automatically ensure that the links are in the right order.&lt;/p&gt;

&lt;p&gt;Alternatively, we can configure component dependencies with &lt;code class=&quot;highlighter-rouge&quot;&gt;add_components(&quot;graphics&quot;, {deps = {&quot;window&quot;, &quot;system&quot;}})&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&quot;find-components-from-the-system-library&quot;&gt;Find components from the system library&lt;/h5&gt;

&lt;p&gt;We know that configuring &lt;code class=&quot;highlighter-rouge&quot;&gt;add_extsources&lt;/code&gt; in the package configuration can improve package discovery on the system, for example by finding libraries from system package managers such as apt/pacman.&lt;/p&gt;

&lt;p&gt;Of course, we can also make it possible for each component to prioritise finding them from the system repositories via the &lt;code class=&quot;highlighter-rouge&quot;&gt;extsources&lt;/code&gt; configuration as well.&lt;/p&gt;

&lt;p&gt;For example, the sfml package, which is actually also componentized in homebrew, can be made to find each component from the system repository without having to install them in source each time.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls -l /usr/local/opt/sfml/lib/pkgconfig
-r--r--r-- 1 ruki admin 317 10 19 17:52 sfml-all.pc
-r--r--r-- 1 ruki admin 534 10 19 17:52 sfml-audio.pc
-r--r--r-- 1 ruki admin 609 10 19 17:52 sfml-graphics.pc
-r--r--r-- 1 ruki admin 327 10 19 17:52 sfml-network.pc
-r--r--r-- 1 ruki admin 302 10 19 17:52 sfml-system.pc
-r--r--r-- 1 ruki admin 562 10 19 17:52 sfml-window.pc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We just need, for each component, to configure its extsources: the&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_plat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;macosx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;add_extsources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;brew::sfml/sfml-all&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;on_component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;extsources&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;brew::sfml/sfml-graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;default-global-component-configuration&quot;&gt;Default Global Component Configuration&lt;/h5&gt;

&lt;p&gt;In addition to configuring specific components by specifying component names, if we do not specify a component name, the default is to globally configure all components.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- configure all components&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course, we could also specify the configuration of the graphics component and the rest of the components would be configured via the default global configuration interface in the following way.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;audio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;network&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;system&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;on_component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- configure graphics&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;on_component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- component audio, network, window, system&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;c-module-build-improvements&quot;&gt;C++ module build improvements&lt;/h3&gt;

&lt;h4 id=&quot;incremental-build-support&quot;&gt;Incremental build support&lt;/h4&gt;

&lt;p&gt;I thought that Xmake already had good support for C++ modules, but then I realised that its incremental builds don’t work properly yet.&lt;/p&gt;

&lt;p&gt;So this version of Xmake also does a good job of supporting incremental builds of C++ modules, although the support process still took a lot of effort.&lt;/p&gt;

&lt;p&gt;My analysis shows that the format of the include dependency information (&lt;code class=&quot;highlighter-rouge&quot;&gt;*.d&lt;/code&gt;) generated with modules varies considerably between the compilers.&lt;/p&gt;

&lt;p&gt;The gcc format is the most complex, but I got it to support it anyway.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;build/.objs/dependence/linux/x86_64/release/src/foo.mpp.o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;src/foo.mpp&lt;/span&gt;\
&lt;span class=&quot;nf&quot;&gt;build/.objs/dependence/linux/x86_64/release/src/foo.mpp.o gcm.cache/foo.gcm: bar.c++m cat.c++m&lt;/span&gt;\
&lt;span class=&quot;nf&quot;&gt;foo.c++m: gcm.cache/foo.gcm&lt;/span&gt;\
&lt;span class=&quot;nf&quot;&gt;.PHONY: foo.c++m&lt;/span&gt;\
&lt;span class=&quot;nf&quot;&gt;gcm.cache/foo.gcm:| build/.objs/dependence/linux/x86_64/release/src/foo.mpp.o&lt;/span&gt;\
&lt;span class=&quot;nf&quot;&gt;CXX_IMPORTS += bar.c++m cat.c++m&lt;/span&gt;\
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;clang has the best format compatibility and supports it without any special changes.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;build//hello.pcm: /usr/lib/llvm-15/lib/clang/15.0.2/include/module.modulemap src/hello.mpp\
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The msvc format is more extensible and easier to parse and support: the&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c:\users\ruki\desktop\user_headerunit\src\main.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ProvidedModule&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Includes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ImportedModules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;BMI&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c:\users\ruki\desktop\user_headerunit\src\hello.ifc&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ImportedHeaderUnits&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Header&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c:\users\ruki\desktop\user_headerunit\src\header.hpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;BMI&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c:\users\ruki\desktop\user_headerunit\src\header.hpp.ifc&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;circular-dependency-detection-support&quot;&gt;Circular Dependency Detection Support&lt;/h4&gt;

&lt;p&gt;As there are dependencies between modules, it is not possible to compile if there are circular dependencies between several modules.&lt;/p&gt;

&lt;p&gt;However, in previous versions Xmake was unable to detect this, and when a circular dependency was encountered, the compilation would get stuck without any message, which was very unfriendly to the user.&lt;/p&gt;

&lt;p&gt;In this new version, we have improved this situation by adding the detection of cyclic dependencies for modules, and the following error message will appear when compiling to make it easier for the user to locate the problem.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 0%]: generating.cxx.module.deps Foo.mpp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 0%]: generating.cxx.module.deps Foo2.mpp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 0%]: generating.cxx.module.deps Foo3.mpp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 0%]: generating.cxx.module.deps main.cpp
error: circular modules dependency&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Foo2, Foo, Foo3, Foo2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; detected!
  -&amp;gt; module&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Foo2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;Foo2.mpp
  -&amp;gt; module&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Foo&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;Foo.mpp
  -&amp;gt; module&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Foo3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;Foo3.mpp
  -&amp;gt; module&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Foo2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;Foo2.mpp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;a-more-lsp-friendly-syntax-format&quot;&gt;A more LSP friendly syntax format&lt;/h3&gt;

&lt;p&gt;Our default convention of domain configuration syntax, although very clean, is not very friendly to auto-formatted indentation and IDEs, and if you format your configuration, the indentation is completely misplaced.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Also, if some global configuration is configured between two targets, it does not automatically end the current target scope and the user needs to explicitly call ``target_end()`.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ROOT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Although, as we mentioned above, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;do end&lt;/code&gt; mode to solve the auto-indentation problem, the problem of needing &lt;code class=&quot;highlighter-rouge&quot;&gt;target_end()&lt;/code&gt; still exists.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ROOT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Therefore, in this new version, we provide a better optional domain configuration syntax to solve the auto-indentation, target domain isolation problem, e.g.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ROOT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The foo and bar fields are completely isolated, so we can configure other settings between them without affecting them, plus it’s very LSP friendly and won’t cause indentation confusion, even with one-click formatting.&lt;/p&gt;

&lt;p&gt;Note: This is only an optional extension syntax, the existing configuration syntax is still fully supported and the user can choose the right one according to their needs preferences.&lt;/p&gt;

&lt;h3 id=&quot;add-flags-to-specific-compilers&quot;&gt;Add flags to specific compilers&lt;/h3&gt;

&lt;p&gt;Values configured using interfaces such as &lt;code class=&quot;highlighter-rouge&quot;&gt;add_cflags&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;add_cxxflags&lt;/code&gt;, etc. are usually compiler specific, although Xmake does provide automatic detection and mapping mechanisms.
Even if a flags is set that is not supported by the current compiler, Xmake can automatically ignore it, but there will still be a warning.&lt;/p&gt;

&lt;p&gt;In this new version, we have improved the interface for adding all flags to avoid additional warnings by specifying flags only for specific compilers, e.g.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_cxxflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;clang::-stdlib=libc++&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_cxxflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gcc::-stdlib=libc++&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_cxxflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-stdlib=libc++&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;clang&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_cxxflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-stdlib=libc++&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gcc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note: Not just compile flags, but also for link flags such as add_ldflags, which also work.&lt;/p&gt;

&lt;h3 id=&quot;renderdoc-debugger-support&quot;&gt;renderdoc debugger support&lt;/h3&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/SirLynix&quot;&gt;@SirLynix&lt;/a&gt; for contributing this great feature which allows Xmake to load renderdoc directly to debug some graphics renderers.&lt;/p&gt;

&lt;p&gt;It’s very simple to use, we first make sure renderdoc is installed, then configure the debugger to renderdoc and load the debug run as follows&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --debugger&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;renderdoc
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake run -d
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The concrete usage effect is as follows.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/renderdoc.gif&quot; width=&quot;650px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;new-c-exception-interface-configuration&quot;&gt;New C++ exception interface configuration&lt;/h3&gt;

&lt;p&gt;Xmake has added a new &lt;code class=&quot;highlighter-rouge&quot;&gt;set_exceptions&lt;/code&gt; abstraction configuration interface, which allows us to configure C++/Objc exceptions to be enabled and disabled.&lt;/p&gt;

&lt;p&gt;Normally, if we configure them via the add_cxxflags interface, it would be cumbersome for the compiler to handle them separately, depending on the platform.&lt;/p&gt;

&lt;p&gt;For example&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;on_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_tool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxflags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/EHsc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;defines&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_HAS_EXCEPTIONS=1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_tool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;clang&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_tool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;clang-cl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxflags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-fexceptions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxflags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-fcxx-exceptions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And with this interface, we can abstract to configure them in a compiler-independent way.&lt;/p&gt;

&lt;p&gt;Enabling C++ exceptions:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_exceptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Disable C++ exceptions:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_exceptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;no-cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can also configure to turn on objc exceptions at the same time.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_exceptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;objc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or disable them.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_exceptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;no-cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;no-objc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Xmake automatically adapts the flags internally to the different compilers.&lt;/p&gt;

&lt;h3 id=&quot;support-for-ispc-compilation-rules&quot;&gt;Support for ispc compilation rules&lt;/h3&gt;

&lt;p&gt;Xmake has added support for built-in rules for the ipsc compiler, thanks to &lt;a href=&quot;https://github.com/star-hengxing&quot;&gt;@star-hengxing&lt;/a&gt;, which is used in the following way.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;utils.ispc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header_extension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_ispc.h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ispc.flags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;--target=host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.ispc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;support-for-msvcs-armasm-compiler&quot;&gt;Support for msvc’s armasm compiler&lt;/h3&gt;

&lt;p&gt;Previous versions of Xmake added initial support for Windows ARM, but did not yet have good support for asm compilation, so in this version we have continued to improve Windows ARM support.&lt;/p&gt;

&lt;p&gt;Support for msvc’s &lt;code class=&quot;highlighter-rouge&quot;&gt;armasm.exe&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;armasm64.exe&lt;/code&gt; is now available.&lt;/p&gt;

&lt;p&gt;In addition, we have also improved package cross-compilation support for the Windows ARM platform.&lt;/p&gt;

&lt;h3 id=&quot;new-gnu-rm-build-rules&quot;&gt;New gnu-rm build rules&lt;/h3&gt;

&lt;p&gt;Xmake has also added a new rule and example project for building embedded projects using the gnu-rm toolchain, thanks to &lt;a href=&quot;https://github.com/JacobPeng&quot;&gt;@JacobPeng&lt;/a&gt; for this.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gnu-rm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_toolchains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@gnu-rm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_plat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cross&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_arch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;armv7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gnu-rm.static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/foo/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gnu-rm.binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;src/*.S&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.ld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_includedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/lib/cmsis&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For the full project see: &lt;a href=&quot;https://github.com/xmake-io/xmake/blob/master/tests/projects/embed/gnu-rm/hello/xmake.lua&quot;&gt;Embed GNU-RM Example&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;add-openbsd-system-support&quot;&gt;Add OpenBSD system support&lt;/h3&gt;

&lt;p&gt;In previous versions, Xmake only supported FreeBSD, and OpenBSD had a number of differences that prevented Xmake from compiling and installing on it.&lt;/p&gt;

&lt;p&gt;The new version now fully supports running Xmake on OpenBSD.&lt;/p&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;A new optional configuration syntax. It is LSP friendly, automatically calls target_end() to achieve scope isolation.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2944&quot;&gt;#2944&lt;/a&gt;: Add &lt;code class=&quot;highlighter-rouge&quot;&gt;gnu-rm.binary&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;gnu-rm.static&lt;/code&gt; rules and tests for embed project&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2636&quot;&gt;#2636&lt;/a&gt;: Support package components&lt;/li&gt;
  &lt;li&gt;Support armasm/armasm64 for msvc&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/3023&quot;&gt;#3023&lt;/a&gt;: Add support for debugging with renderdoc&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/3022&quot;&gt;#3022&lt;/a&gt;: Add flags for specific compilers and linkers&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/3025&quot;&gt;#3025&lt;/a&gt;: C++ exception enabled/disabled switch method&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/3017&quot;&gt;#3017&lt;/a&gt;: Support ispc compiler&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2925&quot;&gt;#2925&lt;/a&gt;: Improve doxygen plugin&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2948&quot;&gt;#2948&lt;/a&gt;: Support OpenBSD&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake g --insecure-ssl=y&lt;/code&gt; option to disable ssl certificate when downloading packages&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2971&quot;&gt;#2971&lt;/a&gt;: Stabilize vs and vsxmake project generation&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/3000&quot;&gt;#3000&lt;/a&gt;: Incremental compilation support for modules&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/3016&quot;&gt;#3016&lt;/a&gt;: Improve clang/msvc to better support std modules&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2949&quot;&gt;#2949&lt;/a&gt;: Fix vs group&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2952&quot;&gt;#2952&lt;/a&gt;: Fix armlink for long args&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2954&quot;&gt;#2954&lt;/a&gt;: Fix c++ module partitions path issue&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/3033&quot;&gt;#3033&lt;/a&gt;: Detect circular modules dependency&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 08 Nov 2022 00:00:00 +0800</pubDate>
        <link>https://tboox.org/2022/11/08/xmake-update-v2.7.3/</link>
        <guid isPermaLink="true">https://tboox.org/2022/11/08/xmake-update-v2.7.3/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>package</category>
        
        <category>components</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>Xmake v2.7.3 发布，包组件和 C++ 模块增量构建支持</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Xmake&lt;/a&gt; 是一个基于 Lua 的轻量级跨平台构建工具。&lt;/p&gt;

&lt;p&gt;它非常的轻量，没有任何依赖，因为它内置了 Lua 运行时。&lt;/p&gt;

&lt;p&gt;它使用 xmake.lua 维护项目构建，相比 makefile/CMakeLists.txt，配置语法更加简洁直观，对新手非常友好，短时间内就能快速入门，能够让用户把更多的精力集中在实际的项目开发上。&lt;/p&gt;

&lt;p&gt;我们能够使用它像 Make/Ninja 那样可以直接编译项目，也可以像 CMake/Meson 那样生成工程文件，另外它还有内置的包管理系统来帮助用户解决 C/C++ 依赖库的集成使用问题。&lt;/p&gt;

&lt;p&gt;目前，Xmake 主要用于 C/C++ 项目的构建，但是同时也支持其他 native 语言的构建，可以实现跟 C/C++ 进行混合编译，同时编译速度也是非常的快，可以跟 Ninja 持平。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xmake = Build backend + Project Generator + Package Manager + [Remote|Distributed] Build + Cache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;尽管不是很准确，但我们还是可以把 Xmake 按下面的方式来理解：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xmake ~= Make/Ninja + CMake/Meson + Vcpkg/Conan + distcc + ccache/sccache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/about/course&quot;&gt;入门课程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://xmake.io/assets/img/index/package.gif&quot; width=&quot;650px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;新特性介绍&quot;&gt;新特性介绍&lt;/h2&gt;

&lt;h3 id=&quot;包组件支持&quot;&gt;包组件支持&lt;/h3&gt;

&lt;h4 id=&quot;背景简介&quot;&gt;背景简介&lt;/h4&gt;

&lt;p&gt;这个新特性主要用于实现从一个 C/C++ 包中集成特定的子库，一般用于一些比较大的包中的库组件集成。&lt;/p&gt;

&lt;p&gt;因为这种包里面提供了很多的子库，但不是每个子库用户都需要，全部链接反而有可能会出问题。&lt;/p&gt;

&lt;p&gt;尽管，之前的版本也能够支持子库选择的特性，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml~foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graphics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml~bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;network&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml~foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml~bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这是通过每个包的自定义配置来实现的，但这种方式会存在一些问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sfml~foo&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;sfml~bar&lt;/code&gt; 会作为两个独立的包，重复安装，占用双倍的磁盘空间&lt;/li&gt;
  &lt;li&gt;也会重复编译一些共用代码，影响安装效率&lt;/li&gt;
  &lt;li&gt;如果一个目标同时依赖了 &lt;code class=&quot;highlighter-rouge&quot;&gt;sfml~foo&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;sfml~bar&lt;/code&gt;，会存在链接冲突&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果是对于 boost 这种超大包的集成，重复编译和磁盘占用的影响会非常大，如果在子库组合非常多的情况下，甚至会导致超过 N 倍的磁盘占用。&lt;/p&gt;

&lt;p&gt;为了解决这个问题，Xmake 新增了包组件模式，它提供了以下一些好处：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;仅仅一次编译安装，任意多个组件快速集成，极大提升安装效率，减少磁盘占用&lt;/li&gt;
  &lt;li&gt;组件抽象化，跨编译器和平台，用户不需要关心如何配置每个子库之间链接顺序依赖&lt;/li&gt;
  &lt;li&gt;使用更加方便&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;更多背景详情见：&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2636&quot;&gt;#2636&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;使用包组件&quot;&gt;使用包组件&lt;/h4&gt;

&lt;p&gt;对于用户，使用包组件是非常方便的，因为用户是不需要维护包的，只要使用的包，它配置了相关的组件集，我们就可以快速集成和使用它，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;network&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;查看包组件&quot;&gt;查看包组件&lt;/h4&gt;

&lt;p&gt;那么，如何知道指定的包提供了哪些组件呢？我们可以通过执行下面的命令查看：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xrepo info sfml
The package info of project:
    require&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sfml&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
      -&amp;gt; description: Simple and Fast Multimedia Library
      -&amp;gt; version: 2.5.1
      ...
      -&amp;gt; components:
         -&amp;gt; system:
         -&amp;gt; graphics: system, window
         -&amp;gt; window: system
         -&amp;gt; audio: system
         -&amp;gt; network: system
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;包组件配置&quot;&gt;包组件配置&lt;/h4&gt;

&lt;p&gt;如果你是包的维护者，想要将一个包增加组件支持，那么需要通过下面两个接口来完成包组件的配置：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;add_components: 添加包组件列表&lt;/li&gt;
  &lt;li&gt;on_component: 配置每个包组件&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;包组件的链接配置&quot;&gt;包组件的链接配置&lt;/h5&gt;

&lt;p&gt;大多数情况下，包组件只需要配置它自己的一些子链接信息，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;audio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;network&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;system&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;on_component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-s&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;links&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sfml-graphics&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_plat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;windows&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mingw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;links&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;freetype&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;syslinks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;opengl32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gdi32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;user32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;advapi32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;on_component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-s&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;links&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sfml-window&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_plat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;windows&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mingw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;syslinks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;opengl32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gdi32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;user32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;advapi32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面是一个不完整的包配置，我仅仅摘取一部分跟包组件相关的配置。&lt;/p&gt;

&lt;p&gt;一个关于包组件的配置和使用的完整例子见：&lt;a href=&quot;https://github.com/xmake-io/xmake/blob/master/tests/projects/package/components/xmake.lua&quot;&gt;components example&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;配置组件的编译信息&quot;&gt;配置组件的编译信息&lt;/h5&gt;

&lt;p&gt;我们不仅可以配置每个组件的链接信息，还有 includedirs, defines 等等编译信息，我们也可以对每个组件单独配置。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;defines&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TEST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;配置组件依赖&quot;&gt;配置组件依赖&lt;/h5&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;audio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;network&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;system&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;on_component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;deps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;system&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的配置，告诉包，我们的 graphics 组件还会额外依赖 &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; 两个组件。&lt;/p&gt;

&lt;p&gt;因此，在用户端，我们对 graphics 的组件使用，可以从&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;system&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;简化为：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因为，只要我们开启了 graphics 组件，它也会自动启用依赖的 window 和 system 组件，并且自动保证链接顺序正确。&lt;/p&gt;

&lt;p&gt;另外，我们也可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;add_components(&quot;graphics&quot;, {deps = {&quot;window&quot;, &quot;system&quot;}})&lt;/code&gt; 来配置组件依赖关系。&lt;/p&gt;

&lt;h5 id=&quot;从系统库中查找组件&quot;&gt;从系统库中查找组件&lt;/h5&gt;

&lt;p&gt;我们知道，在包配置中，配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;add_extsources&lt;/code&gt; 可以改进包在系统中的查找，比如从 apt/pacman 等系统包管理器中找库。&lt;/p&gt;

&lt;p&gt;当然，我们也可以让每个组件也能通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;extsources&lt;/code&gt; 配置，去优先从系统库中找到它们。&lt;/p&gt;

&lt;p&gt;例如，sfml 包，它在 homebrew 中其实也是组件化的，我们完全可以让包从系统库中，找到对应的每个组件，而不需要每次源码安装它们。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls -l /usr/local/opt/sfml/lib/pkgconfig
-r--r--r--  1 ruki  admin  317 10 19 17:52 sfml-all.pc
-r--r--r--  1 ruki  admin  534 10 19 17:52 sfml-audio.pc
-r--r--r--  1 ruki  admin  609 10 19 17:52 sfml-graphics.pc
-r--r--r--  1 ruki  admin  327 10 19 17:52 sfml-network.pc
-r--r--r--  1 ruki  admin  302 10 19 17:52 sfml-system.pc
-r--r--r--  1 ruki  admin  562 10 19 17:52 sfml-window.pc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们只需要，对每个组件配置它的 extsources：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_plat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;macosx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;add_extsources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;brew::sfml/sfml-all&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;on_component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;extsources&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;brew::sfml/sfml-graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;默认的全局组件配置&quot;&gt;默认的全局组件配置&lt;/h5&gt;

&lt;p&gt;除了通过指定组件名的方式，配置特定组件，如果我们没有指定组件名，默认就是全局配置所有组件。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- configure all components&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当然，我们也可以通过下面的方式，指定配置 graphics 组件，剩下的组件通过默认的全局配置接口进行配置：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sfml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;audio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;network&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;system&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;on_component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;graphics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- configure graphics&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;on_component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;-- component audio, network, window, system&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;c-模块构建改进&quot;&gt;C++ 模块构建改进&lt;/h3&gt;

&lt;h4 id=&quot;增量构建支持&quot;&gt;增量构建支持&lt;/h4&gt;

&lt;p&gt;原本以为 Xmake 对 C++ 模块已经支持的比较完善了，后来才发现，它的增量编译还无法正常工作。&lt;/p&gt;

&lt;p&gt;因此，这个版本 Xmake 对 C++ 模块的增量编译也做了很好的支持，尽管支持过程还是花了很多精力的。&lt;/p&gt;

&lt;p&gt;我分析了下，各家的编译器对生成带模块的 include 依赖信息格式（&lt;code class=&quot;highlighter-rouge&quot;&gt;*.d&lt;/code&gt;），差异还是非常大的。&lt;/p&gt;

&lt;p&gt;gcc 的格式最复杂，不过我还是将它支持上了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;build/.objs/dependence/linux/x86_64/release/src/foo.mpp.o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;src/foo.mpp&lt;/span&gt;\
&lt;span class=&quot;nf&quot;&gt;build/.objs/dependence/linux/x86_64/release/src/foo.mpp.o  gcm.cache/foo.gcm: bar.c++m cat.c++m&lt;/span&gt;\
&lt;span class=&quot;nf&quot;&gt;foo.c++m: gcm.cache/foo.gcm&lt;/span&gt;\
&lt;span class=&quot;nf&quot;&gt;.PHONY: foo.c++m&lt;/span&gt;\
&lt;span class=&quot;nf&quot;&gt;gcm.cache/foo.gcm:|  build/.objs/dependence/linux/x86_64/release/src/foo.mpp.o&lt;/span&gt;\
&lt;span class=&quot;nf&quot;&gt;CXX_IMPORTS += bar.c++m cat.c++m&lt;/span&gt;\
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;clang 的格式兼容性最好，没有做任何特殊改动就支持了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;build//hello.pcm:   /usr/lib/llvm-15/lib/clang/15.0.2/include/module.modulemap   src/hello.mpp\
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;msvc 的格式扩展性比较好，解析和支持起来比较方便：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c:\users\ruki\desktop\user_headerunit\src\main.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ProvidedModule&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Includes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ImportedModules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;BMI&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c:\users\ruki\desktop\user_headerunit\src\hello.ifc&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ImportedHeaderUnits&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Header&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c:\users\ruki\desktop\user_headerunit\src\header.hpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;BMI&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c:\users\ruki\desktop\user_headerunit\src\header.hpp.ifc&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;循环依赖检测支持&quot;&gt;循环依赖检测支持&lt;/h4&gt;

&lt;p&gt;由于模块之间是存在依赖关系的，因此如果有几个模块之间存在循环依赖引用，那么是无法编译通过的。&lt;/p&gt;

&lt;p&gt;但是之前的版本中，Xmake 无法检测到这种情况，遇到循环依赖，编译就会卡死，没有任何提示信息，这对用户非常不友好。&lt;/p&gt;

&lt;p&gt;而新版本中，我们对这种情况做了改进，增加了模块的循环依赖检测，编译时候会出现以下错误提示，方便用户定位问题：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  0%]: generating.cxx.module.deps Foo.mpp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  0%]: generating.cxx.module.deps Foo2.mpp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  0%]: generating.cxx.module.deps Foo3.mpp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  0%]: generating.cxx.module.deps main.cpp
error: circular modules dependency&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Foo2, Foo, Foo3, Foo2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; detected!
  -&amp;gt; module&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Foo2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;Foo2.mpp
  -&amp;gt; module&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Foo&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;Foo.mpp
  -&amp;gt; module&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Foo3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;Foo3.mpp
  -&amp;gt; module&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Foo2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;Foo2.mpp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;更加-lsp-友好的语法格式&quot;&gt;更加 LSP 友好的语法格式&lt;/h3&gt;

&lt;p&gt;我们默认约定的域配置语法，尽管非常简洁，但是对自动格式化缩进和 IDE 不是很友好，如果你格式化配置，缩进就完全错位了。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;另外，如果两个 target 之间配置了一些全局的配置，那么它不能自动结束当前 target 作用域，用户需要显式调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;target_end()&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ROOT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;虽然，上面我们提到，可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;do end&lt;/code&gt; 模式来解决自动缩进问题，但是需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;target_end()&lt;/code&gt; 的问题还是存在。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ROOT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因此，在新版本中，我们提供了一种更好的可选域配置语法，来解决自动缩进，target 域隔离问题，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ROOT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;foo 和 bar 两个域是完全隔离的，我们即使在它们中间配置其他设置，也不会影响它们，另外，它还对 LSP 非常友好，即使一键格式化，也不会导致缩进混乱。&lt;/p&gt;

&lt;p&gt;注：这仅仅只是一只可选的扩展语法，现有的配置语法还是完全支持的，用户可以根据自己的需求喜好，来选择合适的配置语法。&lt;/p&gt;

&lt;h3 id=&quot;为特定编译器添加-flags&quot;&gt;为特定编译器添加 flags&lt;/h3&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;add_cflags&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;add_cxxflags&lt;/code&gt; 等接口配置的值，通常都是跟编译器相关的，尽管 Xmake 也提供了自动检测和映射机制，
即使设置了当前编译器不支持的 flags，Xmake 也能够自动忽略它，但是还是会有警告提示。&lt;/p&gt;

&lt;p&gt;新版本中，我们改进了所有 flags 添加接口，可以仅仅对特定编译器指定 flags，来避免额外的警告，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_cxxflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;clang::-stdlib=libc++&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_cxxflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gcc::-stdlib=libc++&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;或者：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_cxxflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-stdlib=libc++&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;clang&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_cxxflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-stdlib=libc++&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gcc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注：不仅仅是编译flags，对 add_ldflags 等链接 flags，也是同样生效的。&lt;/p&gt;

&lt;h3 id=&quot;renderdoc-调试器支持&quot;&gt;renderdoc 调试器支持&lt;/h3&gt;

&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/SirLynix&quot;&gt;@SirLynix&lt;/a&gt; 贡献了这个很棒的特性，它可以让 Xmake 直接加载 renderdoc 去调试一些图形渲染程序。&lt;/p&gt;

&lt;p&gt;使用非常简单，我们先确保安装了 renderdoc，然后配置调试器为 renderdoc，加载调试运行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --debugger&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;renderdoc
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake run -d
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;具体使用效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/renderdoc.gif&quot; width=&quot;650px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;新增-c-异常接口配置&quot;&gt;新增 C++ 异常接口配置&lt;/h3&gt;

&lt;p&gt;Xmake 新增了一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;set_exceptions&lt;/code&gt; 抽象化配置接口，我们可以通过这个配置，配置启用和禁用 C++/Objc 的异常。&lt;/p&gt;

&lt;p&gt;通常，如果我们通过 add_cxxflags 接口去配置它们，需要根据不同的平台，编译器分别处理它们，非常繁琐。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;on_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_tool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxflags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/EHsc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;defines&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_HAS_EXCEPTIONS=1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_tool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;clang&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_tool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;clang-cl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxflags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-fexceptions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxflags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-fcxx-exceptions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;而通过这个接口，我们就可以抽象化成编译器无关的方式去配置它们。&lt;/p&gt;

&lt;p&gt;开启 C++ 异常:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_exceptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;禁用 C++ 异常:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_exceptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;no-cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们也可以同时配置开启 objc 异常。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_exceptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;objc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;或者禁用它们。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_exceptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;no-cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;no-objc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Xmake 会在内部自动根据不同的编译器，去适配对应的 flags。&lt;/p&gt;

&lt;h3 id=&quot;支持-ispc-编译规则&quot;&gt;支持 ispc 编译规则&lt;/h3&gt;

&lt;p&gt;Xmake 新增了 ipsc 编译器内置规则支持，非常感谢 &lt;a href=&quot;https://github.com/star-hengxing&quot;&gt;@star-hengxing&lt;/a&gt; 的贡献，具体使用方式如下：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;utils.ispc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header_extension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_ispc.h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ispc.flags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;--target=host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.ispc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;支持-msvc-的-armasm-编译器&quot;&gt;支持 msvc 的 armasm 编译器&lt;/h3&gt;

&lt;p&gt;之前的版本，Xmake 增加了 Windows ARM 的初步支持，但是对 asm 编译还没有很好的支持，因此这个版本，我们继续完善 Windows ARM 的支持。&lt;/p&gt;

&lt;p&gt;对 msvc 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;armasm.exe&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;armasm64.exe&lt;/code&gt; 都支持上了。&lt;/p&gt;

&lt;p&gt;另外，我们也改进了包对 Windows ARM 平台的交叉编译支持。&lt;/p&gt;

&lt;h3 id=&quot;新增-gnu-rm-构建规则&quot;&gt;新增 gnu-rm 构建规则&lt;/h3&gt;

&lt;p&gt;Xmake 也新增了一个使用 gnu-rm 工具链去构建嵌入式项目的规则和例子工程，非常感谢 &lt;a href=&quot;https://github.com/JacobPeng&quot;&gt;@JacobPeng&lt;/a&gt; 的贡献。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gnu-rm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_toolchains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@gnu-rm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_plat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cross&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set_arch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;armv7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gnu-rm.static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/foo/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gnu-rm.binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;src/*.S&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.ld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_includedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/lib/cmsis&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;完整工程见：&lt;a href=&quot;https://github.com/xmake-io/xmake/blob/master/tests/projects/embed/gnu-rm/hello/xmake.lua&quot;&gt;Embed GNU-RM Example&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;新增-openbsd-系统支持&quot;&gt;新增 OpenBSD 系统支持&lt;/h3&gt;

&lt;p&gt;之前的版本，Xmake 仅仅支持 FreeBSD 系统，而 OpenBSD 跟 FreeBSD 还是有不少差异的，导致 Xmake 无法在它上面正常编译安装。&lt;/p&gt;

&lt;p&gt;而新版本已经完全支持在 OpenBSD 上运行 Xmake 了。&lt;/p&gt;

&lt;h2 id=&quot;更新内容&quot;&gt;更新内容&lt;/h2&gt;

&lt;h3 id=&quot;新特性&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;一种新的可选域配置语法，对 LSP 友好，并且支持域隔离。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2944&quot;&gt;#2944&lt;/a&gt;: 为嵌入式工程添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;gnu-rm.binary&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;gnu-rm.static&lt;/code&gt; 规则和测试工程&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2636&quot;&gt;#2636&lt;/a&gt;: 支持包组件&lt;/li&gt;
  &lt;li&gt;支持 msvc 的 armasm/armasm64&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/3023&quot;&gt;#3023&lt;/a&gt;: 改进 xmake run -d，添加 renderdoc 调试器支持&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/3022&quot;&gt;#3022&lt;/a&gt;: 为特定编译器添加 flags&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/3025&quot;&gt;#3025&lt;/a&gt;: 新增 C++ 异常接口配置&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/3017&quot;&gt;#3017&lt;/a&gt;: 支持 ispc 编译器规则&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;改进&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2925&quot;&gt;#2925&lt;/a&gt;: 改进 doxygen 插件&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2948&quot;&gt;#2948&lt;/a&gt;: 支持 OpenBSD&lt;/li&gt;
  &lt;li&gt;添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake g --insecure-ssl=y&lt;/code&gt; 配置选项去禁用 ssl 证书检测&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2971&quot;&gt;#2971&lt;/a&gt;: 使 vs/vsxmake 工程生成的结果每次保持一致&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/3000&quot;&gt;#3000&lt;/a&gt;: 改进 C++ 模块构建支持，实现增量编译支持&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/3016&quot;&gt;#3016&lt;/a&gt;: 改进 clang/msvc 去更好地支持 std 模块&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-修复&quot;&gt;Bugs 修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2949&quot;&gt;#2949&lt;/a&gt;: 修复 vs 分组&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2952&quot;&gt;#2952&lt;/a&gt;: 修复 armlink 处理长命令失败问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2954&quot;&gt;#2954&lt;/a&gt;: 修复 c++ module partitions 路径无效问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/3033&quot;&gt;#3033&lt;/a&gt;: 探测循环模块依赖&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 08 Nov 2022 00:00:00 +0800</pubDate>
        <link>https://tboox.org/cn/2022/11/08/xmake-update-v2.7.3/</link>
        <guid isPermaLink="true">https://tboox.org/cn/2022/11/08/xmake-update-v2.7.3/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>package</category>
        
        <category>components</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>Xmake v2.7.2 released, build third-party libraries more intelligently</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Xmake&lt;/a&gt; is a lightweight cross-platform build utility based on Lua.&lt;/p&gt;

&lt;p&gt;It is very lightweight and has no dependencies because it has a built-in Lua runtime.&lt;/p&gt;

&lt;p&gt;It uses xmake.lua to maintain project builds and its configuration syntax is very simple and readable.&lt;/p&gt;

&lt;p&gt;We can use it to build project directly like Make/Ninja, or generate project files like CMake/Meson, and it also has a built-in package management system to help users solve the integrated use of C/C++ dependent libraries.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xmake = Build backend + Project Generator + Package Manager + [Remote|Distributed] Build + Cache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Although not very precise, we can still understand Xmake in the following way:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xmake ~= Make/Ninja + CMake/Meson + Vcpkg/Conan + distcc + ccache/sccache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/&quot;&gt;Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction-of-new-features&quot;&gt;Introduction of new features&lt;/h2&gt;

&lt;h3 id=&quot;building-third-party-libraries-more-intelligently&quot;&gt;Building third party libraries more intelligently&lt;/h3&gt;

&lt;p&gt;In previous versions, Xmake provided a TryBuild mode that allowed you to use Xmake to try to build third-party projects maintained by autoconf/cmake/meson etc. directly without xmake.lua.&lt;/p&gt;

&lt;p&gt;In effect, this means that Xmake detects the corresponding build system and invokes commands such as cmake to do so, but it will help the user to simplify the configuration operation, plus it will interface with xmake’s cross-compilation toolchain configuration.&lt;/p&gt;

&lt;p&gt;However, this mode has a certain failure rate, which can lead to build failure if, for example&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;the project code itself is flawed, resulting in a compilation error&lt;/li&gt;
  &lt;li&gt;the project code does not support the current platform&lt;/li&gt;
  &lt;li&gt;the build script is flawed&lt;/li&gt;
  &lt;li&gt;specific configuration parameters are missing&lt;/li&gt;
  &lt;li&gt;a missing dependency library that needs to be installed by the user&lt;/li&gt;
  &lt;li&gt;the compiler version is too low and does not support some of the code&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The TryBuild mode usually handles these cases, but in this new version we have introduced a new mechanism to the TryBuild mode to improve the build logic by reusing build scripts from the &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt; repository.&lt;/p&gt;

&lt;p&gt;It roughly handles the process in the following way.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;execute the xmake command in the third-party source repository directory&lt;/li&gt;
  &lt;li&gt;xmake gets the directory name and tries to resolve the project name and version&lt;/li&gt;
  &lt;li&gt;try to match an existing package from the xmake-repo repository&lt;/li&gt;
  &lt;li&gt;If the match is successful, build directly using the build logic in the package&lt;/li&gt;
  &lt;li&gt;if no match is made, fall back to the original TryBuild logic&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What is the benefit of this, if the match is successful, we can solve all the problems mentioned above.&lt;/p&gt;

&lt;p&gt;Even if the current project source code does not support a given platform, or if the source code and build script are flawed in some way, Xmake will automatically patch in a specific patch to fix it and bring in the required dependencies to ensure that it will definitely compile in one click.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the libjpeg library as an example.&lt;/p&gt;

&lt;h4 id=&quot;the-first-step-is-to-download-the-corresponding-source-code-package&quot;&gt;The first step is to download the corresponding source code package&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;wget https://jaist.dl.sourceforge.net/project/libjpeg-turbo/2.1.4/libjpeg-turbo-2.1.4.tar.gz
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;tar -xvf libjpeg-turbo-2.1.4.tar.gz
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;libjpeg-turbo-2.1.4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;enter-the-directory-and-execute-the-xmake-command&quot;&gt;Enter the directory and execute the Xmake command&lt;/h4&gt;

&lt;p&gt;Xmake will prompt the user if it detects that it is the libjpeg library, and whether to build it as libjpeg 2.1.4.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruki-2:libjpeg-turbo-2.1.4 ruki&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;xmake
note: libjpeg-turbo 2.1.4 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;xmake-repo found, try building it or you can run &lt;span class=&quot;sb&quot;&gt;``&lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; to &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;buildsystem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass -y or --confirm&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;y/n/d to skip confirm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;?
please input: y &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We hit enter to confirm to continue the build.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;checking &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;cmake ... /usr/local/bin/cmake
/usr/local/bin/cmake -DCMAKE_BUILD_TYPE&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Release -DENABLE_SHARED&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;OFF -DENABLE_STATIC&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ON -DCMAKE_POSITION_INDEPENDENT_CODE&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ON -DCMAKE_ INSTALL_LIBDIR:PATH&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;lib -DCMAKE_INSTALL_PREFIX&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/Users/ruki/.xmake/packages/l/libjpeg-turbo/2.1.4/646b795702e34be89c5745333d052aa2 -G &lt;span class=&quot;s2&quot;&gt;&quot;Unix Makefiles&quot;&lt;/span&gt; -DCMAKE_POSITION_INDEPENDENT_CODE&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ON /Users/ruki/Downloads/libjpeg-turbo-2.1.4
-- CMAKE_BUILD_TYPE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Release
-- VERSION &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2.1.4, BUILD &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 20220923
-- 64-bit build &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x86_64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- CMAKE_INSTALL_PREFIX &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /Users/ruki/.xmake/packages/l/libjpeg-turbo/2.1.4/646b795702e34be89c5745333d052aa2
-- CMAKE_INSTALL_BINDIR &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; bin &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/Users/ruki/.xmake/packages/l/libjpeg-turbo/2.1.4/646b795702e34be89c5745333d052aa2/bin&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- CMAKE_INSTALL_DATAROOTDIR &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; share &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/Users/ruki/.xmake/packages/l/libjpeg-turbo/2.1.4/646b795702e34be89c5745333d052aa2/share&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- CMAKE_INSTALL_DOCDIR &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; share/doc/libjpeg-turbo &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/Users/ruki/.xmake/packages/l/libjpeg-turbo/2.1.4/646b795702e34be89c5745333d052aa2/ share/doc/libjpeg-turbo&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- CMAKE_INSTALL_INCLUDEDIR &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; include &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/Users/ruki/.xmake/packages/l/libjpeg-turbo/2.1.4/646b795702e34be89c5745333d052aa2/include&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- CMAKE_INSTALL_LIBDIR &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; lib &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/Users/ruki/.xmake/packages/l/libjpeg-turbo/2.1.4/646b795702e34be89c5745333d052aa2/lib&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- CMAKE_INSTALL_MANDIR &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; share/man &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/Users/ruki/.xmake/packages/l/libjpeg-turbo/2.1.4/646b795702e34be89c5745333d052aa2/share/man&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- Shared libraries disabled &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ENABLE_SHARED &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- Static libraries enabled &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ENABLE_STATIC &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- 12-bit JPEG support disabled &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WITH_12BIT &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- Arithmetic decoding support enabled &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WITH_ARITH_DEC &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- Arithmetic encoding support enabled &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WITH_ARITH_ENC &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- TurboJPEG API library enabled &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WITH_TURBOJPEG &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- TurboJPEG Java wrapper disabled &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WITH_JAVA &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- In-memory &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;/destination managers enabled &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WITH_MEM_SRCDST &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- Emulating libjpeg API/ABI v6.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WITH_JPEG7 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0, WITH_JPEG8 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- libjpeg API shared library version &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 62.3.0
-- Compiler flags &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; -O3 -DNDEBUG
-- Linker flags &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
-- INLINE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; __inline__ __attribute__&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;always_inline&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FORCE_INLINE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- THREAD_LOCAL &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; __thread
-- CMAKE_EXECUTABLE_SUFFIX &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
-- CMAKE_ASM_NASM_COMPILER &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /usr/local/bin/nasm
-- CMAKE_ASM_NASM_OBJECT_FORMAT &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; macho64
-- CMAKE_ASM_NASM_FLAGS &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; -DMACHO -D__x86_64__ -DPIC
-- SIMD extensions: x86_64 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WITH_SIMD &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- FLOATTEST &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sse
-- Configuring &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
-- Generating &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
-- Build files have been written to: /Users/ruki/Downloads/libjpeg-turbo-2.1.4/build_646b7957
make -j10
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 2%] Built target md5cmp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 19%] Built target wrjpgcom
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 20%] Built target simd
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 21%] Built target strtest
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 22%] Built target rdjpgcom
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 80%] Built target jpeg-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 84%] Built target turbojpeg-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 90%] Built target tjbench-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 90%] Built target tjunittest-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 91%] Built target jpegtran-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 98%] Built target djpeg-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 100%] Built target cjpeg-static
make install
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 1%] Built target strtest
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 3%] Built target wrjpgcom
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 19%] Built target simd
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 52%] Built target turbojpeg-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 53%] Built target rdjpgcom
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 82%] Built target jpeg-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 85%] Built target jpegtran-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 90%] Built target djpeg-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 93%] Built target tjunittest-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 97%] Built target cjpeg-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 98%] Built target tjbench-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;100%] Built target md5cmp
Install the project...
exporting libjpeg-turbo-2.1.4
  -&amp;gt; /Users/ruki/Downloads/libjpeg-turbo-2.1.4/build/artifacts/l/libjpeg-turbo/2.1.4/646b795702e34be89c5745333d052aa2
output to /Users/ruki/Downloads/libjpeg-turbo-2.1.4/build/artifacts
build ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As long as the match is detected, the build will usually complete with a near 100% success rate, and Xmake will output the build product to the current directory under &lt;code class=&quot;highlighter-rouge&quot;&gt;build/artifacts&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;interfacing-with-cross-compilation-toolchains&quot;&gt;Interfacing with cross-compilation toolchains&lt;/h4&gt;

&lt;p&gt;This smart build mode allows us to not only build native applications, but also to interface with the cross-compilation toolchain to support ios/android and any cross-compilation platform.&lt;/p&gt;

&lt;p&gt;For example, to build on Android, we simply pass the &lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=xrepo&lt;/code&gt; argument and switch to Android, and Xmake will pass all the ndk toolchain information.&lt;/p&gt;

&lt;p&gt;``bash
$ xmake f -p android –trybuild=xrepo –ndk=~/files/android-ndk-r20b -c
$ xmake
xmake f -c –require=n -v -p android -a armeabi-v7a -m release -k static –ndk=/Users/ruki/files/android-ndk-r20b
checking for Android SDK directory … ~/Library/Android/sdk
checking for Build Tools Version of Android SDK … 33.0.0
checking for NDK directory … /Users/ruki/files/android-ndk-r20b
checking for SDK version of NDK … … 21
checking for clang++ … /Users/ruki/files/android-ndk-r20b/toolchains/llvm/prebuilt/darwin-x86_64/bin/clang++
checking for the shared library linker (sh) … clang++
checking for clang++ … /Users/ruki/files/android-ndk-r20b/toolchains/llvm/prebuilt/darwin-x86_64/bin/clang++
checking for the linker (ld) … clang++
…
exporting libjpeg-turbo-2.1.4
  -&amp;gt; /Users/ruki/Downloads/libjpeg-turbo-2.1.4/build/artifacts/l/libjpeg-turbo/2.1.4/79c2e21f436b4ab08a3c23a6cbae8c0e
output to /Users/ruki/Downloads/libjpeg-turbo-2.1.4/build/artifacts
build ok!&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
#### fallback to direct compilation

If we don&#39;t want to use the xmake-repo build scripts, we can fall back to cmake/autoconf and try to build them directly.

However, this may have a certain failure rate and may compile additional binary targets that are not needed. The build script in xmake-repo is optimised to streamline a lot of unnecessary build parameters, such as disabling the tests/examples build.

We just need to hit n to cancel the smart build mode based on package scripts, and Xmake will give a new prompt to let the user choose whether to continue with the cmake/autoconf build attempt.

```bash
$ xmake
note: libjpeg-turbo 2.1.4 in xmake-repo found, try building it or you can run ``xmake f --trybuild=` to set buildsystem (pass -y or --confirm=y/n/d to skip confirm)?
please input: y (y/n)
n
note: CMakeLists.txt found, try building it or you can run `xmake f --trybuild=` to set buildsystem (pass -y or --confirm=y/n/d to skip confirm)?
please input: y (y/n)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;support-for-windows-arm64&quot;&gt;Support for Windows Arm64&lt;/h3&gt;

&lt;p&gt;We have also improved our Windows build support with the addition of Windows Arm64 platform support, simply by switching to the arm64 architecture.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -a arm64
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;improved-rule-support-for-sequential-execution-of-dependencies&quot;&gt;Improved rule support for sequential execution of dependencies&lt;/h3&gt;

&lt;p&gt;Associated dependencies can be bound to a batch of rules, i.e. instead of having to add rules to target one by one using &lt;code class=&quot;highlighter-rouge&quot;&gt;add_rules()&lt;/code&gt;, just apply a rule that will take effect for it and all its dependencies.&lt;/p&gt;

&lt;p&gt;For example&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We only need &lt;code class=&quot;highlighter-rouge&quot;&gt;add_rules(&quot;foo&quot;)&lt;/code&gt; to apply both foo and bar rules.&lt;/p&gt;

&lt;p&gt;However, by default there is no order of execution between dependencies, and scripts such as &lt;code class=&quot;highlighter-rouge&quot;&gt;on_build_file&lt;/code&gt; for foo and bar are executed in parallel, in an undefined order.&lt;/p&gt;

&lt;p&gt;To tightly control the order of execution, in newer versions we can configure &lt;code class=&quot;highlighter-rouge&quot;&gt;add_deps(&quot;bar&quot;, {order = true})&lt;/code&gt; to tell xmake that we need to execute scripts at the same level according to the order of dependencies.&lt;/p&gt;

&lt;p&gt;Example.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_build_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_build_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;bar’s &lt;code class=&quot;highlighter-rouge&quot;&gt;on_build_file&lt;/code&gt; will be executed first.&lt;/p&gt;

&lt;h3 id=&quot;better-dynamic-configuration-of-targets-and-rules&quot;&gt;Better dynamic configuration of targets and rules&lt;/h3&gt;

&lt;p&gt;The above way of controlling rule dependencies only works if both foo and bar rules are custom rules, which doesn’t work if you want to insert your own rules to be executed before xmake’s built-in rules.&lt;/p&gt;

&lt;p&gt;In this case, we need to use a more flexible dynamic rule creation and injection approach to modify the built-in rules.&lt;/p&gt;

&lt;p&gt;For example, if we want to execute the &lt;code class=&quot;highlighter-rouge&quot;&gt;on_build_file&lt;/code&gt; script for a custom cppfront rule before the built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;c++.build&lt;/code&gt; rule, we can do this in the following way.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cppfront&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.cpp2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c++.build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;deps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cppfront&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_build_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build cppfront file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cppfront&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;support-for-introducing-custom-rules-from-packages&quot;&gt;Support for introducing custom rules from packages&lt;/h3&gt;

&lt;p&gt;Now, we can also add custom build rule scripts to the package management repository to enable dynamic distribution and installation following the package.&lt;/p&gt;

&lt;p&gt;We need to put the custom rules into the &lt;code class=&quot;highlighter-rouge&quot;&gt;packages/x/xxx/rules&lt;/code&gt; directory of the repository and it will follow the package as it is installed.&lt;/p&gt;

&lt;p&gt;It does, of course, have some limitations.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In package rules, we cannot add &lt;code class=&quot;highlighter-rouge&quot;&gt;on_load&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;after_load&lt;/code&gt; scripts, but we can usually use &lt;code class=&quot;highlighter-rouge&quot;&gt;on_config&lt;/code&gt; instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;adding-package-rules&quot;&gt;Adding package rules&lt;/h4&gt;

&lt;p&gt;We need to add the rules script to the rules fixed directory, for example: packages/z/zlib/rules/foo.lua&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo: on_config %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;applying-package-rules&quot;&gt;Applying package rules&lt;/h4&gt;

&lt;p&gt;The rules are used in a similar way as before, the only difference being that we need to specify which package’s rules to access by prefixing them with &lt;code class=&quot;highlighter-rouge&quot;&gt;@packagename/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The exact format: &lt;code class=&quot;highlighter-rouge&quot;&gt;add_rules(&quot;@packagename/rulename&quot;)`, for example:&lt;/code&gt;add_rules(“@zlib/foo”)`.&lt;/p&gt;

&lt;p&gt;``lua
add_requires(“zlib”, {system = false})
target(“test”)
    set_kind(“binary”)
    add_files(“src/*.cpp”)
    add_packages(“zlib”)
    add_rules(“@zlib/foo”)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
#### Referencing rules by package alias

If a package alias exists, xmake will give preference to the package alias to get the rules.

``` lua
add_requires(&quot;zlib&quot;, {alias = &quot;zlib2&quot;, system = false})
target(&quot;test&quot;)
    set_kind(&quot;binary&quot;)
    add_files(&quot;src/*.cpp&quot;)
    add_packages(&quot;zlib2&quot;)
    add_rules(&quot;@zlib2/foo&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;adding-package-rule-dependencies&quot;&gt;Adding package rule dependencies&lt;/h4&gt;

&lt;p&gt;We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;add_deps(&quot;@bar&quot;)&lt;/code&gt; to add additional rules relative to the current package directory.&lt;/p&gt;

&lt;p&gt;However, we cannot add rule dependencies from other packages, they are completely isolated and we can only refer to rules from other packages imported by &lt;code class=&quot;highlighter-rouge&quot;&gt;add_requires&lt;/code&gt; in the user project.&lt;/p&gt;

&lt;p&gt;packages/z/zlib/rules/foo.lua&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo: on_config %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;packages/z/zlib/rules/bar.lua&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar: on_config %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;stricter-package-dependency-compatibility-support&quot;&gt;Stricter package dependency compatibility support&lt;/h3&gt;

&lt;p&gt;Two new package related policies have been added to enable stricter package dependency compatibility control.&lt;/p&gt;

&lt;p&gt;This is to address the fact that some packages may have abi incompatibilities or break other packages that depend on them every time they are updated, and by default Xmake will not recompile and install them unless their versions and configurations are also updated.&lt;/p&gt;

&lt;p&gt;There is a chance that the compilation compatibility will be broken and the link will fail.&lt;/p&gt;

&lt;h4 id=&quot;packagelibrarydepsstrict_compatibility&quot;&gt;package.librarydeps.strict_compatibility&lt;/h4&gt;

&lt;p&gt;is disabled by default, if enabled then strict compatibility is maintained between the current package and all its library dependencies, and any version update of a dependent package will force a recompile install of the current package.&lt;/p&gt;

&lt;p&gt;This ensures that all packages are binary compatible and that no linking and runtime errors occur when linking with other installed packages due to changes to the interface of a dependent package.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;zoo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_policy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;package.librarydeps.strict_compatibility&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For example, if there is an updated version of bar or zoo, then foo will also be recompiled and installed.&lt;/p&gt;

&lt;h4 id=&quot;packagestrict_compatibility&quot;&gt;package.strict_compatibility&lt;/h4&gt;

&lt;p&gt;is disabled by default, if it is enabled then strict compatibility is maintained between the current package and all other packages that depend on it, and any version update of this package will force a recompile and install of the other parent packages.&lt;/p&gt;

&lt;p&gt;This ensures that all packages are binary compatible and that no linking and runtime errors occur when linking with other installed packages due to changes in the interface of a dependent package.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_policy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;package.strict_compatibility&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zoo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For example, if there is an updated version of foo, then both bar and zoo will be forced to recompile and install.&lt;/p&gt;

&lt;h4 id=&quot;packageinstall_always&quot;&gt;package.install_always&lt;/h4&gt;

&lt;p&gt;This is useful for local integration of third-party source packages,
as the package will always be reinstalled each time &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f -c&lt;/code&gt; is run to reconfigure it.&lt;/p&gt;

&lt;p&gt;As the user may at any time need to modify the third party source code and recompile it for integration.&lt;/p&gt;

&lt;p&gt;Previously it was only possible to trigger a recompile by changing the package version number each time,
but with this strategy it is possible to trigger a recompile each time.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cmake&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_sourcedir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scriptdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_policy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;package.install_always&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-DCMAKE_BUILD_TYPE=&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Debug&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-DBUILD_SHARED_LIBS=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ON&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;OFF&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;package.tools.cmake&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_cfuncs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;add&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo.h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;package_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/main.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;adding-the-clang-cl-toolchain&quot;&gt;Adding the clang-cl toolchain&lt;/h3&gt;

&lt;p&gt;Although we did support switching to the clang-cl compiler in previous versions, the switch was cumbersome and had to be set up one by one.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --cxx&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;clang-cl --cc&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;clang-cl -c
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And you have to add the directory where clang-cl.exe is located to %PATH% to make it work.&lt;/p&gt;

&lt;p&gt;Now that vs comes with the clang-cl toolchain, Xmake is fully capable of detecting it and using it automatically.&lt;/p&gt;

&lt;p&gt;So, in this new version, we have added the clang-cl toolchain, and all it takes is &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --toolchain=clang-cl&lt;/code&gt; to quickly switch to the clang-cl toolchain without any PATH settings.&lt;/p&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2140&quot;&gt;#2140&lt;/a&gt;: Support Windows Arm64&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2719&quot;&gt;#2719&lt;/a&gt;: Add &lt;code class=&quot;highlighter-rouge&quot;&gt;package.librarydeps.strict_compatibility&lt;/code&gt; to strict compatibility for package linkdeps&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2810&quot;&gt;#2810&lt;/a&gt;: Support os.execv to run shell script file&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2817&quot;&gt;#2817&lt;/a&gt;: Improve rule to support dependence order&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2824&quot;&gt;#2824&lt;/a&gt;: Pass cross-file to meson.install and trybuild&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2856&quot;&gt;#2856&lt;/a&gt;: Improve to debug package using the debug source directory&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2859&quot;&gt;#2859&lt;/a&gt;: Improve trybuild to build 3rd source library using xmake-repo scripts&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2879&quot;&gt;#2879&lt;/a&gt;: Support for dynamic creation and injection of rules and targets in script scope&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2374&quot;&gt;#2374&lt;/a&gt;: Allow xmake package to embed rules and scripts&lt;/li&gt;
  &lt;li&gt;Add clang-cl toolchain&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2745&quot;&gt;#2745&lt;/a&gt;: Improve os.cp to support symlink&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2773&quot;&gt;#2773&lt;/a&gt;: Improve vcpkg packages to support freebsd&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2778&quot;&gt;#2778&lt;/a&gt;: Improve Improve xrepo.env for target&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2783&quot;&gt;#2783&lt;/a&gt;: Add digest algorithm option for wdk signtool&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2787&quot;&gt;#2787&lt;/a&gt;: Improve json to support empty array&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2782&quot;&gt;#2782&lt;/a&gt;: Improve to find matlab and runtime&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2793&quot;&gt;#2793&lt;/a&gt;: Improve mconfdialog&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2804&quot;&gt;#2804&lt;/a&gt;: Support macOS arm64/x86_64 cross-compilation for installing packages&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2809&quot;&gt;#2809&lt;/a&gt;: Improve cl optimization option&lt;/li&gt;
  &lt;li&gt;Improve trybuild for meson/cmake/autoconf&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/discussions/2846&quot;&gt;#2846&lt;/a&gt;: Improve to generate config files&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2866&quot;&gt;#2866&lt;/a&gt;: Better control over the order of execution of rules&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2740&quot;&gt;#2740&lt;/a&gt;: Fix build c++ modules stuck and slower for msvc&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2875&quot;&gt;#2875&lt;/a&gt;: Fix build linux driver error&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2885&quot;&gt;#2885&lt;/a&gt;: Fix pch not found with msvc/ccache&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 09 Oct 2022 00:00:00 +0800</pubDate>
        <link>https://tboox.org/2022/10/09/xmake-update-v2.7.2/</link>
        <guid isPermaLink="true">https://tboox.org/2022/10/09/xmake-update-v2.7.2/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>trybuild</category>
        
        <category>rule</category>
        
        <category>cmake</category>
        
        <category>autoconf</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>Xmake v2.7.2 发布，更加智能化构建第三方库</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Xmake&lt;/a&gt; 是一个基于 Lua 的轻量级跨平台构建工具。&lt;/p&gt;

&lt;p&gt;它非常的轻量，没有任何依赖，因为它内置了 Lua 运行时。&lt;/p&gt;

&lt;p&gt;它使用 xmake.lua 维护项目构建，相比 makefile/CMakeLists.txt，配置语法更加简洁直观，对新手非常友好，短时间内就能快速入门，能够让用户把更多的精力集中在实际的项目开发上。&lt;/p&gt;

&lt;p&gt;我们能够使用它像 Make/Ninja 那样可以直接编译项目，也可以像 CMake/Meson 那样生成工程文件，另外它还有内置的包管理系统来帮助用户解决 C/C++ 依赖库的集成使用问题。&lt;/p&gt;

&lt;p&gt;目前，Xmake 主要用于 C/C++ 项目的构建，但是同时也支持其他 native 语言的构建，可以实现跟 C/C++ 进行混合编译，同时编译速度也是非常的快，可以跟 Ninja 持平。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xmake = Build backend + Project Generator + Package Manager + [Remote|Distributed] Build + Cache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;尽管不是很准确，但我们还是可以把 Xmake 按下面的方式来理解：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xmake ~= Make/Ninja + CMake/Meson + Vcpkg/Conan + distcc + ccache/sccache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/about/course&quot;&gt;入门课程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;新特性介绍&quot;&gt;新特性介绍&lt;/h2&gt;

&lt;h3 id=&quot;更加智能化构建第三方库&quot;&gt;更加智能化构建第三方库&lt;/h3&gt;

&lt;p&gt;在先前的版本中，Xmake 提供了一种 TryBuild 模式，可以在没有 xmake.lua 的情况下，使用 Xmake 尝试对 autoconf/cmake/meson 等维护的第三方项目进行直接构建。&lt;/p&gt;

&lt;p&gt;其实，也就是让 Xmake 检测到对应的构建系统后，调用 cmake 等命令来实现，但是会帮助用户简化配置操作，另外还能对接 xmake 的交叉编译工具链配置。&lt;/p&gt;

&lt;p&gt;但是，这种模式有一定的失败率，比如以下一些情况，都会可能导致构建失败：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;项目代码自身存在缺陷，导致编译错误&lt;/li&gt;
  &lt;li&gt;项目代码不支持当前平台&lt;/li&gt;
  &lt;li&gt;构建脚本存在缺陷&lt;/li&gt;
  &lt;li&gt;缺少特定的配置参数&lt;/li&gt;
  &lt;li&gt;缺少依赖库，需要用户手动安装&lt;/li&gt;
  &lt;li&gt;编译器版本太低，不支持部分代码&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而 TryBuild 模式通常处理这些情况，但是在新版本中，我们对 TryBuild 模式引入了一种新的机制，通过复用 &lt;a href=&quot;https://github.com/xmake-io/xmake-repo&quot;&gt;xmake-repo&lt;/a&gt; 仓库中的构建脚本，来改进构建逻辑。&lt;/p&gt;

&lt;p&gt;它大概得处理流程是这样子的：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在第三方源码库目录执行 xmake 命令&lt;/li&gt;
  &lt;li&gt;Xmake 获取目录名，尝试解析项目名和版本&lt;/li&gt;
  &lt;li&gt;尝试从 xmake-repo 仓库匹配现有的包&lt;/li&gt;
  &lt;li&gt;如果匹配成功，直接采用包中构建逻辑来构建&lt;/li&gt;
  &lt;li&gt;如果没匹配成功，回退到原来的 TryBuild 逻辑&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这能带来什么好处呢，如果匹配成功，我们能够解决上面提到的各种问题。&lt;/p&gt;

&lt;p&gt;即使当前项目源码不支持指定平台，或者源码和构建脚本存在一定的缺陷，Xmake 也能自动打入特定 patch 去修复它，并引入需要的依赖包，确保它肯定能够一键编译通过。&lt;/p&gt;

&lt;p&gt;我们使用 libjpeg 库为例，来直观的感受下。&lt;/p&gt;

&lt;h4 id=&quot;首先是下载对应源码包&quot;&gt;首先是下载对应源码包&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;wget https://jaist.dl.sourceforge.net/project/libjpeg-turbo/2.1.4/libjpeg-turbo-2.1.4.tar.gz
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;tar -xvf libjpeg-turbo-2.1.4.tar.gz
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;libjpeg-turbo-2.1.4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;然后进入目录执行-xmake-命令&quot;&gt;然后进入目录执行 Xmake 命令&lt;/h4&gt;

&lt;p&gt;Xmake 如果检测到是 libjpeg 库，就会提示用户，是否作为 libjpeg 2.1.4 来构建。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruki-2:libjpeg-turbo-2.1.4 ruki&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;xmake
note: libjpeg-turbo 2.1.4 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;xmake-repo found, try building it or you can run &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; to &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;buildsystem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass -y or --confirm&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;y/n/d to skip confirm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;?
please input: y &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们按下回车键确认继续构建。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;checking &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;cmake ... /usr/local/bin/cmake
/usr/local/bin/cmake -DCMAKE_BUILD_TYPE&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Release -DENABLE_SHARED&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;OFF -DENABLE_STATIC&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ON -DCMAKE_POSITION_INDEPENDENT_CODE&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ON -DCMAKE_INSTALL_LIBDIR:PATH&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;lib -DCMAKE_INSTALL_PREFIX&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/Users/ruki/.xmake/packages/l/libjpeg-turbo/2.1.4/646b795702e34be89c5745333d052aa2 -G &lt;span class=&quot;s2&quot;&gt;&quot;Unix Makefiles&quot;&lt;/span&gt; -DCMAKE_POSITION_INDEPENDENT_CODE&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ON /Users/ruki/Downloads/libjpeg-turbo-2.1.4
-- CMAKE_BUILD_TYPE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Release
-- VERSION &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2.1.4, BUILD &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 20220923
-- 64-bit build &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x86_64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- CMAKE_INSTALL_PREFIX &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /Users/ruki/.xmake/packages/l/libjpeg-turbo/2.1.4/646b795702e34be89c5745333d052aa2
-- CMAKE_INSTALL_BINDIR &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; bin &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/Users/ruki/.xmake/packages/l/libjpeg-turbo/2.1.4/646b795702e34be89c5745333d052aa2/bin&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- CMAKE_INSTALL_DATAROOTDIR &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; share &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/Users/ruki/.xmake/packages/l/libjpeg-turbo/2.1.4/646b795702e34be89c5745333d052aa2/share&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- CMAKE_INSTALL_DOCDIR &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; share/doc/libjpeg-turbo &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/Users/ruki/.xmake/packages/l/libjpeg-turbo/2.1.4/646b795702e34be89c5745333d052aa2/share/doc/libjpeg-turbo&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- CMAKE_INSTALL_INCLUDEDIR &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; include &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/Users/ruki/.xmake/packages/l/libjpeg-turbo/2.1.4/646b795702e34be89c5745333d052aa2/include&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- CMAKE_INSTALL_LIBDIR &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; lib &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/Users/ruki/.xmake/packages/l/libjpeg-turbo/2.1.4/646b795702e34be89c5745333d052aa2/lib&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- CMAKE_INSTALL_MANDIR &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; share/man &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/Users/ruki/.xmake/packages/l/libjpeg-turbo/2.1.4/646b795702e34be89c5745333d052aa2/share/man&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- Shared libraries disabled &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ENABLE_SHARED &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- Static libraries enabled &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ENABLE_STATIC &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- 12-bit JPEG support disabled &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WITH_12BIT &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- Arithmetic decoding support enabled &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WITH_ARITH_DEC &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- Arithmetic encoding support enabled &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WITH_ARITH_ENC &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- TurboJPEG API library enabled &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WITH_TURBOJPEG &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- TurboJPEG Java wrapper disabled &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WITH_JAVA &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- In-memory &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;/destination managers enabled &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WITH_MEM_SRCDST &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- Emulating libjpeg API/ABI v6.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WITH_JPEG7 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0, WITH_JPEG8 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- libjpeg API shared library version &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 62.3.0
-- Compiler flags &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  -O3 -DNDEBUG
-- Linker flags &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
-- INLINE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; __inline__ __attribute__&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;always_inline&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FORCE_INLINE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- THREAD_LOCAL &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; __thread
-- CMAKE_EXECUTABLE_SUFFIX &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
-- CMAKE_ASM_NASM_COMPILER &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /usr/local/bin/nasm
-- CMAKE_ASM_NASM_OBJECT_FORMAT &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; macho64
-- CMAKE_ASM_NASM_FLAGS &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  -DMACHO -D__x86_64__ -DPIC
-- SIMD extensions: x86_64 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WITH_SIMD &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-- FLOATTEST &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sse
-- Configuring &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
-- Generating &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
-- Build files have been written to: /Users/ruki/Downloads/libjpeg-turbo-2.1.4/build_646b7957
make -j10
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  2%] Built target md5cmp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 19%] Built target wrjpgcom
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 20%] Built target simd
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 21%] Built target strtest
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 22%] Built target rdjpgcom
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 80%] Built target jpeg-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 84%] Built target turbojpeg-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 90%] Built target tjbench-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 90%] Built target tjunittest-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 91%] Built target jpegtran-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 98%] Built target djpeg-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;100%] Built target cjpeg-static
make install
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  1%] Built target strtest
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  3%] Built target wrjpgcom
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 19%] Built target simd
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 52%] Built target turbojpeg-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 53%] Built target rdjpgcom
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 82%] Built target jpeg-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 85%] Built target jpegtran-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 90%] Built target djpeg-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 93%] Built target tjunittest-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 97%] Built target cjpeg-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 98%] Built target tjbench-static
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;100%] Built target md5cmp
Install the project...
exporting libjpeg-turbo-2.1.4
  -&amp;gt; /Users/ruki/Downloads/libjpeg-turbo-2.1.4/build/artifacts/l/libjpeg-turbo/2.1.4/646b795702e34be89c5745333d052aa2
output to /Users/ruki/Downloads/libjpeg-turbo-2.1.4/build/artifacts
build ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;只要检测匹配成功，通常肯定能够完成编译，成功率接近 100%，最后 Xmake 会将编译产物输出到当前目录的 &lt;code class=&quot;highlighter-rouge&quot;&gt;build/artifacts&lt;/code&gt; 下面。&lt;/p&gt;

&lt;h4 id=&quot;对接交叉编译工具链&quot;&gt;对接交叉编译工具链&lt;/h4&gt;

&lt;p&gt;这种智能构建模式，我们不仅能够编译本机程序，还可以对接交叉编译工具链，实现对 ios/android 以及任意交叉编译平台的支持。&lt;/p&gt;

&lt;p&gt;例如，编译 Android 平台，我们只需要传递 &lt;code class=&quot;highlighter-rouge&quot;&gt;--trybuild=xrepo&lt;/code&gt; 参数，然后切换到 android 平台即可，Xmake 会透传所有 ndk 工具链信息。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p android --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xrepo --ndk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/files/android-ndk-r20b -c
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
xmake f -c --require&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;n -v -p android -a armeabi-v7a -m release -k static --ndk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/Users/ruki/files/android-ndk-r20b
checking &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Android SDK directory ... ~/Library/Android/sdk
checking &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Build Tools Version of Android SDK ... 33.0.0
checking &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;NDK directory ... /Users/ruki/files/android-ndk-r20b
checking &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;SDK version of NDK ... 21
checking &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;clang++ ... /Users/ruki/files/android-ndk-r20b/toolchains/llvm/prebuilt/darwin-x86_64/bin/clang++
checking &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the shared library linker &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sh&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ... clang++
checking &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;clang++ ... /Users/ruki/files/android-ndk-r20b/toolchains/llvm/prebuilt/darwin-x86_64/bin/clang++
checking &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the linker &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ld&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ... clang++
...
exporting libjpeg-turbo-2.1.4
  -&amp;gt; /Users/ruki/Downloads/libjpeg-turbo-2.1.4/build/artifacts/l/libjpeg-turbo/2.1.4/79c2e21f436b4ab08a3c23a6cbae8c0e
output to /Users/ruki/Downloads/libjpeg-turbo-2.1.4/build/artifacts
build ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;回退到直接编译&quot;&gt;回退到直接编译&lt;/h4&gt;

&lt;p&gt;如果我们不想使用 xmake-repo 的构建脚本，我们也能回退到 cmake/autoconf 直接去尝试构建它们。&lt;/p&gt;

&lt;p&gt;但是这样可能会存在一定的失败率，并且有可能会额外编译一些不需要的二进制目标。而 xmake-repo 里面的构建脚本是最优化的，精简了很多没必要的构建参数，比如禁用 tests/examples 构建等等。&lt;/p&gt;

&lt;p&gt;我们只需要先敲 n 取消基于包脚本的智能构建模式，Xmake 会有新的提示，让用户选择是否继续采用 cmake/autoconf 来尝试构建。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
note: libjpeg-turbo 2.1.4 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;xmake-repo found, try building it or you can run &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; to &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;buildsystem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass -y or --confirm&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;y/n/d to skip confirm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;?
please input: y &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
n
note: CMakeLists.txt found, try building it or you can run &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;xmake f --trybuild&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; to &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;buildsystem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pass -y or --confirm&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;y/n/d to skip confirm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;?
please input: y &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;支持-windows-arm64&quot;&gt;支持 Windows Arm64&lt;/h3&gt;

&lt;p&gt;新版本我们还对 Windows 的构建支持做了改进，新增了 Windows Arm64 平台支持，只需要切换到 arm64 架构即可。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -a arm64
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;改进规则支持依赖顺序执行&quot;&gt;改进规则支持依赖顺序执行&lt;/h3&gt;

&lt;p&gt;关联依赖可以绑定一批规则，也就是不必对 target 挨个去使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;add_rules()&lt;/code&gt; 添加规则，只需要应用一个规则，就能生效它和它的所有依赖规则。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们只需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;add_rules(&quot;foo&quot;)&lt;/code&gt;，就能同时应用 foo 和 bar 两个规则。&lt;/p&gt;

&lt;p&gt;但是，默认情况下，依赖之间是不存在执行的先后顺序的，foo 和 bar 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;on_build_file&lt;/code&gt; 等脚本是并行执行的，顺序未定义。&lt;/p&gt;

&lt;p&gt;如果要严格控制执行顺序，在新版本中，我们可以配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;add_deps(&quot;bar&quot;, {order = true})&lt;/code&gt;，告诉 xmake，我们需要根据依赖顺序来执行同级别的脚本。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_build_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_build_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;bar 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;on_build_file&lt;/code&gt; 将会被先执行。&lt;/p&gt;

&lt;h3 id=&quot;更好的动态配置目标和规则&quot;&gt;更好的动态配置目标和规则&lt;/h3&gt;

&lt;p&gt;上面这种控制规则依赖的方式，只适合 foo 和 bar 两个规则都是自定义规则，如果想要将自己的规则插入到 xmake 的内置规则之前执行，这就不适用了。&lt;/p&gt;

&lt;p&gt;这个时候，我们需要使用更加灵活的动态规则创建和注入的方式，去修改内置规则。&lt;/p&gt;

&lt;p&gt;例如，我们想在内置的 &lt;code class=&quot;highlighter-rouge&quot;&gt;c++.build&lt;/code&gt; 规则之前，执行自定义 cppfront 规则的 &lt;code class=&quot;highlighter-rouge&quot;&gt;on_build_file&lt;/code&gt; 脚本，我们可以通过下面的方式来实现。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cppfront&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.cpp2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c++.build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;deps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cppfront&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_build_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourcefile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build cppfront file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cppfront&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;支持从包中引入自定义规则&quot;&gt;支持从包中引入自定义规则&lt;/h3&gt;

&lt;p&gt;现在，我们还可以在包管理仓库中，添加自定义构架规则脚本，实现跟随包进行动态下发和安装。&lt;/p&gt;

&lt;p&gt;我们需要将自定义规则放到仓库的 &lt;code class=&quot;highlighter-rouge&quot;&gt;packages/x/xxx/rules&lt;/code&gt; 目录中，它会跟随包一起被安装。&lt;/p&gt;

&lt;p&gt;当然，它也存在一些限制：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在包中规则，我们不能添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;on_load&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;after_load&lt;/code&gt; 脚本，但是通常我们可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;on_config&lt;/code&gt; 来代替。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;添加包规则&quot;&gt;添加包规则&lt;/h4&gt;

&lt;p&gt;我们需要将规则脚本添加到 rules 固定目录下，例如：packages/z/zlib/rules/foo.lua&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo: on_config %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;应用包规则&quot;&gt;应用包规则&lt;/h4&gt;

&lt;p&gt;使用规则的方式跟之前类似，唯一的区别就是，我们需要通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;@packagename/&lt;/code&gt; 前缀去指定访问哪个包里面的规则。&lt;/p&gt;

&lt;p&gt;具体格式：&lt;code class=&quot;highlighter-rouge&quot;&gt;add_rules(&quot;@packagename/rulename&quot;)&lt;/code&gt;，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;add_rules(&quot;@zlib/foo&quot;)&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zlib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zlib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@zlib/foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;通过包别名引用规则&quot;&gt;通过包别名引用规则&lt;/h4&gt;

&lt;p&gt;如果存在一个包的别名，xmake 将优先考虑包的别名来获得规则。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zlib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;zlib2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zlib2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@zlib2/foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;添加包规则依赖&quot;&gt;添加包规则依赖&lt;/h4&gt;

&lt;p&gt;我们可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;add_deps(&quot;@bar&quot;)&lt;/code&gt;来添加相对于当前包目录的其他规则。&lt;/p&gt;

&lt;p&gt;然而，我们不能添加来自其他包的规则依赖，它们是完全隔离的，我们只能参考用户项目中由&lt;code class=&quot;highlighter-rouge&quot;&gt;add_requires&lt;/code&gt;导入的其他包的规则。&lt;/p&gt;

&lt;p&gt;packages/z/zlib/rules/foo.lua&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo: on_config %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;packages/z/zlib/rules/bar.lua&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar: on_config %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;更加严格的包依赖兼容性支持&quot;&gt;更加严格的包依赖兼容性支持&lt;/h3&gt;

&lt;p&gt;我们新增了两个包相关的策略，用于开启更加严格的包依赖兼容性控制。&lt;/p&gt;

&lt;p&gt;这主要用于解决一些包每次版本更新，可能都会存在一些 abi 不兼容，或者破坏其他依赖它的包，而默认 Xmake 是不会去重新编译安装它们的，除非它们的版本和配置也被更新了。&lt;/p&gt;

&lt;p&gt;这就可能存在一定概率编译兼容性被破坏，导致最终链接失败。&lt;/p&gt;

&lt;h4 id=&quot;packagelibrarydepsstrict_compatibility&quot;&gt;package.librarydeps.strict_compatibility&lt;/h4&gt;

&lt;p&gt;默认禁用，如果启用它，那么当前包和它的所有库依赖包之间会保持严格的兼容性，任何依赖包的版本更新，都会强制触发当前包的重新编译安装。&lt;/p&gt;

&lt;p&gt;以确保所有的包都是二进制兼容的，不会因为某个依赖包接口改动，导致和其他已被安装的其他包一起链接时候，发生链接和运行错误。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;zoo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_policy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;package.librarydeps.strict_compatibility&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;例如，如果 bar 或者 zoo 的版本有更新，那么 foo 也会重新编译安装。&lt;/p&gt;

&lt;h4 id=&quot;packagestrict_compatibility&quot;&gt;package.strict_compatibility&lt;/h4&gt;

&lt;p&gt;默认禁用，如果启用它，那么当前包和其他所有依赖它的包之间会保持严格的兼容性，这个包的版本更新，都会强制触发其他父包的重新编译安装。&lt;/p&gt;

&lt;p&gt;以确保所有的包都是二进制兼容的，不会因为某个依赖包接口改动，导致和其他已被安装的其他包一起链接时候，发生链接和运行错误。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_policy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;package.strict_compatibility&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zoo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;例如，如果 foo 的版本有更新，那么 bar 和 zoo 都会被强制重新编译安装。&lt;/p&gt;

&lt;h4 id=&quot;packageinstall_always&quot;&gt;package.install_always&lt;/h4&gt;

&lt;p&gt;每次运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f -c&lt;/code&gt; 重新配置的时候，总是会重新安装包，这对于本地第三方源码包集成时候比较有用。&lt;/p&gt;

&lt;p&gt;因为，用户可能随时需要修改第三方源码，然后重新编译集成它们。&lt;/p&gt;

&lt;p&gt;之前只能通过每次修改包版本号，来触发重新编译，但是有了这个策略，就能每次都会触发重编。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cmake&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_sourcedir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scriptdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_policy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;package.install_always&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-DCMAKE_BUILD_TYPE=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Debug&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-DBUILD_SHARED_LIBS=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ON&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;OFF&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;package.tools.cmake&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_cfuncs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;add&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo.h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;package_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/main.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;新增-clang-cl-工具链&quot;&gt;新增 clang-cl 工具链&lt;/h3&gt;

&lt;p&gt;尽管之前的版本，我们也支持切换到 clang-cl 编译器，但是切换比较繁琐，得挨个设置。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --cxx&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;clang-cl --cc&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;clang-cl -c
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;而且还得将 clang-cl.exe 所在目录加入 %PATH% 才行。&lt;/p&gt;

&lt;p&gt;既然现在 vs 都自带了 clang-cl 工具链，那么 Xmake 完全可以自动检测到并使用它。&lt;/p&gt;

&lt;p&gt;因此，在新版本中，我们新增了 clang-cl 工具链，仅仅只需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --toolchain=clang-cl&lt;/code&gt; 就可以快速切换到 clang-cl 工具链，而无需任何 PATH 设置。&lt;/p&gt;

&lt;h2 id=&quot;更新内容&quot;&gt;更新内容&lt;/h2&gt;

&lt;h3 id=&quot;新特性&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2140&quot;&gt;#2140&lt;/a&gt;: 支持 Windows Arm64&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2719&quot;&gt;#2719&lt;/a&gt;: 添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.librarydeps.strict_compatibility&lt;/code&gt; 策略严格限制包依赖兼容性&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2810&quot;&gt;#2810&lt;/a&gt;: 支持 os.execv 去执行 shell 脚本文件&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2817&quot;&gt;#2817&lt;/a&gt;: 改进规则支持依赖顺序执行&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2824&quot;&gt;#2824&lt;/a&gt;: 传递 cross-file 交叉编译环境给 meson.install 和 trybuild&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2856&quot;&gt;#2856&lt;/a&gt;: xrepo 支持从当前指定源码目录调试程序&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2859&quot;&gt;#2859&lt;/a&gt;: 改进对三方库的 trybuild 构建，利用 xmake-repo 仓库脚本更加智能化地构建三方库&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2879&quot;&gt;#2879&lt;/a&gt;: 更好的动态创建和配置 target 和 rule&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2374&quot;&gt;#2374&lt;/a&gt;: 允许 xmake 包中引入自定义规则&lt;/li&gt;
  &lt;li&gt;添加 clang-cl 工具链&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;改进&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2745&quot;&gt;#2745&lt;/a&gt;: 改进 os.cp 支持符号链接复制&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2773&quot;&gt;#2773&lt;/a&gt;: 改进 vcpkg 包安装，支持 freebsd 平台&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2778&quot;&gt;#2778&lt;/a&gt;: 改进 xrepo.env 支持 target 的运行环境加载&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2783&quot;&gt;#2783&lt;/a&gt;: 添加摘要算法选项到 WDK 的 signtool 签名工具&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2787&quot;&gt;#2787&lt;/a&gt;: 改进 json 支持空数组&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2782&quot;&gt;#2782&lt;/a&gt;: 改进查找 matlib sdk 和运行时&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2793&quot;&gt;#2793&lt;/a&gt;: 改进 mconfdialog 配置操作体验&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2804&quot;&gt;#2804&lt;/a&gt;: 安装依赖包支持 macOS arm64/x86_64 交叉编译&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2809&quot;&gt;#2809&lt;/a&gt;: 改进 msvc 的编译优化选项&lt;/li&gt;
  &lt;li&gt;改进 trybuild 模式，为 meson/autoconf/cmake 提供更好的交叉编译支持&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/discussions/2846&quot;&gt;#2846&lt;/a&gt;: 改进对 configfiles 的生成&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2866&quot;&gt;#2866&lt;/a&gt;: 更好地控制 rule 规则执行顺序&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-修复&quot;&gt;Bugs 修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2740&quot;&gt;#2740&lt;/a&gt;: 修复 msvc 构建 C++ modules 卡死问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2875&quot;&gt;#2875&lt;/a&gt;: 修复构建 linux 驱动错误&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2885&quot;&gt;#2885&lt;/a&gt;: 修复 ccache 下，msvc 编译 pch 失败问题&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 09 Oct 2022 00:00:00 +0800</pubDate>
        <link>https://tboox.org/cn/2022/10/09/xmake-update-v2.7.2/</link>
        <guid isPermaLink="true">https://tboox.org/cn/2022/10/09/xmake-update-v2.7.2/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>trybuild</category>
        
        <category>rule</category>
        
        <category>cmake</category>
        
        <category>autoconf</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>Xmake v2.7.1 Released, Better C++ Modules Support</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Xmake&lt;/a&gt; is a lightweight cross-platform build utility based on Lua.&lt;/p&gt;

&lt;p&gt;It is very lightweight and has no dependencies because it has a built-in Lua runtime.&lt;/p&gt;

&lt;p&gt;It uses xmake.lua to maintain project builds and its configuration syntax is very simple and readable.&lt;/p&gt;

&lt;p&gt;We can use it to build project directly like Make/Ninja, or generate project files like CMake/Meson, and it also has a built-in package management system to help users solve the integrated use of C/C++ dependent libraries.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xmake = Build backend + Project Generator + Package Manager + [Remote|Distributed] Build + Cache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Although not very precise, we can still understand Xmake in the following way:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xmake ~= Make/Ninja + CMake/Meson + Vcpkg/Conan + distcc + ccache/sccache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/&quot;&gt;Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction-of-new-features&quot;&gt;Introduction of new features&lt;/h2&gt;

&lt;p&gt;In this release, we have refactored and improved the C++20 Modules implementation, improved the dependency graph parsing of module files, added support for STL and User HeaderUnits, and made the CMakelists/compile_commands generator support C++ Modules.&lt;/p&gt;

&lt;p&gt;In addition, we’ve added an &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake watch&lt;/code&gt; plugin that can monitor current project file updates in real time, automatically trigger incremental builds, or run some custom commands.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-watch.gif&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;c-modules-improvements&quot;&gt;C++ Modules Improvements&lt;/h3&gt;

&lt;p&gt;Xmake has long supported C++ Modules build support, and can automatically analyze dependencies between modules to maximize parallel compilation.
In addition, Xmake uses &lt;code class=&quot;highlighter-rouge&quot;&gt;.mpp&lt;/code&gt; as the default module extension, but also supports &lt;code class=&quot;highlighter-rouge&quot;&gt;.ixxx&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.cppm&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.mxx&lt;/code&gt; and so on.&lt;/p&gt;

&lt;p&gt;For example&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_languages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c++20&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;class&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;src/*.mpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For more examples see: &lt;a href=&quot;https://github.com/xmake-io/xmake/tree/master/tests/projects/c%2B%2B/modules&quot;&gt;C++ Modules&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, the previous implementation has many shortcomings.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;no support for HeaderUnits, so you can’t use modules like stl&lt;/li&gt;
  &lt;li&gt;the module dependency graph parsing is done by scanning the source code itself, and does not support the dependency scanning provided by the compiler, so it is not fully reliable&lt;/li&gt;
  &lt;li&gt;do not support CMakelists generation&lt;/li&gt;
  &lt;li&gt;compile_commands.json generation is not supported&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the new version, we have refactored and upgraded the implementation of C++20 module, and we support all the points mentioned above, and added support for Headerunits, so we can introduce STL and user header modules in the module.&lt;/p&gt;

&lt;p&gt;Also, since higher versions of msvc and gcc have built-in scan analysis of module dependency graphs, Xmake prioritizes module dependency graph analysis with the compiler, and if the compiler does not support it (clang), then Xmake will degrade to its own source code scan implementation.&lt;/p&gt;

&lt;p&gt;A related patch is available at &lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2641&quot;&gt;#2641&lt;/a&gt;, with many thanks to &lt;a href=&quot;https://github.com/Arthapz&quot;&gt;@Arthapz&lt;/a&gt; for their contribution.&lt;/p&gt;

&lt;p&gt;Here is an example of a module that uses STL HeaderUnits, e.g.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;stl_headerunit$ &lt;/span&gt;xmake
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 0%]: generating.cxx.module.deps src/main.cpp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 0%]: generating.cxx.module.deps src/hello.mpp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 20%]: generating.cxx.headerunit.bmi iostream
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 60%]: generating.cxx.module.bmi hello
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 70%]: cache compiling.release src/main.cpp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 80%]: linking.release stl_headerunit
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;100%]: build ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For the first compilation, we scan the module code for dependencies and then precompile stl libraries like iostream as headerunit.&lt;/p&gt;

&lt;p&gt;Any subsequent recompilation will directly reuse them for compilation acceleration.&lt;/p&gt;

&lt;p&gt;Note: Usually we need to add at least one &lt;code class=&quot;highlighter-rouge&quot;&gt;.mpp&lt;/code&gt; file to enable C++20 modules compilation, if there is only a cpp file, module compilation will not be enabled by default.&lt;/p&gt;

&lt;p&gt;However, if we just want to use the module’s Headerunits feature in the cpp file, for example, by introducing some STL Headerunits in the cpp, then we can also set the &lt;code class=&quot;highlighter-rouge&quot;&gt;.mpp&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;.mpp&lt;/code&gt;.
then we can also force C++ Modules compilation by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;set_policy(&quot;build.c++.modules&quot;, true)&lt;/code&gt;, e.g.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_languages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c++20&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_policy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build.c++.modules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;project-file-monitoring-and-auto-build&quot;&gt;Project file monitoring and auto-build&lt;/h3&gt;

&lt;p&gt;In this release, we have added the &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake watch&lt;/code&gt; plugin command to automatically monitor project files for updates and then trigger automatic builds or run some custom commands.&lt;/p&gt;

&lt;p&gt;This is often used for personal development to enable fast real-time incremental builds without the need to manually execute the build command each time, improving development efficiency.&lt;/p&gt;

&lt;h4 id=&quot;auto-build-after-project-update&quot;&gt;Auto-build after project update&lt;/h4&gt;

&lt;p&gt;The default behavior is to monitor the entire project root, and any file changes will trigger an incremental build of the project.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch
watching /private/tmp/test/src/&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt; .
watching /private/tmp/test/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; ...
/private/tmp/test/src/main.cpp modified
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 25%]: ccache compiling.release src/main.cpp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 50%]: linking.release &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 100%]: build ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;monitoring-a-specific-directory&quot;&gt;Monitoring a specific directory&lt;/h4&gt;

&lt;p&gt;We can also monitor specific code directories to narrow down the scope of monitoring and improve performance.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch -d src
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch -d &lt;span class=&quot;s2&quot;&gt;&quot;src;tests/*&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above command will recursively watch all subdirectories. If you want to only watch the files in the current directory without recursive monitoring, you can use the following command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch -p src
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch -p &lt;span class=&quot;s2&quot;&gt;&quot;src;tests/*&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;watch-and-run-the-specified-command&quot;&gt;Watch and run the specified command&lt;/h4&gt;

&lt;p&gt;If you want to run the build automatically even after the automatic build, we can use a custom command set.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch -c &lt;span class=&quot;s2&quot;&gt;&quot;xmake; xmake run&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above command list is passed as a string, which is not flexible enough for complex command arguments that require escaping to be more cumbersome, so we can use the following for arbitrary commands.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch -- &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;hello xmake!
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch -- xmake run --help
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;watching-and-running-the-target-program&quot;&gt;Watching and running the target program&lt;/h4&gt;

&lt;p&gt;Although we can automate the running of the target program with custom commands, we also provide more convenient arguments to achieve this behavior.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch -r
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch --run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;100%]: build ok!
hello world!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-watch.gif&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;watching-and-running-lua-scripts&quot;&gt;Watching and running lua scripts&lt;/h4&gt;

&lt;p&gt;We can also watch for file updates and run the specified lua script for more flexible and complex command customization.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch -s /tmp/test.lua
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can also get a list of all updated file paths and events in the script again.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- TODO handle events&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;mac-catalyst-support&quot;&gt;Mac Catalyst Support&lt;/h3&gt;

&lt;p&gt;MAc Catalyst is Apple’s new solution for bringing iPad apps to the Mac. Mac apps built with Mac Catalyst share code with your iPad apps, and you can add more features to your Mac separately.&lt;/p&gt;

&lt;p&gt;With this new version, we’ve added support for building Mac Catalyst targets, and on macOS platforms, we just need to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;-appledev=catalyst&lt;/code&gt; configuration option to support compiling existing iOS code and getting it up and running on macOS without making any changes.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --appledev&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;catalyst
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can experience the Mac in the test project &lt;a href=&quot;https://github.com/xmake-io/xmake/tree/master/tests/projects/objc/iosapp_with_framework&quot;&gt;iosapp_with_framework&lt;/a&gt; Catalyst program compile and run.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 36%]: processing.xcode.release src/framework/Info.plist
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 40%]: cache compiling.release src/framework/test.m
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 44%]: linking.release &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 48%]: generating.xcode.release test.framework
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 56%]: compiling.xcode.release src/app/Assets.xcassets
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 56%]: processing.xcode.release src/app/Info.plist
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 60%]: cache compiling.release src/app/ViewController.m
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 60%]: cache compiling.release src/app/SceneDelegate.m
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 60%]: cache compiling.release src/app/main.m
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 60%]: cache compiling.release src/app/AppDelegate.m
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 60%]: compiling.xcode.release src/app/Base.lproj/LaunchScreen.storyboard
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 60%]: compiling.xcode.release src/app/Base.lproj/Main.storyboard
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 88%]: linking.release demo
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 92%]: generating.xcode.release demo.app
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;100%]: build ok!
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake run
2022-08-26 15:11:03.581 demo[86248:9087199] add&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1, 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 3
2022-08-26 15:11:03.581 demo[86248:9087199] hello xmake!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/mac-catalyst.png&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;improving-remote-builds&quot;&gt;Improving remote builds&lt;/h3&gt;

&lt;h4 id=&quot;pulling-remote-build-files&quot;&gt;Pulling remote build files&lt;/h4&gt;

&lt;p&gt;For remote builds, we have added a new pull remote file command, which can usually be used to download remote target build files, library files locally after the remote build is complete.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --pull &lt;span class=&quot;s1&quot;&gt;&#39;build/**&#39;&lt;/span&gt; outputdir
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can match the files to be downloaded with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-pull &#39;build/**&#39;&lt;/code&gt; pattern, either build files or other files.&lt;/p&gt;

&lt;p&gt;Note: Files are segregated by project, only files under the current project can be specified for download, and will not let users download files from other directories on the server to avoid some security risks.&lt;/p&gt;

&lt;h4 id=&quot;real-time-echo-output&quot;&gt;Real-time echo output&lt;/h4&gt;

&lt;p&gt;In the previous version, when using remote compilation, the client could not output the compilation information of the server in real time, because the cache existed, the compilation progress information seen locally was refreshed piece by piece, which was not a good experience.&lt;/p&gt;

&lt;p&gt;Therefore, we added line buffer refresh support to improve the real-time output display and make the user experience closer to the local compilation when compiling remotely.&lt;/p&gt;

&lt;h3 id=&quot;improve-distributed-compile-scheduling-algorithm&quot;&gt;Improve distributed compile scheduling algorithm&lt;/h3&gt;

&lt;p&gt;We have also further improved the server node scheduling for xmake’s distributed compilation by adding weight to cpu load and memory resources, rather than just assigning tasks by the number of cpu cores.&lt;/p&gt;

&lt;p&gt;Thus, if some nodes are overloaded, we will prioritize the compilation tasks to the nodes that are quite free and take advantage of all compilation resources.&lt;/p&gt;

&lt;h3 id=&quot;more-flexible-cmake-package-lookup&quot;&gt;More flexible cmake package lookup&lt;/h3&gt;

&lt;h4 id=&quot;specify-links&quot;&gt;Specify links&lt;/h4&gt;

&lt;p&gt;For cmake packages, we have added the &lt;code class=&quot;highlighter-rouge&quot;&gt;link_libraries&lt;/code&gt; configuration option to allow users to customize the configuration of package dependencies and even support for target links when searching for packages to use with cmake.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cmake::xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link_libraries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;abc::lib1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;abc::lib2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;xmake automatically appends the following configuration when looking for cmake packages, improving the extraction of links libraries.&lt;/p&gt;

&lt;div class=&quot;language-cmake highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;target_link_libraries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;test PRIVATE ABC::lib1 ABC::lib2&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;specify-the-search-mode&quot;&gt;Specify the search mode&lt;/h4&gt;

&lt;p&gt;In addition, we add the following search mode configuration.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cmake::xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cmake::xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cmake::xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- both&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Specify config search mode, for example, to tell cmake to look for packages from &lt;code class=&quot;highlighter-rouge&quot;&gt;XXXConfig.cmake&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;xmake will automatically append the following configuration internally when it looks for cmake packages.&lt;/p&gt;

&lt;div class=&quot;language-cmake highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;find_package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;ABC CONFIG REQUIRED&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;armccarmclangrc-incremental-compilation-support&quot;&gt;armcc/armclang/rc incremental compilation support&lt;/h3&gt;

&lt;p&gt;In the new version, we also perform header dependency analysis for keil’s armcc/armclang compiler to support incremental compilation.&lt;/p&gt;

&lt;p&gt;In addition, msvc’s rc.exe resource compiler itself cannot provide header dependency analysis, but cl.exe’s preprocessor can handle resource files.
Therefore, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;cl.exe /E test.rc&lt;/code&gt; to preprocess resource files and extract dependency information from them to achieve incremental compilation support for resource files.&lt;/p&gt;

&lt;p&gt;So far, it works pretty well, and we also have support for internal ICON/BITMAP resource reference dependencies.&lt;/p&gt;

&lt;h3 id=&quot;other-issue-fixes&quot;&gt;Other issue fixes&lt;/h3&gt;

&lt;p&gt;We’ve also made a number of fixes to the build cache, which will be more stable than the previous version. We have also streamlined the generation of CMakelists.&lt;/p&gt;

&lt;p&gt;More detailed improvements can be found in the following changelog.&lt;/p&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2555&quot;&gt;#2555&lt;/a&gt;: Add fwatcher module and &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake watch&lt;/code&gt; plugin command&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake service --pull &#39;build/**&#39; outputdir&lt;/code&gt; to pull the given files in remote server&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2641&quot;&gt;#2641&lt;/a&gt;: Improve C++20 modules, support headerunits and project generators&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2679&quot;&gt;#2679&lt;/a&gt;: Support Mac Catalyst&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2576&quot;&gt;#2576&lt;/a&gt;: More flexible package fetching from cmake&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2577&quot;&gt;#2577&lt;/a&gt;: Improve add_headerfiles(), add &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; support&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2603&quot;&gt;#2603&lt;/a&gt;: Disable &lt;code class=&quot;highlighter-rouge&quot;&gt;-fdirectives-only&lt;/code&gt; for ccache by default&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2580&quot;&gt;#2580&lt;/a&gt;: Set stdout to line buffering&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2571&quot;&gt;#2571&lt;/a&gt;: Improve task scheduling for parallel and distributed compilation based on memory/cpu usage&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2410&quot;&gt;#2410&lt;/a&gt;: Improve cmakelists generator&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2690&quot;&gt;#2690&lt;/a&gt;: Improve to pass toolchains to packages&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2686&quot;&gt;#2686&lt;/a&gt;: Support for incremental compilation and parse header file deps for keil/armcc/armclang&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2562&quot;&gt;#2562&lt;/a&gt;: Improve include deps for rc.exe&lt;/li&gt;
  &lt;li&gt;Improve the default parallel building jobs number&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2614&quot;&gt;#2614&lt;/a&gt;: Fix building submodules2 tests for msvc&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2620&quot;&gt;#2620&lt;/a&gt;: Fix build cache for incremental compilation&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2177&quot;&gt;#2177&lt;/a&gt;: Fix python.library segmentation fault for macosx&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2708&quot;&gt;#2708&lt;/a&gt;: Fix link error for mode.coverage rule&lt;/li&gt;
  &lt;li&gt;Fix rpath for macos/iphoneos frameworks and application&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 25 Aug 2022 00:00:00 +0800</pubDate>
        <link>https://tboox.org/2022/08/25/xmake-update-v2.7.1/</link>
        <guid isPermaLink="true">https://tboox.org/2022/08/25/xmake-update-v2.7.1/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>remote</category>
        
        <category>ccache</category>
        
        <category>C++20</category>
        
        <category>Modules</category>
        
        <category>headerunits</category>
        
        <category>fs-watcher</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>Xmake v2.7.1 发布，更好的 C++ Modules 支持</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Xmake&lt;/a&gt; 是一个基于 Lua 的轻量级跨平台构建工具。&lt;/p&gt;

&lt;p&gt;它非常的轻量，没有任何依赖，因为它内置了 Lua 运行时。&lt;/p&gt;

&lt;p&gt;它使用 xmake.lua 维护项目构建，相比 makefile/CMakeLists.txt，配置语法更加简洁直观，对新手非常友好，短时间内就能快速入门，能够让用户把更多的精力集中在实际的项目开发上。&lt;/p&gt;

&lt;p&gt;我们能够使用它像 Make/Ninja 那样可以直接编译项目，也可以像 CMake/Meson 那样生成工程文件，另外它还有内置的包管理系统来帮助用户解决 C/C++ 依赖库的集成使用问题。&lt;/p&gt;

&lt;p&gt;目前，Xmake 主要用于 C/C++ 项目的构建，但是同时也支持其他 native 语言的构建，可以实现跟 C/C++ 进行混合编译，同时编译速度也是非常的快，可以跟 Ninja 持平。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xmake = Build backend + Project Generator + Package Manager + [Remote|Distributed] Build + Cache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;尽管不是很准确，但我们还是可以把 Xmake 按下面的方式来理解：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xmake ~= Make/Ninja + CMake/Meson + Vcpkg/Conan + distcc + ccache/sccache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/about/course&quot;&gt;入门课程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;新特性介绍&quot;&gt;新特性介绍&lt;/h2&gt;

&lt;p&gt;这个版本我们对 C++20 Modules 的实现进行了重构和改进，改进了模块文件的依赖图解析，新增了对 STL 和 User HeaderUnits 的支持，同时让 CMakelists/compile_commands 生成器也支持了 C++ Modules。&lt;/p&gt;

&lt;p&gt;另外，我们新增了一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake watch&lt;/code&gt; 插件，可以实时监控当前工程文件更新，自动触发增量构建，或者运行一些自定义的命令。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-watch.gif&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;c-modules-改进&quot;&gt;C++ Modules 改进&lt;/h3&gt;

&lt;p&gt;Xmake 很早就已经支持 C++ Modules 的构建支持，并且能够自动分析模块间的依赖关系，实现最大化的并行编译。
另外，Xmake 采用 &lt;code class=&quot;highlighter-rouge&quot;&gt;.mpp&lt;/code&gt; 作为默认的模块扩展名，但是也同时支持 &lt;code class=&quot;highlighter-rouge&quot;&gt;.ixx&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.cppm&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.mxx&lt;/code&gt; 等扩展名。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_languages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c++20&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;class&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;src/*.mpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;更多例子见：&lt;a href=&quot;https://github.com/xmake-io/xmake/tree/master/tests/projects/c%2B%2B/modules&quot;&gt;C++ Modules&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但是之前的实现还存在很多不足之处：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;不支持 HeaderUnits，因此也无法使用 stl 等模块&lt;/li&gt;
  &lt;li&gt;自己扫描源码实现模块依赖图解析，不支持编译器提供的依赖扫描，因此不完全可靠&lt;/li&gt;
  &lt;li&gt;不支持 CMakelists 生成&lt;/li&gt;
  &lt;li&gt;不支持 compile_commands.json 生成&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而在新版中，我们对 C++20 模块的实现进行了重构和升级，上面提到的几点，我们都做了支持，新增了对 Headerunits 的支持，因此我们可以在模块中引入 STL 和 用户头文件模块。&lt;/p&gt;

&lt;p&gt;同时，由于 msvc 和 gcc 高版本 都已经内置对模块依赖图的扫描分析，Xmake 会优先借助编译器实现模块依赖图分析，如果编译器不支持（clang），那么 Xmake 也会退化到自己的源码扫描实现上去。&lt;/p&gt;

&lt;p&gt;相关的补丁见：&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2641&quot;&gt;#2641&lt;/a&gt;，非常感谢 &lt;a href=&quot;https://github.com/Arthapz&quot;&gt;@Arthapz&lt;/a&gt; 的贡献。&lt;/p&gt;

&lt;p&gt;下面是一个使用了 STL HeaderUnits 的模块例子，例如：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;stl_headerunit$ &lt;/span&gt;xmake
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  0%]: generating.cxx.module.deps src/main.cpp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  0%]: generating.cxx.module.deps src/hello.mpp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 20%]: generating.cxx.headerunit.bmi iostream
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 60%]: generating.cxx.module.bmi hello
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 70%]: cache compiling.release src/main.cpp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 80%]: linking.release stl_headerunit
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;100%]: build ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;对于首次编译，我们会扫描模块代码之间的依赖关系，然后预编译 iostream 等 stl 库作为 headerunit。&lt;/p&gt;

&lt;p&gt;之后的重新编译，都会直接复用它们，实现编译加速。&lt;/p&gt;

&lt;p&gt;注：通常我们至少需要添加一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.mpp&lt;/code&gt; 文件，才能开启 C++20 modules 编译，如果只有 cpp 文件，默认是不会开启模块编译的。&lt;/p&gt;

&lt;p&gt;但是，如果我们仅仅只是想在 cpp 文件中使用模块的 Headerunits 特性，比如引入一些 STL Headerunits 在 cpp 中使用，
那么我们也可以通过设置 &lt;code class=&quot;highlighter-rouge&quot;&gt;set_policy(&quot;build.c++.modules&quot;, true)&lt;/code&gt; 来强行开启 C++ Modules 编译，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_languages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c++20&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_policy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build.c++.modules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;工程文件监视和自动构建&quot;&gt;工程文件监视和自动构建&lt;/h3&gt;

&lt;p&gt;这个版本中，我们新增了 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake watch&lt;/code&gt; 插件命令，可以自动监视项目文件更新，然后触发自动构建，或者运行一些自定义命令。&lt;/p&gt;

&lt;p&gt;这通常用于个人开发时候，实现快速的实时增量编译，而不需要每次手动执行编译命令，提高开发效率。&lt;/p&gt;

&lt;h4 id=&quot;项目更新后自动构建&quot;&gt;项目更新后自动构建&lt;/h4&gt;

&lt;p&gt;默认行为就是监视整个项目根目录，任何文件改动都会触发项目的增量编译。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch
watching /private/tmp/test/src/&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt; ..
watching /private/tmp/test/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; ..
/private/tmp/test/src/main.cpp modified
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 25%]: ccache compiling.release src/main.cpp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 50%]: linking.release &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;100%]: build ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;监视指定目录&quot;&gt;监视指定目录&lt;/h4&gt;

&lt;p&gt;我们也可以监视指定的代码目录，缩小监视范围，提升监视性能。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch -d src
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch -d &lt;span class=&quot;s2&quot;&gt;&quot;src;tests/*&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的命令，会去递归监视所有子目录，如果想要仅仅监视当前目录下的文件，不进行递归监视，可以使用下面的命令。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch -p src
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch -p &lt;span class=&quot;s2&quot;&gt;&quot;src;tests/*&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;监视并运行指定命令&quot;&gt;监视并运行指定命令&lt;/h4&gt;

&lt;p&gt;如果想在自动构建后，还想自动运行构建的程序，我们可以使用自定义的命令集。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch -c &lt;span class=&quot;s2&quot;&gt;&quot;xmake; xmake run&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的命令列表是作为字符串传递，这对于复杂命令参数，需要转义比较繁琐不够灵活，那么我们可以使用下面的方式进行任意命令的设置。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch -- &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;hello xmake!
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch -- xmake run --help
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;监视并运行目标程序&quot;&gt;监视并运行目标程序&lt;/h4&gt;

&lt;p&gt;尽管我们可以通过自定义命令来实现目标程序的自动运行，但是我们也提供了更加方便的参数来实现这个行为。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch -r
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch --run
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;100%]: build ok!
hello world!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/xmake-watch.gif&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;监视并运行-lua-脚本&quot;&gt;监视并运行 lua 脚本&lt;/h4&gt;

&lt;p&gt;我们还可以监视文件更新后，运行指定的 lua 脚本，实现更加灵活复杂的命令定制。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake watch -s /tmp/test.lua
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们还可以再脚本中获取所有更新的文件路径列表和事件。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- TODO handle events&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;mac-catalyst-支持&quot;&gt;Mac Catalyst 支持&lt;/h3&gt;

&lt;p&gt;MAc Catalyst 是苹果后来新推的一项让 iPad App 带入 Mac 的方案，通过 Mac Catalyst 构建的 Mac App 与您的 iPad App 共享代码，而且您可以单独为 Mac 添加更多功能。&lt;/p&gt;

&lt;p&gt;新版本中，我们新增了 Mac Catalyst 目标的构建支持，在 macOS 平台上，我们只需要添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--appledev=catalyst&lt;/code&gt; 配置选项，就可以支持编译现有的 iOS 代码，并让它在 macOS 上运行起来，而无需做任何改动。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --appledev&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;catalyst
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们可以在 &lt;a href=&quot;https://github.com/xmake-io/xmake/tree/master/tests/projects/objc/iosapp_with_framework&quot;&gt;iosapp_with_framework&lt;/a&gt; 这个测试项目中体验 Mac Catalyst 程序的编译运行。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 36%]: processing.xcode.release src/framework/Info.plist
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 40%]: cache compiling.release src/framework/test.m
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 44%]: linking.release &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 48%]: generating.xcode.release test.framework
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 56%]: compiling.xcode.release src/app/Assets.xcassets
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 56%]: processing.xcode.release src/app/Info.plist
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 60%]: cache compiling.release src/app/ViewController.m
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 60%]: cache compiling.release src/app/SceneDelegate.m
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 60%]: cache compiling.release src/app/main.m
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 60%]: cache compiling.release src/app/AppDelegate.m
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 60%]: compiling.xcode.release src/app/Base.lproj/LaunchScreen.storyboard
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 60%]: compiling.xcode.release src/app/Base.lproj/Main.storyboard
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 88%]: linking.release demo
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 92%]: generating.xcode.release demo.app
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;100%]: build ok!
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake run
2022-08-26 15:11:03.581 demo[86248:9087199] add&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1, 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 3
2022-08-26 15:11:03.581 demo[86248:9087199] hello xmake!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/xmake/mac-catalyst.png&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;改进远程编译&quot;&gt;改进远程编译&lt;/h3&gt;

&lt;h4 id=&quot;拉取远程构建文件&quot;&gt;拉取远程构建文件&lt;/h4&gt;

&lt;p&gt;对于远程编译，我们新增加了一个拉取远程文件的命令，通常可用于远程编译完成后，下载远程的目标生成文件，库文件到本地。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --pull &lt;span class=&quot;s1&quot;&gt;&#39;build/**&#39;&lt;/span&gt; outputdir
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;--pull &#39;build/**&#39;&lt;/code&gt; 模式匹配需要下载的文件，可以是构建文件，也可以是其他文件。&lt;/p&gt;

&lt;p&gt;注：文件是按项目隔离的，只能指定下载当前项目下的文件，并不会让用户下载服务器上其他目录下的文件，避免一些安全隐患。&lt;/p&gt;

&lt;h4 id=&quot;实时回显输出&quot;&gt;实时回显输出&lt;/h4&gt;

&lt;p&gt;先前的版本在使用远程编译的时候，客户端是无法实时输出服务端的编译信息的，由于缓存的存在，本地看到的编译进度信息都是一块一块刷新出来，体验不是很好。&lt;/p&gt;

&lt;p&gt;因此我们加上了行缓冲刷新支持，提高了输出回显的实时性，使得用户在远程编译时，更接近本地编译的体验。&lt;/p&gt;

&lt;h3 id=&quot;改进分布式编译调度算法&quot;&gt;改进分布式编译调度算法&lt;/h3&gt;

&lt;p&gt;我们对 xmake 的分布式编译的服务器节点调度也做了进一步改进，加上了 cpu 负载和内存资源的权重，而不仅仅通过 cpu core 数量来分配任务。&lt;/p&gt;

&lt;p&gt;因此，如果某些节点负载过高，我们会优先将编译任务调度到相当比较空闲的节点上去，充分利用所有编译资源。&lt;/p&gt;

&lt;h3 id=&quot;更灵活的-cmake-包查找&quot;&gt;更灵活的 cmake 包查找&lt;/h3&gt;

&lt;h4 id=&quot;指定链接&quot;&gt;指定链接&lt;/h4&gt;

&lt;p&gt;对于 cmake 包，我们新增了 &lt;code class=&quot;highlighter-rouge&quot;&gt;link_libraries&lt;/code&gt; 配置选项，让用户在查找使用 cmake 包的时候，可以自定义配置包依赖的链接库，甚至对 target 链接的支持。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cmake::xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link_libraries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;abc::lib1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;abc::lib2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;xmake 在查找 cmake 包的时候，会自动追加下面的配置，改进对 links 库的提取。&lt;/p&gt;

&lt;div class=&quot;language-cmake highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;target_link_libraries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;test PRIVATE ABC::lib1 ABC::lib2&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;指定搜索模式&quot;&gt;指定搜索模式&lt;/h4&gt;

&lt;p&gt;另外，我们增加的搜索模式配置：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cmake::xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cmake::xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cmake::xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- both&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;比如指定 config 搜索模式，告诉 cmake 从 &lt;code class=&quot;highlighter-rouge&quot;&gt;XXXConfig.cmake&lt;/code&gt; 中查找包。&lt;/p&gt;

&lt;p&gt;xmake 在查找 cmake 包的时候，内部会自动追加下面的配置。&lt;/p&gt;

&lt;div class=&quot;language-cmake highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;find_package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;ABC CONFIG REQUIRED&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;armccarmclangrc-增量编译支持&quot;&gt;armcc/armclang/rc 增量编译支持&lt;/h3&gt;

&lt;p&gt;在新版本中，我们对 keil 的 armcc/armclang 编译器也进行头文件依赖分析，来支持增量编译。&lt;/p&gt;

&lt;p&gt;另外，msvc 的 rc.exe 资源编译器本身是无法提供头文件依赖分析的，但是 cl.exe 的预处理器却是可以处理资源文件的。
因此我们可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;cl.exe /E test.rc&lt;/code&gt; 去预处理资源文件，从中提取依赖信息，来实现资源文件的增量编译支持。&lt;/p&gt;

&lt;p&gt;目前测试下来，效果还不错，同时我们也对内部 ICON/BITMAP 的资源引用依赖也做了支持。&lt;/p&gt;

&lt;h3 id=&quot;其他问题修复&quot;&gt;其他问题修复&lt;/h3&gt;

&lt;p&gt;我们对构建缓存也做了很多修复，它将比之前的版本更加的稳定。另外我们也精简了 CMakelists 的生成。&lt;/p&gt;

&lt;p&gt;更多细节改进见下面的更新日志：&lt;/p&gt;

&lt;h2 id=&quot;更新内容&quot;&gt;更新内容&lt;/h2&gt;

&lt;h3 id=&quot;新特性&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2555&quot;&gt;#2555&lt;/a&gt;: 添加 fwatcher 模块和 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake watch&lt;/code&gt; 插件命令&lt;/li&gt;
  &lt;li&gt;添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake service --pull &#39;build/**&#39; outputdir&lt;/code&gt; 命令去拉取远程构建服务器上的文件&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2641&quot;&gt;#2641&lt;/a&gt;: 改进 C++20 模块, 支持 headerunits 和 project 生成&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2679&quot;&gt;#2679&lt;/a&gt;: 支持 Mac Catalyst 构建&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;改进&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2576&quot;&gt;#2576&lt;/a&gt;: 改进从 cmake 中查找包，提供更过灵活的可选配置&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2577&quot;&gt;#2577&lt;/a&gt;: 改进 add_headerfiles()，增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; 支持&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2603&quot;&gt;#2603&lt;/a&gt;: 为 ccache 默认禁用 &lt;code class=&quot;highlighter-rouge&quot;&gt;-fdirectives-only&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2580&quot;&gt;#2580&lt;/a&gt;: 设置 stdout 到 line 缓冲输出&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2571&quot;&gt;#2571&lt;/a&gt;: 改进分布式编译的调度算法，增加 cpu/memory 状态权重&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2410&quot;&gt;#2410&lt;/a&gt;: 改进 cmakelists 生成&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2690&quot;&gt;#2690&lt;/a&gt;: 改机传递 toolchains 到包&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2686&quot;&gt;#2686&lt;/a&gt;: 改进 armcc/armclang 支持增量编译&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2562&quot;&gt;#2562&lt;/a&gt;: 改进 rc.exe 对引用文件依赖的解析和增量编译支持&lt;/li&gt;
  &lt;li&gt;改进默认的并行构建任务数&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-修复&quot;&gt;Bugs 修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2614&quot;&gt;#2614&lt;/a&gt;: 为 msvc 修复构建 submodules2 测试工程&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2620&quot;&gt;#2620&lt;/a&gt;: 修复构建缓存导致的增量编译问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2177&quot;&gt;#2177&lt;/a&gt;: 修复 python.library 在 macOS 上段错误崩溃&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2708&quot;&gt;#2708&lt;/a&gt;: 修复 mode.coverage 规则的链接错误&lt;/li&gt;
  &lt;li&gt;修复 ios/macOS framework 和 application 的 rpath 加载路径&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 25 Aug 2022 00:00:00 +0800</pubDate>
        <link>https://tboox.org/cn/2022/08/25/xmake-update-v2.7.1/</link>
        <guid isPermaLink="true">https://tboox.org/cn/2022/08/25/xmake-update-v2.7.1/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>remote</category>
        
        <category>ccache</category>
        
        <category>C++20</category>
        
        <category>Modules</category>
        
        <category>headerunits</category>
        
        <category>fs-watcher</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>Xmake v2.6.6 Released, Support Distributed Compilation and Build Cache</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Xmake&lt;/a&gt; is a lightweight cross-platform build utility based on Lua.&lt;/p&gt;

&lt;p&gt;It is very lightweight and has no dependencies because it has a built-in Lua runtime.&lt;/p&gt;

&lt;p&gt;It uses xmake.lua to maintain project builds and its configuration syntax is very simple and readable.&lt;/p&gt;

&lt;p&gt;We can use it to build project directly like Make/Ninja, or generate project files like CMake/Meson, and it also has a built-in package management system to help users solve the integrated use of C/C++ dependent libraries.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xmake = Build backend + Project Generator + Package Manager + [Remote|Distributed] Build + Cache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Although not very precise, we can still understand Xmake in the following way:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xmake ~= Make/Ninja + CMake/Meson + Vcpkg/Conan + distcc + ccache/sccache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/&quot;&gt;Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction-of-new-features&quot;&gt;Introduction of new features&lt;/h2&gt;

&lt;p&gt;In this version, we have added a lot of heavyweight new features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Distributed compilation&lt;/li&gt;
  &lt;li&gt;Local compilation cache&lt;/li&gt;
  &lt;li&gt;Remote compilation cache&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these features, we can compile large C/C++ projects faster.&lt;/p&gt;

&lt;p&gt;In addition, they are completely cross-platform, support not only gcc/clang but also msvc,
and there is no any third-party dependency except the compiler, which is very convenient to use.&lt;/p&gt;

&lt;p&gt;Therefore, using Xmake is equivalent to using &lt;code class=&quot;highlighter-rouge&quot;&gt;distcc/ccache/sccache&lt;/code&gt; at the same time.&lt;/p&gt;

&lt;p&gt;Compared with these third-party tools, Xmake fully supports Windows and msvc,
which eliminates platform differences, independent process calls, and the overhead of additional daemon processes.&lt;/p&gt;

&lt;p&gt;In addition to these features, the new version of Xmake also adds support for compiling Keil/C51 projects,
as well as support for the nvc/nvc++/nvfortran compilers in the nvidia-hpc-sdk toolchain.&lt;/p&gt;

&lt;h3 id=&quot;support-user-authentication-for-remote-compilation&quot;&gt;Support user authentication for remote compilation&lt;/h3&gt;

&lt;p&gt;In the last version, we initially supported remote compilation, but did not provide user authentication support,
which would bring some security issues. Therefore, in this version, we added user authentication support.&lt;/p&gt;

&lt;p&gt;At present, Xmake mainly provides the following authentication mechanisms. In addition, it is also effective for distributed compilation and remote caching.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Token authentication&lt;/li&gt;
  &lt;li&gt;Password authentication&lt;/li&gt;
  &lt;li&gt;Trusted host verification&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;token-authentication&quot;&gt;Token authentication&lt;/h4&gt;

&lt;p&gt;This is also the default recommended method, which is more secure, more convenient to configure and connect,
and does not need to enter a password every time you connect.&lt;/p&gt;

&lt;p&gt;When we execute the &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake service&lt;/code&gt; command, a server and client configuration file will be generated by default,
and a default token will be automatically generated, so the local direct connection does not require any configuration.&lt;/p&gt;

&lt;h5 id=&quot;server-authentication-configuration&quot;&gt;Server authentication configuration&lt;/h5&gt;

&lt;p&gt;The server can configure multiple tokens for authorizing connections to different user hosts.&lt;/p&gt;

&lt;p&gt;Of course, we can also share single token.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat ~/.xmake/service/server.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    known_hosts &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    logfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/logs.txt&quot;&lt;/span&gt;,
    remote_build &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        listen &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0:9691&quot;&lt;/span&gt;,
        workdir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/remote_build&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    tokens &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;e438d816c95958667747c318f1532c0f&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;client-authentication-configuration&quot;&gt;Client authentication configuration&lt;/h5&gt;

&lt;p&gt;The client only needs to add the token on the server to the corresponding client configuration.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat ~/.xmake/service/client.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    remote_build &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        connect &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1:9691&quot;&lt;/span&gt;,
        token &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;e438d816c95958667747c318f1532c0f&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;manually-generate-new-token&quot;&gt;Manually generate new token&lt;/h5&gt;

&lt;p&gt;We can also execute the following command to manually generate a new token and add it to the server configuration ourselves.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --gen-token
New token a7b9fc2d3bfca1472aabc38bb5f5d612 is generated!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;password-authentication&quot;&gt;Password authentication&lt;/h4&gt;

&lt;p&gt;We also provide password authentication. Compared with token authentication,
it requires users to enter a password every time they connect, and can only be connected after the verification is passed.&lt;/p&gt;

&lt;h5 id=&quot;server-authentication-configuration-1&quot;&gt;Server authentication configuration&lt;/h5&gt;

&lt;p&gt;For password authentication, we do not need to manually configure the token, just execute the following command to add a user.
During the adding process, the user will be prompted to enter a password.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --add-user&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ruki
Please input user ruki password:
123456
Add user ruki ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then, xmake will generate a new token from the username and password and add it to the token list of the server configuration.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat ~/.xmake/service/server.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    known_hosts &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    logfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/logs.txt&quot;&lt;/span&gt;,
    remote_build &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        listen &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0:9691&quot;&lt;/span&gt;,
        workdir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/remote_build&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    tokens &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;e438d816c95958667747c318f1532c0f&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;7889e25402413e93fd37395a636bf942&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course, we can also delete the specified user and password.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$xmake&lt;/span&gt; service --rm-user&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ruki
Please input user ruki password:
123456
Remove user ruki ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;client-authentication-configuration-1&quot;&gt;Client authentication configuration&lt;/h5&gt;

&lt;p&gt;For the client, we no longer need to set the token of the server.
We only need to add the user name that needs to be connected in the connection configuration to enable password authentication.&lt;/p&gt;

&lt;p&gt;The format is: &lt;code class=&quot;highlighter-rouge&quot;&gt;user@address:port&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat ~/.xmake/service/client.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    remote_build &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        connect &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;root@127.0.0.1:9691&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If the username is removed and the token is not configured, it is anonymous mode.
If the server is not configured with a token, the authentication is completely disabled and the connection is made directly.&lt;/p&gt;

&lt;h4 id=&quot;trusted-host-verification&quot;&gt;Trusted host verification&lt;/h4&gt;

&lt;p&gt;In addition, in order to further improve security, we also provide server-side trusted host verification.&lt;/p&gt;

&lt;p&gt;If the server-configured known_hosts list is configured with the ip address of the client host that can be connected.&lt;/p&gt;

&lt;p&gt;Then only these hosts can successfully connect to this server, and other hosts’ connections to it will be prompted to be untrusted and refuse the connection,
even if token and password authentication are OK.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat ~/.xmake/service/server.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    logfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/logs.txt&quot;&lt;/span&gt;,
    server &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        tokens &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;4b928c7563a0cba10ff4c3f5ca0c8e24&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        known_hosts &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;xx.xx.xx.xx&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;connect-to-remote-server&quot;&gt;Connect to remote server&lt;/h4&gt;

&lt;p&gt;Next, we only need to enter the root directory of the project that needs to be compiled remotely,
and execute the &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake service --connect&lt;/code&gt; command to connect.&lt;/p&gt;

&lt;p&gt;If it is the token authentication mode, then no additional password input is required, and the connection is directly connected.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; create test
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; test
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --connect
&lt;/span&gt;&amp;lt;remote_build_client&amp;gt;: connect 192.168.56.110:9091 ..
&amp;lt;remote_build_client&amp;gt;: connected!
&amp;lt;remote_build_client&amp;gt;: sync files in 192.168.56.110:9091 ..
Scanning files ..
Comparing 3 files ..
    [+]: src/main.cpp
    [+]: .gitignore
    [+]: xmake.lua
3 files has been changed!
Archiving files ..
Uploading files with 1372 bytes ..
&amp;lt;remote_build_client&amp;gt;: sync files ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If it is password authentication, the user will be prompted to enter the password to continue the connection.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --connect
Please input user root password:
000000
&amp;lt;remote_build_client&amp;gt;: connect 127.0.0.1:9691 ..
&amp;lt;remote_build_client&amp;gt;: connected!
&amp;lt;remote_build_client&amp;gt;: sync files &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;127.0.0.1:9691 ..
Scanning files ..
Comparing 3 files ..
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+]: xmake.lua
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+]: .gitignore
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+]: src/main.cpp
3 files has been changed!
Archiving files ..
Uploading files with 1591 bytes ..
&amp;lt;remote_build_client&amp;gt;: sync files ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If the password is incorrect, an error message will be displayed.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --connect
Please input user root password:
123
&amp;lt;remote_build_client&amp;gt;: connect 127.0.0.1:9691 ..
&amp;lt;remote_build_client&amp;gt;: connect 127.0.0.1:9691 failed, user and password are incorrect!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;distributed-compilation-support&quot;&gt;Distributed compilation support&lt;/h3&gt;

&lt;p&gt;Xmake provides a built-in distributed compilation service,
usually it can cooperate with local compilation cache and remote compilation cache to achieve optimal compilation acceleration.&lt;/p&gt;

&lt;p&gt;Also, it is fully cross-platform supported, we not only support gcc/clang, but also Windows and msvc well.&lt;/p&gt;

&lt;p&gt;For cross-compilation, as long as the cross-toolchain supports, we do not require the system environment of the server.
Even if the server resources of linux, macOS and Windows are mixed, distributed compilation can be well realized.&lt;/p&gt;

&lt;h4 id=&quot;start-service&quot;&gt;Start service&lt;/h4&gt;

&lt;p&gt;We can specify the &lt;code class=&quot;highlighter-rouge&quot;&gt;--distcc&lt;/code&gt; parameter to enable the distributed compilation service.
Of course, if this parameter is not specified, xmake will enable all server-configured services by default.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --distcc
&lt;/span&gt;&amp;lt;distcc_build_server&amp;gt;: listening 0.0.0.0:9093 ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can also start the service and echo detailed log information.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --distcc -vD
&lt;/span&gt;&amp;lt;distcc_build_server&amp;gt;: listening 0.0.0.0:9093 ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;start-the-service-in-daemon-mode&quot;&gt;Start the service in daemon mode&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --distcc --start
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --distcc --restart
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --distcc --stop
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;configure-the-server&quot;&gt;Configure the server&lt;/h4&gt;

&lt;p&gt;We first, run the &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake service&lt;/code&gt; command, it will automatically generate a default &lt;code class=&quot;highlighter-rouge&quot;&gt;server.conf&lt;/code&gt; configuration file,
stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.xmake/service/server.conf&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service
generating the config file to /Users/ruki/.xmake/service/server.conf ..
an token&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;590234653af52e91b9e438ed860f1a2b&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; is generated, we can use this token to connect service.
generating the config file to /Users/ruki/.xmake/service/client.conf ..
&amp;lt;distcc_build_server&amp;gt;: listening 0.0.0.0:9693 ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then, we edit it, fixing the server’s listening port (optional).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat ~/.xmake/service/server.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    distcc_build &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        listen &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0:9693&quot;&lt;/span&gt;,
        workdir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/distcc_build&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    known_hosts &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    logfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/logs.txt&quot;&lt;/span&gt;,
    tokens &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;590234653af52e91b9e438ed860f1a2b&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;configure-the-client&quot;&gt;Configure the client&lt;/h4&gt;

&lt;p&gt;The client configuration file is in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.xmake/service/client.conf&lt;/code&gt;, where we can configure the server address that the client needs to connect to.&lt;/p&gt;

&lt;p&gt;We can configure multiple server addresses and corresponding tokens in the hosts list.&lt;/p&gt;

&lt;p&gt;For distributed compilation, it is recommended to use the token authentication mode,
because the password mode requires a password to be entered for each server connection, which is very cumbersome.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$cat ~/.xmake/service/client.conf
{
    distcc_build = {
        hosts = {
            {
                connect = &quot;127.0.0.1:9693&quot;,
                token = &quot;590234653af52e91b9e438ed860f1a2b&quot;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;connect-to-the-server&quot;&gt;Connect to the server&lt;/h4&gt;

&lt;p&gt;After configuring the authentication and server address, you can enter the following command to connect the current project to the configured server.&lt;/p&gt;

&lt;p&gt;We need to enter &lt;code class=&quot;highlighter-rouge&quot;&gt;--distcc&lt;/code&gt; when connecting to specify that only distributed services are connected.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;projectdir
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --connect --distcc
&amp;lt;client&amp;gt;: connect 127.0.0.1:9693 ..
&amp;lt;client&amp;gt;: 127.0.0.1:9693 connected!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can also connect to multiple services at the same time, such as distributed compilation and remote compilation cache services.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hash&quot;&gt;$ xmake service --connect --distcc --ccache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;!&amp;gt; If there is no parameter, the default connection is the remote compilation service.&lt;/p&gt;

&lt;h4 id=&quot;distributed-compilation-project&quot;&gt;Distributed compilation project&lt;/h4&gt;

&lt;p&gt;After connecting to the server, we can perform distributed compilation like normal local compilation, for example:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 93%]: ccache compiling.release src/demo/network/unix_echo_client.c ----&amp;gt; &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;job
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 93%]: ccache compiling.release src/demo/network/ipv6.c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 93%]: ccache compiling.release src/demo/network/ping.c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 93%]: distcc compiling.release src/demo/network/unix_echo_server.c. ----&amp;gt; distcc job
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;93%]: distcc compiling.release src/demo/network/http.c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 93%]: distcc compiling.release src/demo/network/unixaddr.c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 93%]: distcc compiling.release src/demo/network/ipv4.c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 94%]: distcc compiling.release src/demo/network/ipaddr.c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;94%]: distcc compiling.release src/demo/math/fixed.c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;94%]: distcc compiling.release src/demo/libm/float.c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 95%]: ccache compiling.release src/demo/libm/double.c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 95%]: ccache compiling.release src/demo/other/test.cpp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 98%]: archiving.release libtbox.a
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;99%]: linking.release demo
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;100%]: build ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Among them, the words with distcc are remote compilation tasks, and the others are local compilation tasks.
By default, xmake also enables local compilation caching to cache distributed compilation results to avoid frequent requests to the server.&lt;/p&gt;

&lt;p&gt;In addition, we can also open the remote compilation cache and share the compilation cache with others to further accelerate the compilation of multi-person collaborative development.&lt;/p&gt;

&lt;h4 id=&quot;disconnect-server&quot;&gt;Disconnect server&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --disconnect --distcc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;specify-the-number-of-parallel-compilation-tasks&quot;&gt;Specify the number of parallel compilation tasks&lt;/h4&gt;

&lt;p&gt;Let’s briefly introduce the number of parallel tasks currently calculated by default based on the number of host cpu cores:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_njob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;math.ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ncpu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Therefore, if distributed compilation is not enabled, the default maximum number of parallel compilation tasks is this &lt;code class=&quot;highlighter-rouge&quot;&gt;default_njob&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If distributed compilation is enabled, the default number of parallel compilation tasks is:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxjobs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_njob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server_default_njob&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;modify-the-number-of-local-parallel-tasks&quot;&gt;Modify the number of local parallel tasks&lt;/h5&gt;

&lt;p&gt;We only need to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;-jN&lt;/code&gt; to specify the number of local parallel tasks, but it will not affect the number of parallel tasks on the server side.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake -jN
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;modify-the-number-of-parallel-tasks-on-the-server-side&quot;&gt;Modify the number of parallel tasks on the server side&lt;/h5&gt;

&lt;p&gt;If you want to modify the number of parallel tasks on the server, you need to modify the configuration file of the client.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$cat&lt;/span&gt; ~/.xmake/service/client.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    distcc_build &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        hosts &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                connect &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1:9693&quot;&lt;/span&gt;,
                token &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;590234653af52e91b9e438ed860f1a2b&quot;&lt;/span&gt;,
                njob &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 8 &amp;lt;------- modify here
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                connect &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;192.168.01:9693&quot;&lt;/span&gt;,
                token &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;590234653af52e91b9e438ed860f1a2b&quot;&lt;/span&gt;,
                njob &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 4
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For each server host, add the &lt;code class=&quot;highlighter-rouge&quot;&gt;njob = N&lt;/code&gt; parameter configuration to specify the number of parallel jobs that this server can provide.&lt;/p&gt;

&lt;h4 id=&quot;distributed-compilation-of-android-projects&quot;&gt;Distributed compilation of Android projects&lt;/h4&gt;

&lt;p&gt;The distributed compilation service provided by xmake is completely cross-platform
and supports Windows, Linux, macOS, Android, iOS and even cross-compilation.&lt;/p&gt;

&lt;p&gt;If you want to compile the Android project, you only need to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;toolchains&lt;/code&gt; toolchain configuration in the server configuration,
and provide the path of the NDK.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat ~/.xmake/service/server.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    distcc_build &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        listen &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0:9693&quot;&lt;/span&gt;,
        toolchains &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            ndk &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                ndk &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~/files/android-ndk-r21e&quot;&lt;/span&gt; &amp;lt;------------ here
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        workdir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/distcc_build&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    known_hosts &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    logfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/logs.txt&quot;&lt;/span&gt;,
    tokens &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;590234653af52e91b9e438ed860f1a2b&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then, we can compile the Android project in a distributed way like normal local compilation,
and even configure multiple Windows, macOS, Linux and other different server hosts as resources of the distributed compilation service to compile it.&lt;/p&gt;

&lt;p&gt;Just download the NDK for the corresponding platform.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p android --ndk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/files/xxxx
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;distributed-compilation-of-ios-projects&quot;&gt;Distributed compilation of iOS projects&lt;/h4&gt;

&lt;p&gt;Compiling iOS projects is easier, because Xmake can usually automatically detect Xcode, so just switch the platform to ios like a normal local.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p iphoneos
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;distributed-cross-compilation-configuration&quot;&gt;Distributed cross compilation configuration&lt;/h4&gt;

&lt;p&gt;If we want to distribute cross-compilation, we need to configure the toolchain sdk path on the server, for example:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat ~/.xmake/service/server.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    distcc_build &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        listen &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0:9693&quot;&lt;/span&gt;,
        toolchains &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            cross &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                sdkdir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~/files/arm-linux-xxx&quot;&lt;/span&gt; &amp;lt;------------ here
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        workdir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/distcc_build&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    known_hosts &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    logfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/logs.txt&quot;&lt;/span&gt;,
    tokens &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;590234653af52e91b9e438ed860f1a2b&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Among them, under toolchains, each item corresponds to a toolchain,
here is configured as &lt;code class=&quot;highlighter-rouge&quot;&gt;cross = {}&lt;/code&gt; cross toolchain, corresponding to &lt;code class=&quot;highlighter-rouge&quot;&gt;toolchain(&quot;cross&quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the toolchain, we can configure &lt;code class=&quot;highlighter-rouge&quot;&gt;sdkdir&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bindir&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cross&lt;/code&gt;, etc.,
corresponding to the interface configuration of &lt;code class=&quot;highlighter-rouge&quot;&gt;set_sdkdir&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;set_bindir&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;set_cross&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;toolchain(&quot;cross&quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If cross toolchain comparisonSpecification, we usually only need to configure &lt;code class=&quot;highlighter-rouge&quot;&gt;sdkdir&lt;/code&gt;, xmake can automatically detect it.&lt;/p&gt;

&lt;p&gt;And client-side compilation only needs to specify the sdk directory.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p cross --sdk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/xxx/arm-linux-xxx
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;clean-server-cache&quot;&gt;Clean server cache&lt;/h4&gt;

&lt;p&gt;The compilation of each project on the server side will generate some cache files,
which are stored separately according to the project granularity.&lt;/p&gt;

&lt;p&gt;We can use the following command to clear the cache corresponding to each server for the current project.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --clean --distcc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;some-optimizations&quot;&gt;Some optimizations&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Cache server-side compilation results to avoid repeated compilation&lt;/li&gt;
  &lt;li&gt;Local cache, remote cache optimization, avoid unnecessary server communication&lt;/li&gt;
  &lt;li&gt;Server load balancing scheduling, rational allocation of server resources&lt;/li&gt;
  &lt;li&gt;Small files are compiled directly locally after preprocessing, which is usually faster&lt;/li&gt;
  &lt;li&gt;Real-time compression and transmission of large files, based on lz4 fast compression&lt;/li&gt;
  &lt;li&gt;Internal state maintenance, compared to independent tools such as distcc, avoids frequent independent process loading and time-consuming, and avoids additional communication with the daemon process&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;local-compilation-cache-support&quot;&gt;Local compilation cache support&lt;/h3&gt;

&lt;p&gt;By default, Xmake will enable the local cache. The version before 2.6.5 uses the external ccache by default,
and after 2.6.6, Xmake provides a built-in cross-platform local cache solution.&lt;/p&gt;

&lt;p&gt;Compared with third-party independent processes such as ccache, xmake’s internal state maintenance is easier to optimize,
and it also avoids frequent independent process loading and time-consuming, and avoids additional communication with the daemon process.&lt;/p&gt;

&lt;p&gt;In addition, the built-in cache can better support cross-platform, and msvc on Windows can also support well, while ccache only supports gcc/clang.&lt;/p&gt;

&lt;p&gt;Of course, we can also disable the cache with the following command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --ccache&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;n
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note: Regardless of whether the built-in local cache is used, the configuration name is &lt;code class=&quot;highlighter-rouge&quot;&gt;--ccache=&lt;/code&gt;,
which means the c/c++ build cache, not just the name of the ccache tool.&lt;/p&gt;

&lt;p&gt;If we want to continue to use other external caching tools, we can also configure it in the following way.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --ccache&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;n --cxx&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ccache gcc&quot;&lt;/span&gt; --cc&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ccache gcc&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;remote-compilation-cache-support&quot;&gt;Remote compilation cache support&lt;/h3&gt;

&lt;p&gt;In addition to local caching, we also provide remote caching services, similar to mozilla’s sscache,
which is usually not used if it is only for personal development.&lt;/p&gt;

&lt;p&gt;However, if a large-scale project is developed collaboratively by multiple people within the company,
distributed compilation and local caching alone are not enough. We also need to cache the compiled object files to a separate server for sharing.&lt;/p&gt;

&lt;p&gt;In this way, even if other people compile it for the first time,
they do not need to compile it distributedly every time, and directly pull the cache from the remote to speed up the compilation.&lt;/p&gt;

&lt;p&gt;In addition, the remote cache service provided by Xmake is also supported by all platforms, not only gcc/clang but also msvc.&lt;/p&gt;

&lt;h4 id=&quot;start-service-1&quot;&gt;Start service&lt;/h4&gt;

&lt;p&gt;We can specify the &lt;code class=&quot;highlighter-rouge&quot;&gt;--ccache&lt;/code&gt; parameter to enable the remote compilation cache service.&lt;/p&gt;

&lt;p&gt;Of course, if this parameter is not specified, xmake will enable all server-configured services by default.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --ccache
&lt;/span&gt;&amp;lt;remote_cache_server&amp;gt;: listening 0.0.0.0:9092 ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can also start the service and echo detailed log information.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --ccache -vD
&lt;/span&gt;&amp;lt;remote_cache_server&amp;gt;: listening 0.0.0.0:9092 ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;start-the-service-in-daemon-mode-1&quot;&gt;Start the service in daemon mode&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --ccache --start
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --ccache --restart
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --ccache --stop
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;configure-the-server-1&quot;&gt;Configure the server&lt;/h4&gt;

&lt;p&gt;We first, run the &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake service&lt;/code&gt; command, it will automatically generate a default &lt;code class=&quot;highlighter-rouge&quot;&gt;server.conf&lt;/code&gt; configuration file,
stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.xmake/service/server.conf&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service
generating the config file to /Users/ruki/.xmake/service/server.conf ..
an token&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;590234653af52e91b9e438ed860f1a2b&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; is generated, we can use this token to connect service.
generating the config file to /Users/ruki/.xmake/service/client.conf ..
&amp;lt;remote_cache_server&amp;gt;: listening 0.0.0.0:9692 ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then, we edit it, fixing the server’s listening port (optional).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat ~/.xmake/service/server.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    distcc_build &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        listen &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0:9692&quot;&lt;/span&gt;,
        workdir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/remote_cache&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    known_hosts &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    logfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/logs.txt&quot;&lt;/span&gt;,
    tokens &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;590234653af52e91b9e438ed860f1a2b&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;configure-the-client-1&quot;&gt;Configure the client&lt;/h4&gt;

&lt;p&gt;The client configuration file is in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.xmake/service/client.conf&lt;/code&gt;, where we can configure the server address that the client needs to connect to.&lt;/p&gt;

&lt;p&gt;We can configure multiple server addresses and corresponding tokens in the hosts list.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$cat ~/.xmake/service/client.conf
{
    remote_cache = {
            connect = &quot;127.0.0.1:9692,
            token = &quot;590234653af52e91b9e438ed860f1a2b&quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;connect-to-the-server-1&quot;&gt;Connect to the server&lt;/h4&gt;

&lt;p&gt;After configuring the authentication and server address, you can enter the following command to connect the current project to the configured server.&lt;/p&gt;

&lt;p&gt;We need to enter &lt;code class=&quot;highlighter-rouge&quot;&gt;--ccache&lt;/code&gt; when connecting to specify that only the remote compilation cache service is connected.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;projectdir
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --connect --ccache
&amp;lt;client&amp;gt;: connect 127.0.0.1:9692 ..
&amp;lt;client&amp;gt;: 127.0.0.1:9692 connected!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can also connect to multiple services at the same time, such as distributed compilation and remote compilation cache services.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hash&quot;&gt;$ xmake service --connect --distcc --ccache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;!&amp;gt; If there is no parameter, the default connection is the remote compilation service.&lt;/p&gt;

&lt;h4 id=&quot;disconnect-server-1&quot;&gt;Disconnect server&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --disconnect --ccache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;clean-server-cache-1&quot;&gt;Clean server cache&lt;/h4&gt;

&lt;p&gt;We can also use the following command to clear the cache on the remote server corresponding to the current project.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --clean --ccache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And if we execute &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake clean --all&lt;/code&gt;, when the remote service is connected, all caches will be automatically cleaned up.&lt;/p&gt;

&lt;h4 id=&quot;some-optimizations-1&quot;&gt;Some optimizations&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Pull the snapshot of the remote cache and send it back to the local through bloom filter + lz4,
 which is used to quickly determine whether the cache exists and avoid frequently querying the server cache information&lt;/li&gt;
  &lt;li&gt;With the local cache, you can avoid frequent requests to the remote server and pull the cache.&lt;/li&gt;
  &lt;li&gt;Internal state maintenance, compared with independent tools such as sscache,
 avoids frequent independent process loading and time-consuming, and avoids additional communication with the daemon process&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;keilc51-project-support&quot;&gt;Keil/C51 project support&lt;/h3&gt;

&lt;p&gt;We only need to bind to the c51 toolchain, Xmake can automatically detect the Keil/C51 SDK toolchain environment installed on the system,
and then use it to compile.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c51.binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_toolchains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c51&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/main.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course, if you don’t set the toolchain through &lt;code class=&quot;highlighter-rouge&quot;&gt;set_toolchains(&quot;c51&quot;)&lt;/code&gt;,
we can also manually switch to the c51 toolchain through &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --toolchain=c51&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2327&quot;&gt;#2327&lt;/a&gt;: Support nvc/nvc++/nvfortran in nvidia-hpc-sdk&lt;/li&gt;
  &lt;li&gt;Add path instance interfaces&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2334&quot;&gt;#2334&lt;/a&gt;: Add lz4 compress module&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2349&quot;&gt;#2349&lt;/a&gt;: Add keil/c51 project support&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/274&quot;&gt;#274&lt;/a&gt;: Distributed compilation support&lt;/li&gt;
  &lt;li&gt;Use builtin local cache instead of ccache&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2309&quot;&gt;#2309&lt;/a&gt;: Support user authorization for remote compilation&lt;/li&gt;
  &lt;li&gt;Improve remote compilation to support lz4 compression&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Fix lua stack when select package versions&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 24 May 2022 00:00:00 +0800</pubDate>
        <link>https://tboox.org/2022/05/24/xmake-update-v2.6.6/</link>
        <guid isPermaLink="true">https://tboox.org/2022/05/24/xmake-update-v2.6.6/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>remote</category>
        
        <category>ccache</category>
        
        <category>distributed-compilation</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>Xmake v2.6.6 发布，分布式编译和缓存支持</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Xmake&lt;/a&gt; 是一个基于 Lua 的轻量级跨平台构建工具。&lt;/p&gt;

&lt;p&gt;它非常的轻量，没有任何依赖，因为它内置了 Lua 运行时。&lt;/p&gt;

&lt;p&gt;它使用 xmake.lua 维护项目构建，相比 makefile/CMakeLists.txt，配置语法更加简洁直观，对新手非常友好，短时间内就能快速入门，能够让用户把更多的精力集中在实际的项目开发上。&lt;/p&gt;

&lt;p&gt;我们能够使用它像 Make/Ninja 那样可以直接编译项目，也可以像 CMake/Meson 那样生成工程文件，另外它还有内置的包管理系统来帮助用户解决 C/C++ 依赖库的集成使用问题。&lt;/p&gt;

&lt;p&gt;目前，Xmake 主要用于 C/C++ 项目的构建，但是同时也支持其他 native 语言的构建，可以实现跟 C/C++ 进行混合编译，同时编译速度也是非常的快，可以跟 Ninja 持平。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xmake = Build backend + Project Generator + Package Manager + [Remote|Distributed] Build + Cache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;尽管不是很准确，但我们还是可以把 Xmake 按下面的方式来理解：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xmake ~= Make/Ninja + CMake/Meson + Vcpkg/Conan + distcc + ccache/sccache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;项目源码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/about/course&quot;&gt;入门课程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;新特性介绍&quot;&gt;新特性介绍&lt;/h2&gt;

&lt;p&gt;这个版本，我们增加了大量的重量级新特性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;分布式编译支持&lt;/li&gt;
  &lt;li&gt;内置本地编译缓存&lt;/li&gt;
  &lt;li&gt;远程编译缓存支持&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过这些特性，我们可以更加快速地编译大型 C/C++ 项目。另外，它们完全是跨平台的，不仅支持 gcc/clang 也支持 msvc，而且除了编译器无任何第三方依赖，使用也非常方便。&lt;/p&gt;

&lt;p&gt;因此，使用了 Xmake，就等于同时使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;distcc/ccache/sccache&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;相比这些第三方的工具，Xmake 完全支持 Windows 和 msvc，在消除了平台差异性的同事，也省去了独立进程调用，以及额外的守护进程带来的开销。&lt;/p&gt;

&lt;p&gt;除了这些特性之外，新版本 Xmake 还新增 Keil/c51 项目的编译支持，以及对 nvidia-hpc-sdk 工具链中的 nvc/nvc++/nvfortran 编译器的支持。&lt;/p&gt;

&lt;h3 id=&quot;远程编译支持用户认证&quot;&gt;远程编译支持用户认证&lt;/h3&gt;

&lt;p&gt;上个版本我们已经初步支持了远程编译，但是没有提供用户认证支持，这会带来一些安全性问题，因此这个版本，我们新增了用户认证支持。&lt;/p&gt;

&lt;p&gt;目前，Xmake 主要提供以下几种认证机制，另外，它对分布式编译和远程缓存也同样生效。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Token 认证&lt;/li&gt;
  &lt;li&gt;密码认证&lt;/li&gt;
  &lt;li&gt;可信主机验证&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;token-认证&quot;&gt;Token 认证&lt;/h4&gt;

&lt;p&gt;这也是我们默认推荐的方式，更加安全，配置和连接也更加方便，每次连接也不用输入密码。&lt;/p&gt;

&lt;p&gt;我们在执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake service&lt;/code&gt; 命令时候，默认就会生成一个服务端和客户端的配置文件，并且自动生成一个默认的 token，因此本地直连是不需要任何配置的。&lt;/p&gt;

&lt;h5 id=&quot;服务端认证配置&quot;&gt;服务端认证配置&lt;/h5&gt;

&lt;p&gt;服务端可以配置多个 token 用于对不同用户主机进行授权连接，当然也可以共用一个 token。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat ~/.xmake/service/server.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    known_hosts &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    logfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/logs.txt&quot;&lt;/span&gt;,
    remote_build &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        listen &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0:9691&quot;&lt;/span&gt;,
        workdir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/remote_build&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    tokens &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;e438d816c95958667747c318f1532c0f&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;客户端认证配置&quot;&gt;客户端认证配置&lt;/h5&gt;

&lt;p&gt;客户端只需要添加服务器上的 token 到对应的客户端配置中即可。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat ~/.xmake/service/client.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    remote_build &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        connect &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1:9691&quot;&lt;/span&gt;,
        token &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;e438d816c95958667747c318f1532c0f&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;手动生成新-token&quot;&gt;手动生成新 token&lt;/h5&gt;

&lt;p&gt;我们也可以执行下面的命令，手动生成一个新的 token，自己添加到服务器配置中。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --gen-token
New token a7b9fc2d3bfca1472aabc38bb5f5d612 is generated!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;密码认证&quot;&gt;密码认证&lt;/h4&gt;

&lt;p&gt;我们也提供密码认证的授权模式，相比 token 认证，它需要用户每次连接的时候，输入密码，验证通过后，才能连接上。&lt;/p&gt;

&lt;h5 id=&quot;服务端认证配置-1&quot;&gt;服务端认证配置&lt;/h5&gt;

&lt;p&gt;密码认证，我们不需要手动配置 token，只需要执行下面的命令，添加用户就行了，添加过程中，会提示用户输入密码。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --add-user&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ruki
Please input user ruki password:
123456
Add user ruki ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后，xmake 就会通过用户名，密码生成一个新的 token 添加到服务器配置的 token 列表中去。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat ~/.xmake/service/server.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    known_hosts &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    logfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/logs.txt&quot;&lt;/span&gt;,
    remote_build &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        listen &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0:9691&quot;&lt;/span&gt;,
        workdir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/remote_build&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    tokens &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;e438d816c95958667747c318f1532c0f&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;7889e25402413e93fd37395a636bf942&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当然，我们也可以删除指定的用户和密码。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$xmake&lt;/span&gt; service --rm-user&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ruki
Please input user ruki password:
123456
Remove user ruki ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;客户端认证配置-1&quot;&gt;客户端认证配置&lt;/h5&gt;

&lt;p&gt;对于客户端，我们不再需要设置服务器的 token 了，只需要在连接配置中，追加需要连接的用户名即可开启密码认证，格式：&lt;code class=&quot;highlighter-rouge&quot;&gt;user@address:port&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat ~/.xmake/service/client.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    remote_build &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        connect &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;root@127.0.0.1:9691&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;!&amp;gt; 如果去掉用户名，也没配置 token，那就是匿名模式，如果服务器也没配置 token，就是完全禁用认证，直接连接。&lt;/p&gt;

&lt;h4 id=&quot;可信主机验证&quot;&gt;可信主机验证&lt;/h4&gt;

&lt;p&gt;另外，为了更进一步提高安全性，我们还提供了服务端可信主机验证，如果在服务器配置的 known_hosts 列表中，配置了可以连接的客户端主机 ip 地址，
那么只有这些主机可以成功连接上这台服务器，其他主机对它的连接都会被提示为不可信而拒绝连接，即使 token 和密码认证都没问题也不行。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat ~/.xmake/service/server.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    logfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/logs.txt&quot;&lt;/span&gt;,
    server &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        tokens &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;4b928c7563a0cba10ff4c3f5ca0c8e24&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        known_hosts &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;xx.xx.xx.xx&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;连接远程的服务器&quot;&gt;连接远程的服务器&lt;/h4&gt;

&lt;p&gt;接下来，我们只需要进入需要远程编译的工程根目录，执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake service --connect&lt;/code&gt; 命令，进行连接。&lt;/p&gt;

&lt;p&gt;如果是 token 认证模式，那么不需要的额外的密码输入，直接连接。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; create test
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; test
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --connect
&lt;/span&gt;&amp;lt;remote_build_client&amp;gt;: connect 192.168.56.110:9091 ..
&amp;lt;remote_build_client&amp;gt;: connected!
&amp;lt;remote_build_client&amp;gt;: sync files in 192.168.56.110:9091 ..
Scanning files ..
Comparing 3 files ..
    [+]: src/main.cpp
    [+]: .gitignore
    [+]: xmake.lua
3 files has been changed!
Archiving files ..
Uploading files with 1372 bytes ..
&amp;lt;remote_build_client&amp;gt;: sync files ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果是密码认证，那么会提示用户输入密码，才能继续连接。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --connect
Please input user root password:
000000
&amp;lt;remote_build_client&amp;gt;: connect 127.0.0.1:9691 ..
&amp;lt;remote_build_client&amp;gt;: connected!
&amp;lt;remote_build_client&amp;gt;: sync files &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;127.0.0.1:9691 ..
Scanning files ..
Comparing 3 files ..
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+]: xmake.lua
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+]: .gitignore
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+]: src/main.cpp
3 files has been changed!
Archiving files ..
Uploading files with 1591 bytes ..
&amp;lt;remote_build_client&amp;gt;: sync files ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果密码不对，就会提示错误。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --connect
Please input user root password:
123
&amp;lt;remote_build_client&amp;gt;: connect 127.0.0.1:9691 ..
&amp;lt;remote_build_client&amp;gt;: connect 127.0.0.1:9691 failed, user and password are incorrect!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;分布式编译支持&quot;&gt;分布式编译支持&lt;/h3&gt;

&lt;p&gt;Xmake 提供了内置的分布式编译服务，通常它可以跟 本地编译缓存，远程编译缓存 相互配合，实现最优的编译的加速。&lt;/p&gt;

&lt;p&gt;另外，它是完全跨平台支持，我们不仅支持 gcc/clang，也能够很好地支持 Windows 和 msvc。&lt;/p&gt;

&lt;p&gt;对于交叉编译，只要交叉工具链支持，我们不要求服务器的系统环境，即使混用 linux, macOS 和 Windows 的服务器资源，也可以很好的实现分布式编译。&lt;/p&gt;

&lt;h4 id=&quot;开启服务&quot;&gt;开启服务&lt;/h4&gt;

&lt;p&gt;我们可以指定 &lt;code class=&quot;highlighter-rouge&quot;&gt;--distcc&lt;/code&gt; 参数来开启分布式编译服务，当然如果不指定这个参数，xmake 会默认开启所有服务端配置的服务。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --distcc
&lt;/span&gt;&amp;lt;distcc_build_server&amp;gt;: listening 0.0.0.0:9093 ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们也可以开启服务的同时，回显详细日志信息。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --distcc -vD
&lt;/span&gt;&amp;lt;distcc_build_server&amp;gt;: listening 0.0.0.0:9093 ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;以-daemon-模式开启服务&quot;&gt;以 Daemon 模式开启服务&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --distcc --start
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --distcc --restart
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --distcc --stop
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;配置服务端&quot;&gt;配置服务端&lt;/h4&gt;

&lt;p&gt;我们首先，运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake service&lt;/code&gt; 命令，它会自动生成一个默认的 &lt;code class=&quot;highlighter-rouge&quot;&gt;server.conf&lt;/code&gt; 配置文件，存储到 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.xmake/service/server.conf&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service
generating the config file to /Users/ruki/.xmake/service/server.conf ..
an token&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;590234653af52e91b9e438ed860f1a2b&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; is generated, we can use this token to connect service.
generating the config file to /Users/ruki/.xmake/service/client.conf ..
&amp;lt;distcc_build_server&amp;gt;: listening 0.0.0.0:9693 ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后，我们编辑它，修复服务器的监听端口（可选）。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat ~/.xmake/service/server.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    distcc_build &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        listen &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0:9693&quot;&lt;/span&gt;,
        workdir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/distcc_build&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    known_hosts &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    logfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/logs.txt&quot;&lt;/span&gt;,
    tokens &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;590234653af52e91b9e438ed860f1a2b&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;配置客户端&quot;&gt;配置客户端&lt;/h4&gt;

&lt;p&gt;客户端配置文件在 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.xmake/service/client.conf&lt;/code&gt;，我们可以在里面配置客户端需要连接的服务器地址。&lt;/p&gt;

&lt;p&gt;我们可以在 hosts 列表里面配置多个服务器地址，以及对应的 token。&lt;/p&gt;

&lt;p&gt;!&amp;gt; 分布式编译，推荐使用 token 认证模式，因为密码模式，每台服务器连接时候都要输入一次密码，很繁琐。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$cat ~/.xmake/service/client.conf
{
    distcc_build = {
        hosts = {
            {
                connect = &quot;127.0.0.1:9693&quot;,
                token = &quot;590234653af52e91b9e438ed860f1a2b&quot;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;连接服务器&quot;&gt;连接服务器&lt;/h4&gt;

&lt;p&gt;配置完认证和服务器地址后，就可以输入下面的命令，将当前工程连接到配置的服务器上了。&lt;/p&gt;

&lt;p&gt;我们需要在连接时候，输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;--distcc&lt;/code&gt;，指定仅仅连接分布式服务。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;projectdir
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --connect --distcc
&amp;lt;client&amp;gt;: connect 127.0.0.1:9693 ..
&amp;lt;client&amp;gt;: 127.0.0.1:9693 connected!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们也可以同时连接多个服务，比如分布式编译和远程编译缓存服务。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hash&quot;&gt;$ xmake service --connect --distcc --ccache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;!&amp;gt; 如果不带任何参数，默认连接的是远程编译服务。&lt;/p&gt;

&lt;h4 id=&quot;分布式编译项目&quot;&gt;分布式编译项目&lt;/h4&gt;

&lt;p&gt;连接上服务器后，我们就可以像正常本地编译那样，进行分布式编译了，例如：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 93%]: ccache compiling.release src/demo/network/unix_echo_client.c         ----&amp;gt; &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;job
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 93%]: ccache compiling.release src/demo/network/ipv6.c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 93%]: ccache compiling.release src/demo/network/ping.c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 93%]: distcc compiling.release src/demo/network/unix_echo_server.c.         ----&amp;gt; distcc job
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 93%]: distcc compiling.release src/demo/network/http.c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 93%]: distcc compiling.release src/demo/network/unixaddr.c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 93%]: distcc compiling.release src/demo/network/ipv4.c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 94%]: distcc compiling.release src/demo/network/ipaddr.c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 94%]: distcc compiling.release src/demo/math/fixed.c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 94%]: distcc compiling.release src/demo/libm/float.c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 95%]: ccache compiling.release src/demo/libm/double.c
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 95%]: ccache compiling.release src/demo/other/test.cpp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 98%]: archiving.release libtbox.a
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; 99%]: linking.release demo
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;100%]: build ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中，带有 distcc 字样的是远程编译任务，其他的都是本地编译任务，默认 xmake 还开启了本地编译缓存，对分布式编译结果进行缓存，避免频繁请求服务器。&lt;/p&gt;

&lt;p&gt;另外，我们也可以开启远程编译缓存，跟其他人共享编译缓存，进一步加速多人协同开发的编译。&lt;/p&gt;

&lt;h4 id=&quot;断开连接&quot;&gt;断开连接&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --disconnect --distcc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;指定并行编译任务数&quot;&gt;指定并行编译任务数&lt;/h4&gt;

&lt;p&gt;我们先简单介绍下，目前根据主机 cpu core 数量默认计算的并行任务数：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_njob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;math.ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ncpu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因此，如果不开启分布式编译，默认的最大并行编译任务数就是这个 default_njob。&lt;/p&gt;

&lt;p&gt;如果开启分布式编译后，默认的并行编译任务数就是：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxjobs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_njob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server_default_njob&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;修改本地并行任务数&quot;&gt;修改本地并行任务数&lt;/h5&gt;

&lt;p&gt;我们只需要通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;-jN&lt;/code&gt; 就能指定本地并行任务数，但是它不会影响服务端的并行任务数。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake -jN
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;修改服务端并行任务数&quot;&gt;修改服务端并行任务数&lt;/h5&gt;

&lt;p&gt;如果要修改服务端的并行任务数，需要修改客户端的配置文件。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$cat&lt;/span&gt; ~/.xmake/service/client.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    distcc_build &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        hosts &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                connect &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1:9693&quot;&lt;/span&gt;,
                token &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;590234653af52e91b9e438ed860f1a2b&quot;&lt;/span&gt;,
                njob &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 8   &amp;lt;------- modify here
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                connect &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;192.168.01:9693&quot;&lt;/span&gt;,
                token &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;590234653af52e91b9e438ed860f1a2b&quot;&lt;/span&gt;,
                njob &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 4
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以对每个服务器主机，添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;njob = N&lt;/code&gt; 参数配置，指定这台服务器可以提供的并行任务数。&lt;/p&gt;

&lt;h4 id=&quot;分布式编译-android-项目&quot;&gt;分布式编译 Android 项目&lt;/h4&gt;

&lt;p&gt;xmake 提供的分布式编译服务是完全跨平台的，并且支持 Windows, Linux, macOS, Android, iOS 甚至交叉编译。&lt;/p&gt;

&lt;p&gt;如果要进行 Android 项目编译，只需要在服务端配置中，增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;toolchains&lt;/code&gt; 工具链配置，提供 NDK 的跟路径即可。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat ~/.xmake/service/server.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    distcc_build &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        listen &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0:9693&quot;&lt;/span&gt;,
        toolchains &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            ndk &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                ndk &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~/files/android-ndk-r21e&quot;&lt;/span&gt;   &amp;lt;------------ here
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        workdir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/distcc_build&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    known_hosts &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    logfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/logs.txt&quot;&lt;/span&gt;,
    tokens &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;590234653af52e91b9e438ed860f1a2b&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后，我们就可以像正常本地编译那样，分布式编译 Android 项目，甚至可以配置多台 Windows, macOS, Linux 等不同的服务器主机，做为分布式编译服务的资源，来编译它。&lt;/p&gt;

&lt;p&gt;只需要下载对应平台的 NDK 就行了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p android --ndk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/files/xxxx
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;分布式编译-ios-项目&quot;&gt;分布式编译 iOS 项目&lt;/h4&gt;

&lt;p&gt;编译 iOS 项目更加简单，因为 Xmake 通常能自动检测到 Xcode，所以只需要像正常本地一样，切一下平台到 ios 即可。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p iphoneos
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;分布式交叉编译配置&quot;&gt;分布式交叉编译配置&lt;/h4&gt;

&lt;p&gt;如果要分布式交叉编译，我们需要在服务端配置工具链 sdk 路径，例如：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat ~/.xmake/service/server.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    distcc_build &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        listen &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0:9693&quot;&lt;/span&gt;,
        toolchains &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            cross &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                sdkdir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~/files/arm-linux-xxx&quot;&lt;/span&gt;   &amp;lt;------------ here
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        workdir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/distcc_build&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    known_hosts &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    logfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/logs.txt&quot;&lt;/span&gt;,
    tokens &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;590234653af52e91b9e438ed860f1a2b&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中，toolchains 下，每一项对应一个工具链，这里配置为 &lt;code class=&quot;highlighter-rouge&quot;&gt;cross = {}&lt;/code&gt; 交叉工具链，对应 &lt;code class=&quot;highlighter-rouge&quot;&gt;toolchain(&quot;cross&quot;)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;工具链里面我们可以配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;sdkdir&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bindir&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cross&lt;/code&gt; 等等，对应 &lt;code class=&quot;highlighter-rouge&quot;&gt;toolchain(&quot;cross&quot;)&lt;/code&gt; 里面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;set_sdkdir&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;set_bindir&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;set_cross&lt;/code&gt; 等接口配置。&lt;/p&gt;

&lt;p&gt;如果交叉工具链比较规范，我们通常只需要配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;sdkdir&lt;/code&gt;，xmake 就能自动检测到。&lt;/p&gt;

&lt;p&gt;而客户端编译也只需要指定 sdk 目录。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p cross --sdk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/xxx/arm-linux-xxx
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;清理服务器缓存&quot;&gt;清理服务器缓存&lt;/h4&gt;

&lt;p&gt;每个项目在服务端的编译，都会产生一些缓存文件，他们都是按工程粒度分别存储的，我们可以通过下面的命令，对当前工程清理每个服务器对应的缓存。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --clean --distcc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;一些内部优化&quot;&gt;一些内部优化&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;缓存服务器端编译结果，避免重复编译&lt;/li&gt;
  &lt;li&gt;本地缓存，远程缓存优化，避免不必要的服务端通信&lt;/li&gt;
  &lt;li&gt;服务器负载均衡调度，合理分配服务器资源&lt;/li&gt;
  &lt;li&gt;预处理后小文件直接本地编译，通常会更快&lt;/li&gt;
  &lt;li&gt;大文件实时压缩传输，基于 lz4 快速压缩&lt;/li&gt;
  &lt;li&gt;内部状态维护，相比 distcc 等独立工具，避免了频繁的独立进程加载耗时，也避免了与守护进程额外的通信&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;本地编译缓存支持&quot;&gt;本地编译缓存支持&lt;/h3&gt;

&lt;p&gt;默认，Xmake 就会开启本地缓存，2.6.5 之前的版本默认使用外置的 ccache，而 2.6.6 之后版本，Xmake 提供了内置的跨平台本地缓存方案。&lt;/p&gt;

&lt;p&gt;相比 ccache 等第三方独立进程，xmake 内部状态维护，更加便于优化，也避免了频繁的独立进程加载耗时，也避免了与守护进程额外的通信。&lt;/p&gt;

&lt;p&gt;另外，内置的缓存能够更好的支持跨平台，Windows 上 msvc 也能够很好的支持，而 ccache 仅仅支持 gcc/clang。&lt;/p&gt;

&lt;p&gt;当然，我们也可以通过下面的命令禁用缓存。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --ccache&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;n
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注：不管是否使用内置本地缓存，配置名都是 &lt;code class=&quot;highlighter-rouge&quot;&gt;--ccache=&lt;/code&gt;，意思是 c/c++ 构建缓存，而不仅仅是指 ccache 工具的名字。&lt;/p&gt;

&lt;p&gt;我们如果想继续使用外置的其他缓存工具，我们也是可以通过下面的方式来配置。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --ccache&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;n --cxx&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ccache gcc&quot;&lt;/span&gt; --cc&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ccache gcc&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;远程编译缓存支持&quot;&gt;远程编译缓存支持&lt;/h3&gt;

&lt;p&gt;除了本地缓存，我们也提供了远程缓存服务，类似 mozilla 的 sscache，如果只是个人开发，平常不会用到它。&lt;/p&gt;

&lt;p&gt;但是，如果是公司内部多人协同开发一个大型项目，仅仅靠分布式编译和本地缓存，是不够的。我们还需要对编译的对象文件缓存到独立的服务器上进行共享。&lt;/p&gt;

&lt;p&gt;这样，其他人即使首次编译，也不需要每次都去分布式编译它，直接从远程拉取缓存来加速编译。&lt;/p&gt;

&lt;p&gt;另外，Xmake 提供的远程缓存服务，也是全平台支持的，不仅支持 gcc/clang 还支持 msvc。&lt;/p&gt;

&lt;h4 id=&quot;开启服务-1&quot;&gt;开启服务&lt;/h4&gt;

&lt;p&gt;我们可以指定 &lt;code class=&quot;highlighter-rouge&quot;&gt;--ccache&lt;/code&gt; 参数来开启远程编译缓存服务，当然如果不指定这个参数，xmake 会默认开启所有服务端配置的服务。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --ccache
&lt;/span&gt;&amp;lt;remote_cache_server&amp;gt;: listening 0.0.0.0:9092 ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们也可以开启服务的同时，回显详细日志信息。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --ccache -vD
&lt;/span&gt;&amp;lt;remote_cache_server&amp;gt;: listening 0.0.0.0:9092 ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;以-daemon-模式开启服务-1&quot;&gt;以 Daemon 模式开启服务&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --ccache --start
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --ccache --restart
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --ccache --stop
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;配置服务端-1&quot;&gt;配置服务端&lt;/h4&gt;

&lt;p&gt;我们首先，运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake service&lt;/code&gt; 命令，它会自动生成一个默认的 &lt;code class=&quot;highlighter-rouge&quot;&gt;server.conf&lt;/code&gt; 配置文件，存储到 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.xmake/service/server.conf&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service
generating the config file to /Users/ruki/.xmake/service/server.conf ..
an token&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;590234653af52e91b9e438ed860f1a2b&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; is generated, we can use this token to connect service.
generating the config file to /Users/ruki/.xmake/service/client.conf ..
&amp;lt;remote_cache_server&amp;gt;: listening 0.0.0.0:9692 ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后，我们编辑它，修复服务器的监听端口（可选）。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat ~/.xmake/service/server.conf
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    distcc_build &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        listen &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0:9692&quot;&lt;/span&gt;,
        workdir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/remote_cache&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    known_hosts &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    logfile &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/server/logs.txt&quot;&lt;/span&gt;,
    tokens &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;590234653af52e91b9e438ed860f1a2b&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;配置客户端-1&quot;&gt;配置客户端&lt;/h4&gt;

&lt;p&gt;客户端配置文件在 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.xmake/service/client.conf&lt;/code&gt;，我们可以在里面配置客户端需要连接的服务器地址。&lt;/p&gt;

&lt;p&gt;我们可以在 hosts 列表里面配置多个服务器地址，以及对应的 token。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$cat ~/.xmake/service/client.conf
{
    remote_cache = {
            connect = &quot;127.0.0.1:9692,
            token = &quot;590234653af52e91b9e438ed860f1a2b&quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;连接服务器-1&quot;&gt;连接服务器&lt;/h4&gt;

&lt;p&gt;配置完认证和服务器地址后，就可以输入下面的命令，将当前工程连接到配置的服务器上了。&lt;/p&gt;

&lt;p&gt;我们需要在连接时候，输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;--ccache&lt;/code&gt;，指定仅仅连接远程编译缓存服务。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;projectdir
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --connect --ccache
&amp;lt;client&amp;gt;: connect 127.0.0.1:9692 ..
&amp;lt;client&amp;gt;: 127.0.0.1:9692 connected!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们也可以同时连接多个服务，比如分布式编译和远程编译缓存服务。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hash&quot;&gt;$ xmake service --connect --distcc --ccache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;!&amp;gt; 如果不带任何参数，默认连接的是远程编译服务。&lt;/p&gt;

&lt;h4 id=&quot;断开连接-1&quot;&gt;断开连接&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --disconnect --ccache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;清理服务器缓存-1&quot;&gt;清理服务器缓存&lt;/h4&gt;

&lt;p&gt;我们也可以通过下面的命令，清理当前工程对应的远程服务器上的缓存。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake service --clean --ccache
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;而如果我们执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake clean --all&lt;/code&gt;，在连接了远程服务的状态下，也会去自动清理所有的缓存。&lt;/p&gt;

&lt;h4 id=&quot;一些内部优化-1&quot;&gt;一些内部优化&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;拉取远程缓存的快照，通过 bloom filter + lz4 回传本地后，用于快速判断缓存是否存在，避免频繁的查询服务端缓存信息&lt;/li&gt;
  &lt;li&gt;配合本地缓存，可以避免频繁地请求远程服务器，拉取缓存。&lt;/li&gt;
  &lt;li&gt;内部状态维护，相比 sscache 等独立工具，避免了频繁的独立进程加载耗时，也避免了与守护进程额外的通信&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;keilc51-工程支持&quot;&gt;Keil/C51 工程支持&lt;/h3&gt;

&lt;p&gt;我们只需要绑定到 c51 工具链，Xmake 就能自动检测到系统安装的 Keil/C51 SDK 工具链环境，然后使用它进行编译。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c51.binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_toolchains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c51&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/main.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当然，如果不通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;set_toolchains(&quot;c51&quot;)&lt;/code&gt; 设置工具链，我们也可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f --toolchain=c51&lt;/code&gt; 手动切换到 c51 工具链上去。&lt;/p&gt;

&lt;h2 id=&quot;更新内容&quot;&gt;更新内容&lt;/h2&gt;

&lt;h3 id=&quot;新特性&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2327&quot;&gt;#2327&lt;/a&gt;: 支持 nvidia-hpc-sdk 工具链中的 nvc/nvc++/nvfortran 编译器&lt;/li&gt;
  &lt;li&gt;添加 path 实例接口&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2334&quot;&gt;#2334&lt;/a&gt;: 添加 lz4 压缩模块&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2349&quot;&gt;#2349&lt;/a&gt;: 添加 keil/c51 工程支持&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/274&quot;&gt;#274&lt;/a&gt;: 跨平台分布式编译支持&lt;/li&gt;
  &lt;li&gt;使用内置的本地缓存替代 ccache&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;改进&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2309&quot;&gt;#2309&lt;/a&gt;: 远程编译支持用户授权验证&lt;/li&gt;
  &lt;li&gt;改进远程编译，增加对 lz4 压缩支持&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-修复&quot;&gt;Bugs 修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;修复选择包版本时候 lua 栈不平衡导致的崩溃问题&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 24 May 2022 00:00:00 +0800</pubDate>
        <link>https://tboox.org/cn/2022/05/24/xmake-update-v2.6.6/</link>
        <guid isPermaLink="true">https://tboox.org/cn/2022/05/24/xmake-update-v2.6.6/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>remote</category>
        
        <category>ccache</category>
        
        <category>distributed-compilation</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>Summer2022：暑期来 Xmake 社区做项目吧，还有奖金领取哦</title>
        <description>&lt;h3 id=&quot;开源之夏-简介&quot;&gt;“开源之夏” 简介&lt;/h3&gt;

&lt;p&gt;开源之夏是开源软件供应链点亮计划下的暑期活动，由中国科学院软件研究所与openEuler社区联合主办，旨在鼓励在校学生积极参与开源软件的开发维护，促进优秀开源软件社区的蓬勃发展。作为每年暑期最火热的开源活动，开源之夏如今已进入第三届。&lt;/p&gt;

&lt;p&gt;2022年，开源之夏联合124家开源社区，针对开源项目的开发与维护提供mini任务，学生可自主选择感兴趣的项目进行申请，并在中选后获得社区资深开发者亲自指导的机会。项目成功结项并贡献给社区后，参与者将获得开源之夏活动奖金和结项证书。&lt;/p&gt;

&lt;p&gt;开源之夏网站：&lt;a href=&quot;https://summer.iscas.ac.cn/&quot;&gt;https://summer.iscas.ac.cn/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;来-xmake-社区一起做项目&quot;&gt;来 Xmake 社区一起做项目&lt;/h3&gt;

&lt;p&gt;Xmake 社区今年继续参加了开源之夏 2022 活动，欢迎年满 18 周岁的在校学生踊跃参与我们的项目，还有奖金拿哦。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tboox.org/static/img/xmake/xmake_summer.jpeg&quot; alt=&quot;xmake_summer&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;xmake-社区项目&quot;&gt;Xmake 社区项目&lt;/h2&gt;

&lt;p&gt;学生可以申请参加以下三个项目之一，完整项目详情见：&lt;a href=&quot;https://summer-ospp.ac.cn/#/org/orgdetail/090748c6-6504-4d2d-9a11-f9f3e1876f7b/&quot;&gt;Xmake 项目详情&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/&quot;&gt;Xmake 官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;xmake-仓库包制作&quot;&gt;Xmake 仓库包制作&lt;/h3&gt;

&lt;p&gt;完成制作下面 12 个 C/C++ 包进入 Xmake 官方包仓库&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/wolfSSL/wolfssl&lt;/li&gt;
  &lt;li&gt;https://github.com/apache/apr&lt;/li&gt;
  &lt;li&gt;https://github.com/wmcbrine/PDCurses&lt;/li&gt;
  &lt;li&gt;https://github.com/grpc/grpc&lt;/li&gt;
  &lt;li&gt;https://github.com/zyantific/zydis&lt;/li&gt;
  &lt;li&gt;https://github.com/modm-io/modm&lt;/li&gt;
  &lt;li&gt;https://gitlab.gnome.org/GNOME/gdk-pixbuf&lt;/li&gt;
  &lt;li&gt;https://github.com/xtensor-stack/xtensor-io&lt;/li&gt;
  &lt;li&gt;https://github.com/AGWA/git-crypt&lt;/li&gt;
  &lt;li&gt;https://github.com/NVIDIA/thrust&lt;/li&gt;
  &lt;li&gt;v8 for windows&lt;/li&gt;
  &lt;li&gt;quickjs port for windows&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;导师：waruqi@gmail.com&lt;/p&gt;

&lt;h3 id=&quot;xmake-idea-插件改进&quot;&gt;xmake-idea 插件改进&lt;/h3&gt;

&lt;p&gt;由于 Idea 更新迭代频繁，现有 xmake-idea 插件编译存在很多的废弃 API 使用警告，并且最新 CLion 版本也不再支持，因此需要做一些更新支持&lt;/p&gt;

&lt;p&gt;并且需要新增一些配置选项用于支持最新版本的 Xmake 的配置&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;兼容最新版本的 CLion&lt;/li&gt;
  &lt;li&gt;移除所有废弃的 API 使用，并且在不影响功能的前提下，使用新的 API 进行替代&lt;/li&gt;
  &lt;li&gt;配置面板增加一个工具链切换的配置选项&lt;/li&gt;
  &lt;li&gt;更新现有配置中，平台，架构的选项列表&lt;/li&gt;
  &lt;li&gt;检测 xmake.lua 改动自动更新生成 CMakeLists.txt 和 compile_commands.json 文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;导师：dinophp@gmail.com&lt;/p&gt;

&lt;h3 id=&quot;基于-xmake-的面向-rt-thread-smart-操作系统的系统构建工具&quot;&gt;基于 Xmake 的面向 RT-Thread Smart 操作系统的系统构建工具&lt;/h3&gt;

&lt;p&gt;用于 RT-Thread Smart 开源操作系统的，基于 Xmake 的类 buildroot 的交叉构建系统：smart-build，它可以编译基础的软件包（调用xmake &amp;amp; xrepo的方式），构建出基本的应用程序，并输出相关文件到根文件系统文件夹下。&lt;/p&gt;

&lt;p&gt;希望可以做到：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;针对系列的软件包，构建类似buildroot的menuconfig选择软件包及配置；&lt;/li&gt;
  &lt;li&gt;支持两种以上架构的编译工具链，如arm、aarch64、risc-v等中的两种，并可选择；&lt;/li&gt;
  &lt;li&gt;支持软件包的不同版本，并处理好依赖关系，并从网络上下载下来到本地；&lt;/li&gt;
  &lt;li&gt;支持release模式编译，支持debug模式编译；&lt;/li&gt;
  &lt;li&gt;支持按静态库模式编译，支持按动态库模式编译；&lt;/li&gt;
  &lt;li&gt;支持在最终输出到根文件系统时strip掉多余的符号信息；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;欢迎有更多自己的想法，或从用户端对这个事情的理解和考虑。&lt;/p&gt;

&lt;p&gt;产出标准：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;能够基于RT-Thread Smart应用程序构建的方式，构建一个个的程序，并输出到 rt-smart/userapps/root 目录下，并可以使用已有脚本转成rootfs的映像文件；&lt;/li&gt;
  &lt;li&gt;最终代码可以更新到git仓库中，代码符合xmake的规范；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;技术要求：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;熟悉构建系统，熟悉基于GNU GCC &amp;amp; ld 的编译过程；&lt;/li&gt;
  &lt;li&gt;熟悉lua语言，对 xmake、xrepo 有一定的了解；&lt;/li&gt;
  &lt;li&gt;熟悉git操作；&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;中选学生可以获得什么&quot;&gt;中选学生可以获得什么&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;结识开源界小伙伴和技术大牛&lt;/li&gt;
  &lt;li&gt;获得社区导师的专业指导&lt;/li&gt;
  &lt;li&gt;获得开源项目的经验、经历，丰富个人简历&lt;/li&gt;
  &lt;li&gt;获得纪念品、奖金和证书:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果想了解更多详情，见开源之夏官方网站。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/#/zh-cn/&quot;&gt;Xmake 官网&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Xmake 项目&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;开源之夏官网：https://summer-ospp.ac.cn/&lt;/li&gt;
  &lt;li&gt;学生参加指南：https://summer-ospp.ac.cn/help/student/&lt;/li&gt;
  &lt;li&gt;Xmake 项目详情：https://summer-ospp.ac.cn/#/org/orgdetail/090748c6-6504-4d2d-9a11-f9f3e1876f7b/&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 01 May 2022 00:00:00 +0800</pubDate>
        <link>https://tboox.org/cn/2022/05/01/xmake-summer-2022/</link>
        <guid isPermaLink="true">https://tboox.org/cn/2022/05/01/xmake-summer-2022/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>summer</category>
        
        <category>开源之夏</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>Xmake v2.6.5 released, Support remote compilation</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Xmake&lt;/a&gt; is a lightweight cross-platform build utility based on Lua.&lt;/p&gt;

&lt;p&gt;It is very lightweight and has no dependencies because it has a built-in Lua runtime.&lt;/p&gt;

&lt;p&gt;It uses xmake.lua to maintain project builds and its configuration syntax is very simple and readable.&lt;/p&gt;

&lt;p&gt;We can use it to build project directly like Make/Ninja, or generate project files like CMake/Meson, and it also has a built-in package management system to help users solve the integrated use of C/C++ dependent libraries.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xmake = Build backend + Project Generator + Package Manager
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmake.io/&quot;&gt;Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction-of-new-features&quot;&gt;Introduction of new features&lt;/h2&gt;

&lt;h3 id=&quot;remote-compilation-support&quot;&gt;Remote Compilation Support&lt;/h3&gt;

&lt;p&gt;The new version provides remote compilation support, which allows us to compile code on a remote server, run and debug remotely.&lt;/p&gt;

&lt;p&gt;The server can be deployed on Linux/MacOS/Windows to enable cross-platform compilation, e.g. compile and run Windows programs on Linux and macOS/Linux programs on Windows.&lt;/p&gt;

&lt;p&gt;It is more stable and smoother to use than ssh remote login compilation, no lagging of ssh terminal input due to network instability, and allows for quick local editing of code files.&lt;/p&gt;

&lt;p&gt;We can even seamlessly implement remote compilation in editors and IDEs such as vs/sublime/vscode/idea without relying on the IDE’s own support for remote compilation.&lt;/p&gt;

&lt;h4 id=&quot;start-service&quot;&gt;Start service&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service
&lt;/span&gt;&amp;lt;remote_build_server&amp;gt;: listening 0.0.0.0:9096 ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can also turn on the service while displaying back detailed log messages.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service -vD
&lt;/span&gt;&amp;lt;remote_build_server&amp;gt;: listening 0.0.0.0:9096 ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;start-the-service-in-daemon-mode&quot;&gt;Start the service in Daemon mode&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --start
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --restart
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --stop
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;configure-the-server&quot;&gt;Configure the server&lt;/h4&gt;

&lt;p&gt;We start by running the &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake service&lt;/code&gt; command, which automatically generates a default &lt;code class=&quot;highlighter-rouge&quot;&gt;service.conf&lt;/code&gt; configuration file, stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.xmake/service.conf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, we edit it to fix the server’s listening port (optional).&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/logs.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;remote_build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0:9096&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;configure-the-client&quot;&gt;Configure the client&lt;/h4&gt;

&lt;p&gt;We still edit this file &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.xmake/service.conf&lt;/code&gt; to configure the address of the server to which the client needs to connect.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Users/ruki/.xmake/service/logs.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;remote_build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;192.168.56.101:9096&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;import-the-given-configuration-file&quot;&gt;Import the given configuration file&lt;/h4&gt;

&lt;p&gt;We can also import the given configuration file by using the following command.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --config=/tmp/service.conf
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;connect-to-the-remote-server&quot;&gt;Connect to the remote server&lt;/h4&gt;

&lt;p&gt;Next, we just need to go into the root directory of the project we need to compile remotely and execute the &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake service --connect&lt;/code&gt; command to make the connection.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; create test
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; test
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --connect 
&lt;/span&gt;&amp;lt;remote_build_client&amp;gt;: connect 192.168.56.110:9096 ...
&amp;lt;remote_build_client&amp;gt;: connected!
&amp;lt;remote_build_client&amp;gt;: sync files in 192.168.56.110:9096 ...
Scanning files ...
Comparing 3 files ...
    [+]: src/main.cpp
    [+]: .gitignore
    [+]: xmake.lua
3 files has been changed!
Archiving files .
Uploading files with 1372 bytes ...
&amp;lt;remote_build_client&amp;gt;: sync files ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;remote-build-project&quot;&gt;Remote build project&lt;/h4&gt;

&lt;p&gt;Once the connection is successful, we can build remotely as if we were building locally as normal.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt;
&lt;/span&gt;&amp;lt;remote_build_client&amp;gt;: run xmake in 192.168.56.110:9096 ...
checking for platform ... macosx
checking for architecture ... ... x86_64
... checking for Xcode directory ... /Applications/Xcode.app
checking for Codesign Identity of Xcode ... Apple Development: waruqi@gmail.com (T3NA4MRVPU)
... checking for SDK version of Xcode for macosx (x86_64) ... 11.3
... checking for Minimal target version of Xcode for macosx (x86_64) ... 11.4
[ 25%]: ccache compiling.release src/main.cpp
[ 50%]: linking.release test
[ 100%]: build ok!
&amp;lt;remote_build_client&amp;gt;: run command ok!
```&#39;&#39;








&lt;span class=&quot;ni&quot;&gt;#### &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Running&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; the target program remotely
&lt;/span&gt;
We can also run a debug-compiled target program remotely, just as we can run a debug locally.

```console
&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; run
&lt;/span&gt;&amp;lt;remote_build_client&amp;gt;: run xmake run in 192.168.56.110:9096 ...
hello world!
&amp;lt;remote_build_client&amp;gt;: run command ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;rebuild-project-remotely&quot;&gt;Rebuild project remotely&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; -rv
&lt;/span&gt;&amp;lt;remote_build_client&amp;gt;: run xmake -rv in 192.168.56.110:9096 ...
[ 25% ]: ccache compiling.release src/main.cpp
/usr/local/bin/ccache /usr/bin/xcrun -sdk macosx clang -c -Qunused-arguments -arch x86_64 -mmacosx-version-min=11.4 -isysroot /Applications/ Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.3.sdk -fvisibility=hidden -fvisibility-inlines-hidden -O3 -DNDEBUG -o build/.objs/test/macosx/x86_64/release/src/main.cpp.o src/main.cpp
[ 50%]: linking.release test
&quot;/usr/bin/xcrun -sdk macosx clang++&quot; -o build/macosx/x86_64/release/test build/.objs/test/macosx/x86_64/release/src/main.cpp.o -arch x86_ 64 -mmacosx-version-min=11.4 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.3 .sdk -stdlib=libc++ -Wl,-x -lz
[100%]: build ok!
&amp;lt;remote_build_client&amp;gt;: run command ok!
```&#39;&#39;

&lt;span class=&quot;ni&quot;&gt;#### &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Remote&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; configuration of build parameters
&lt;/span&gt;
```console
&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; f --xxx --yy
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;manually-synchronise-project-files&quot;&gt;Manually synchronise project files&lt;/h4&gt;

&lt;p&gt;When you connect, the code is automatically synchronised once, and you can execute this command to manually synchronise the changed files if the code changes later.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --sync
&lt;/span&gt;&amp;lt;remote_build_client&amp;gt;: sync files in 192.168.56.110:9096 ...
Scanning files ...
Comparing 3 files ...
    [+]: src/main.cpp
    [+]: .gitignore
    [+]: xmake.lua
3 files has been changed!
Archiving files .
Uploading files with 1372 bytes ...
&amp;lt;remote_build_client&amp;gt;: sync files ok!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;disconnect-from-a-remote&quot;&gt;Disconnect from a remote&lt;/h4&gt;

&lt;p&gt;This only affects the current project, other projects can still connect and build at the same time.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --disconnect
&lt;/span&gt;&amp;lt;remote_build_client&amp;gt;: disconnect 192.168.56.110:9096 ...
&amp;lt;remote_build_client&amp;gt;: disconnected!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;view-server-logs&quot;&gt;View server logs&lt;/h4&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --logs
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;clear-the-remote-service-cache-and-build-files&quot;&gt;Clear the remote service cache and build files&lt;/h4&gt;

&lt;p&gt;We can also manually clean up any cache and build generated files for the remote.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; projectdir
&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;xmake&lt;/span&gt;&lt;span class=&quot;kv&quot;&gt; service --clean
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;improve-cargo-package-dependencies&quot;&gt;Improve Cargo package dependencies&lt;/h3&gt;

&lt;p&gt;In previous versions we have been able to integrate each cargo package individually via ``add_requires(“cargo::base64”)` for compiling rust projects, and for mixed compilation with C/C++, e.g.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cargo::base64 0.13.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cargo::flate2 1.0.17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;zlib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/main.rs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cargo::base64&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cargo::flate2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But there is a problem with the above approach.&lt;/p&gt;

&lt;p&gt;If there are many dependencies and several dependencies all share a dependency on the same child dependency, then there will be a redefinition problem, so if we use the full Cargo.toml to manage the dependencies we won’t have this problem.&lt;/p&gt;

&lt;p&gt;For example&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mode.release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mode.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cargo::test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cargo_toml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projectdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Cargo.toml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/main.rs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cargo::test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can then integrate all the required dependencies in Cargo.toml, leaving Rust to analyse the dependencies itself and avoid duplicate child dependency conflicts.&lt;/p&gt;

&lt;p&gt;For a full example see: &lt;a href=&quot;https://github.com/xmake-io/xmake/blob/dev/tests/projects/rust/cargo_deps_with_toml/xmake.lua&quot;&gt;cargo_deps_with_toml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, if the user has a single dependency, then the previous integration approach is still perfectly usable.&lt;/p&gt;

&lt;h4 id=&quot;why-use-xmake-to-compile-rust&quot;&gt;Why use Xmake to compile Rust?&lt;/h4&gt;

&lt;p&gt;At this point, one might ask why we need to configure xmake.lua when we are already using Cargo.toml and Cargo, and why not just compile Cargo?&lt;/p&gt;

&lt;p&gt;If we are developing a C/C++ project in Xmake, but need to introduce some Rust submodules for use in the C/C++ project, this is a quick and easy way to call Rust libraries and code in C/C++.&lt;/p&gt;

&lt;p&gt;For more instructions on calling Rust code libraries in C/C++, see: &lt;a href=&quot;https://xmake.io/#/zh-cn/guide/project_examples?id=%e4%bd%bf%e7%94%a8- cxxbridge-%e5%9c%a8-c-%e4%b8%ad%e8%b0%83%e7%94%a8-rust&quot;&gt;Calling Rust in C/C++ using cxxbridge&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;support-for-source-file-grouping&quot;&gt;Support for source file grouping&lt;/h3&gt;

&lt;p&gt;In this new version, we provide a new interface &lt;code class=&quot;highlighter-rouge&quot;&gt;add_filegroups&lt;/code&gt; for grouping source files for presentation of project files generated by the vs/vsxmake/cmakelists generator.&lt;/p&gt;

&lt;p&gt;If you don’t set up grouping, Xmake will also display them in a tree-like pattern by default, but there are some extreme cases where the directory hierarchy doesn’t display very well, e.g.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;... /... /... /... /src/**.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://xmake.io/assets/img/manual/filegroup1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Two main presentation modes are currently supported.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;plain: flat mode&lt;/li&gt;
  &lt;li&gt;tree: tree display, this is also the default mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also supports the grouping of files added by &lt;code class=&quot;highlighter-rouge&quot;&gt;add_headerfiles&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;set-the-file-group-and-specifies-the-root-directory&quot;&gt;Set the file group and specifies the root directory&lt;/h4&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;. /... /... /... /src/**.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_filegroups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;group1/group2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootdir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;... /... /... /... /&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://xmake.io/assets/img/manual/filegroup2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;set-the-file-group-and-specifies-the-file-matching-pattern&quot;&gt;Set the file group and specifies the file matching pattern&lt;/h4&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;... /... /... /... /src/**.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_filegroups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;group1/group2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootdir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;... /... /... /... /&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/**.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;show-files-as-flat-mode&quot;&gt;Show files as flat mode&lt;/h4&gt;

&lt;p&gt;In this mode, all source files ignore the nested directory hierarchy and are displayed at the same level under the grouping.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;. /... /... /... /src/**.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_filegroups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;group1/group2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootdir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;... /... /... /... /&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;plain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://xmake.io/assets/img/manual/filegroup3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;package-versioning-support-for-git-commit&quot;&gt;Package versioning support for Git Commit&lt;/h3&gt;

&lt;p&gt;Xmake’s package dependency management interface &lt;code class=&quot;highlighter-rouge&quot;&gt;add_requires&lt;/code&gt; supports versioning semantics, branch selection, e.g.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tbox 1.6.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tbox &amp;gt;= 1.6.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tbox master&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, in previous versions, we didn’t support selecting versions from Git Commit, and now we do.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;add_requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tbox e807230557aac69e4d583c75626e3a7ebdb922f8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As long as, this package is configured with a Git url, you can select the version from Commit.&lt;/p&gt;

&lt;h3 id=&quot;better-support-for-ios-simulator-compilation&quot;&gt;Better support for iOS simulator compilation&lt;/h3&gt;

&lt;p&gt;If you want to compile a target application for the iOS platform, you can previously use the following configuration to compile the real and emulator versions of the application separately, simply by switching arch.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p iphoneos &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-a armv7|armv7s|arm64|i386|x86_64]
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, since the emulator on M1 devices also supports the arm64 architecture, it was no longer possible to distinguish an emulator from an arch.
Therefore, in this new version, we have added a new parameter to distinguish between emulator and emulator targets.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p iphoneos --appledev&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;simulator
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p watchos --appledev&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;simulator
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -p appletvos --appledev&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;simulator
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And if you don’t specify the &lt;code class=&quot;highlighter-rouge&quot;&gt;--appledev=&lt;/code&gt; argument, the default is to compile the real program, but of course the previous modes are fully compatible.&lt;/p&gt;

&lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2138&quot;&gt;#2138&lt;/a&gt;: Support template package&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2185&quot;&gt;#2185&lt;/a&gt;: Add &lt;code class=&quot;highlighter-rouge&quot;&gt;--appledev=simulator&lt;/code&gt; to improve apple simulator support&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2227&quot;&gt;#2227&lt;/a&gt;: Improve cargo package with Cargo.toml file&lt;/li&gt;
  &lt;li&gt;Improve &lt;code class=&quot;highlighter-rouge&quot;&gt;add_requires&lt;/code&gt; to support git commit as version&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/622&quot;&gt;#622&lt;/a&gt;: Support remote compilation&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2282&quot;&gt;#2282&lt;/a&gt;: Add &lt;code class=&quot;highlighter-rouge&quot;&gt;add_filegroups&lt;/code&gt; to support file group for vs/vsxmake/cmake generator&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2137&quot;&gt;#2137&lt;/a&gt;: Improve path module&lt;/li&gt;
  &lt;li&gt;Reduce 50% xmake binary size on macOS&lt;/li&gt;
  &lt;li&gt;Improve tools/autoconf,cmake to support toolchain switching.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/pull/2221&quot;&gt;#2221&lt;/a&gt;: Improve registry api to support unicode&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2225&quot;&gt;#2225&lt;/a&gt;: Support to parse import dependencies for protobuf&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2265&quot;&gt;#2265&lt;/a&gt;: Sort CMakeLists.txt&lt;/li&gt;
  &lt;li&gt;Speed up &lt;code class=&quot;highlighter-rouge&quot;&gt;os.files&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xmake-io/xmake/issues/2233&quot;&gt;#2233&lt;/a&gt;: Fix c++ modules deps&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 24 Apr 2022 00:00:00 +0800</pubDate>
        <link>https://tboox.org/2022/04/24/xmake-update-v2.6.5/</link>
        <guid isPermaLink="true">https://tboox.org/2022/04/24/xmake-update-v2.6.5/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>C/C++</category>
        
        <category>cargo</category>
        
        <category>rust</category>
        
        <category>remote-compilation</category>
        
        
        <category>xmake</category>
        
      </item>
    
  </channel>
</rss>
